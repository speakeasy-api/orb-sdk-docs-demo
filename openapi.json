{
    "openapi": "3.1.0",
    "info": {
        "title": "API Reference",
        "description": "Orb's API is built with the following principles in mind:\n\n1. **Predictable developer experience**: Where applicable, the Orb API uses industry-standard patterns such as\ncursor-based pagination and standardized error output. To help with debugging in critical API\nactions, the API always strives to provide detailed and actionable error messages. Aliases\nsuch as external customer IDs aid in fast integration times.\n2. **Reliably real time**: Orb's event-based APIs, such as event ingestion are designed to handle extremely high\nthroughput and scale with concurrent load. Orb also provides a real-time event-level credits\nledger and a highly performant webhooks architecture.\n3. **Flexibility at the forefront**: Features like timezone localization and the ability to amend historical usage\nshow the flexible nature of the platform.\n\nYou can download the latest OpenAPI spec [here](pathname:///spec.json).",
        "contact": {
            "name": "Orb, Inc.",
            "url": "https://www.withorb.com/",
            "email": "team@withorb.com"
        },
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://api.withorb.com/v1",
            "description": "Production server"
        }
    ],
    "paths": {
        "/coupons": {
            "get": {
                "tags": [
                    "Coupon"
                ],
                "summary": "List coupons",
                "description": "This endpoint returns a list of all coupons for an account in a list format.\n\nThe list of coupons is ordered starting from the most recently created coupon. The response also includes\n`pagination_metadata`, which lets the caller retrieve the next page of results if they exist. More information\nabout pagination can be found in the Pagination-metadata schema.",
                "operationId": "list-coupons",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Show Archived",
                            "description": "Show archived coupons as well (by default, this endpoint only returns active coupons)."
                        },
                        "name": "show_archived",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Redemption Code",
                            "description": "Filter to coupons matching this redemption code."
                        },
                        "name": "redemption_code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Coupons"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Coupon"
                ],
                "summary": "Create coupon",
                "description": "This endpoint allows the creation of coupons, which can then be redeemed at subscription creation or plan change.",
                "operationId": "create-coupon",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCoupon"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Coupon"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/coupons/{coupon_id}": {
            "get": {
                "tags": [
                    "Coupon"
                ],
                "summary": "Fetch coupon",
                "description": "This endpoint retrieves a coupon by its ID. To fetch coupons by their redemption code, use the\n[List coupons](list-coupons) endpoint with the redemption_code parameter.",
                "operationId": "fetch-coupon",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "coupon_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Coupon"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/coupons/{coupon_id}/archive": {
            "post": {
                "tags": [
                    "Coupon"
                ],
                "summary": "Archive coupon",
                "description": "This endpoint allows a coupon to be archived. Archived coupons can no longer be redeemed, and\nwill be hidden from lists of active coupons. Additionally, once a coupon is archived, its redemption\ncode can be reused for a different coupon.",
                "operationId": "archive-coupon",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "coupon_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Coupon"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/coupons/{coupon_id}/subscriptions": {
            "get": {
                "tags": [
                    "Coupon"
                ],
                "summary": "List coupon subscriptions",
                "description": "This endpoint returns a list of all subscriptions that have redeemed a given coupon as a\n[paginated](../reference/pagination) list, ordered starting from the most recently created subscription. For a full\ndiscussion of the subscription resource, see [Subscription](../guides/concepts#subscription).",
                "operationId": "list-coupon-subscriptions",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "coupon_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscriptions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "list-subscriptions",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/credit_notes": {
            "get": {
                "tags": [
                    "Credit note"
                ],
                "summary": "List credit notes",
                "description": "Get a paginated list of CreditNotes. Users can also filter by\ncustomer_id, subscription_id, or external_customer_id. The credit notes will be returned\nin reverse chronological order by `creation_time`.",
                "operationId": "list-credit-notes",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNotes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/credit_notes/{credit_note_id}": {
            "get": {
                "tags": [
                    "Credit note"
                ],
                "summary": "Fetch credit note",
                "description": "This endpoint is used to fetch a single [`Credit Note`](../guides/invoicing/credit-notes) given an identifier.",
                "operationId": "fetch-credit-note",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "credit_note_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "List customers",
                "description": "This endpoint returns a list of all customers for an account.\nThe list of customers is ordered starting from the most recently created customer.\nThis endpoint follows Orb's [standardized pagination format](../reference/pagination).\n\nSee [Customer](../guides/concepts#customer) for an overview of the customer model.",
                "operationId": "list-customers",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customers"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create customer",
                "description": "This operation is used to create an Orb customer, who is party to the core billing relationship. See\n[Customer](../guides/concepts#customer) for an overview of the customer resource.\n\nThis endpoint is critical in the following Orb functionality:\n* Automated charges can be configured by setting `payment_provider` and `payment_provider_id` to automatically\n  issue invoices\n* [Customer ID Aliases](../guides/events-and-metrics/customer-aliases) can be configured by setting\n  `external_customer_id`\n* [Timezone localization](../guides/product-catalog/timezones.md) can be configured on a per-customer basis by\n  setting the `timezone` parameter",
                "operationId": "create-customer",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCustomer"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "create"
            }
        },
        "/customers/external_customer_id/{external_customer_id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer by external ID",
                "description": "This endpoint is used to fetch customer details given an `external_customer_id` (see\n[Customer ID Aliases](../guides/events-and-metrics/customer-aliases)).\n\nNote that the resource and semantics of this endpoint exactly mirror [Get Customer](fetch-customer).",
                "operationId": "fetch-customer-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-by-external-id"
            },
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update customer by external ID",
                "description": "This endpoint is used to update customer details given an `external_customer_id`\n(see [Customer ID Aliases](../guides/events-and-metrics/customer-aliases)).\nNote that the resource and semantics of this endpoint exactly mirror [Update Customer](update-customer).",
                "operationId": "update-customer-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditCustomer"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "update-by-external-id"
            }
        },
        "/customers/external_customer_id/{external_customer_id}/costs": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer costs by external ID",
                "description": "This endpoint is used to fetch a day-by-day snapshot of a customer's costs in Orb, calculated by applying pricing\ninformation to the underlying usage (see the [subscription usage endpoint](fetch-subscription-usage.api.mdx) to\nfetch usage per metric, in usage units rather than a currency).\n\nThis endpoint can be leveraged for internal tooling and to provide a more transparent billing experience for your\nend users:\n\n1. Understand the cost breakdown per line item historically and in real-time for the current billing period.\n2. Provide customer visibility into how different services are contributing to the overall invoice with a per-day\n  timeseries (as compared to the [upcoming invoice](fetch-upcoming-invoice) resource, which represents a snapshot\n  for the current period).\n3. Assess how minimums and discounts affect your customers by teasing apart costs directly as a result of usage,\n  as opposed to minimums and discounts at the plan and price level.\n4. Gain insight into key customer health metrics, such as the percent utilization of the minimum committed spend.\n\n## Fetching subscriptions\nBy default, this endpoint fetches the currently active subscription for the customer, and returns cost information\nfor the subscription's current billing period, broken down by each participating price. If there are no currently\nactive subscriptions, this will instead default to the most recently active subscription or return an empty series\nif none are found. For example, if your plan charges for compute hours, job runs, and data syncs, then this endpoint\nwould provide a daily breakdown of your customer's cost for each of those axes.\n\nIf timeframe bounds are specified, Orb fetches all subscriptions that were active in that timeframe. If two\nsubscriptions overlap on a single day, costs from each price will be summed, and prices for both subscriptions will\nbe included in the breakdown.\n\n## Prepaid plans\nFor plans that include prices which deduct credits rather than accrue in-arrears charges in a billable currency,\nthis endpoint will return the total deduction amount, in credits, for the specified timeframe.\n\n## Cumulative subtotals and totals\nSince the subtotal and total must factor in any billing-period level discounts and minimums, it's most meaningful\nto consider costs relative to the start of the subscription's billing period. As a result, by default this endpoint\nreturns cumulative totals since the beginning of the billing period. In particular, the `timeframe_start` of a\nreturned timeframe window is *always* the beginning of the billing period and `timeframe_end` is incremented one day\nat a time to build the result.\n\nA customer that uses a few API calls a day but has a minimum commitment might exhibit the following pattern for\ntheir subtotal and total in the first few days of the month. Here, we assume that each API call is $2.50, the\ncustomer's plan has a monthly minimum of $50 for this price, and that the subscription's billing period bounds are\naligned to the first of the month:\n\n| timeframe_start | timeframe_end | Cumulative usage | Subtotal | Total (incl. commitment)  |\n| -----------| ----------- | ----------- | ----------- |----------- |\n| 2023-02-01 | 2023-02-02 | 9 | $22.50 | $50.00 |\n| 2023-02-01 | 2023-02-03 | 19 | $47.50 | $50.00 |\n| 2023-02-01 | 2023-02-04 | 20 | $50.00 | $50.00 |\n| 2023-02-01 | 2023-02-05 | 28 | $70.00 | $70.00 |\n| 2023-02-01 | 2023-02-06 | 36 | $90.00 | $90.00 |\n\n### Periodic values\nWhen the query parameter `view_mode=periodic` is specified, Orb will return an incremental day-by-day view of costs.\nIn this case, there will always be a one-day difference between `timeframe_start` and `timeframe_end` for the\ntimeframes returned. This is a transform on top of the cumulative costs, calculated by taking the difference of each\ntimeframe with the last. Note that in the above example, the `Total` value would be 0 for the second two data\npoints, since the minimum commitment has not yet been hit and each day is not contributing anything to the total\ncost.\n\n## Timeframe bounds\nIf no timeframe bounds are specified, the response will default to the current billing period for the customer's\nsubscription. For subscriptions that have ended, this will be the billing period when they were last active. If the\nsubscription starts or ends within the timeframe, the response will only include windows where the subscription is\nactive.\n\nAs noted above, `timeframe_start` for a given cumulative datapoint is always the beginning of the billing period,\nand `timeframe_end` is incremented one day at a time to construct the response. When a timeframe is passed in that\nis not aligned to the current subscription's billing period, the response will contain cumulative totals from\nmultiple billing periods.\n\nSuppose the queried customer has a subscription aligned to the 15th of every month. If this endpoint is queried with\nthe date range `2023-06-01` - `2023-07-01`, the first data point will represent about half a billing period's worth\nof costs, accounting for accruals from the start of the billing period and inclusive of the first day of the\ntimeframe (`timeframe_start = 2023-05-15 00:00:00`, `timeframe_end = 2023-06-02 00:00:00`)\n\n| datapoint index | timeframe_start | timeframe_end |\n| ----------- | -----------| ----------- |\n| 0 | 2023-05-15 | 2023-06-02 |\n| 1 | 2023-05-15 | 2023-06-03 |\n| 2 | ... | ... |\n| 3 | 2023-05-15 | 2023-06-14 |\n| 4 | 2023-06-15 | 2023-06-16 |\n| 5 | 2023-06-15 | 2023-06-17 |\n| 6 | ... | ... |\n| 7 | 2023-06-15 | 2023-07-01 |\n\nYou can see this sliced timeframe visualized [here](https://i.imgur.com/TXhYgme.png).\n\n## Grouping by custom attributes\nIn order to view costs grouped by a specific _attribute_ that each event is tagged with (i.e. `cluster`), you can\nadditionally specify a `group_by` key. The `group_by` key denotes the event property on which to group.\n\nWhen returning grouped costs, a separate `price_group` object in the `per_price_costs` array is returned for each\nvalue of the `group_by` key present in your events. The `subtotal` value of the `per_price_costs` object is the sum\nof each `price_group`'s total.\n\nOrb expects events will contain values in the `properties` dictionary that correspond to the `group_by` key\nspecified. By default, Orb will return a `null` group (i.e. events that match the metric but do not have the key\nset). Currently, it is only possible to view costs grouped by a single attribute at a time.\n\n### Matrix prices\nWhen a price uses matrix pricing, it's important to view costs grouped by those matrix dimensions. Orb will return\n`price_groups` with the `grouping_key` and `secondary_grouping_key` based on the matrix price definition, for each\n`grouping_value` and `secondary_grouping_value` available.",
                "operationId": "fetch-customer-costs-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe Start",
                            "description": "Costs returned are inclusive of `timeframe_start`.",
                            "examples": [
                                "2022-02-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe End",
                            "description": "Costs returned are exclusive of `timeframe_end`.",
                            "examples": [
                                "2022-03-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "periodic",
                                        "cumulative"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "View Mode",
                            "description": "Controls whether Orb returns cumulative costs since the start of the billing period, or incremental day-by-day costs. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior."
                        },
                        "name": "view_mode",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Group By",
                            "description": "Groups per-price costs by the key provided."
                        },
                        "name": "group_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCosts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-costs-by-external-id"
            }
        },
        "/customers/external_customer_id/{external_customer_id}/credits": {
            "get": {
                "tags": [
                    "Credit"
                ],
                "summary": "Fetch customer credit balance by external customer id",
                "description": "Returns a paginated list of unexpired, non-zero credit blocks for a customer.",
                "operationId": "fetch-customer-credits-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCreditBalances"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-balance-by-external-id",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/customers/external_customer_id/{external_customer_id}/credits/ledger": {
            "get": {
                "tags": [
                    "Credit"
                ],
                "summary": "Fetch customer credits ledger by external ID",
                "description": "The credits ledger provides _auditing_ functionality over Orb's credits system with a list of actions that have\ntaken place to modify a customer's credit balance. This [paginated endpoint](../reference/pagination) lists these\nentries, starting from the most recent ledger entry.\n\nMore details on using Orb's real-time credit feature are [here](../guides/product-catalog/prepurchase.md).\n\nThere are four major types of modifications to credit balance, detailed below.\n\n## Increment\nCredits (which optionally expire on a future date) can be added via the API\n([Add Ledger Entry](create-ledger-entry)). The ledger entry for such an action will always contain the total\neligible starting and ending balance for the customer at the time the entry was added to the ledger.\n\n## Decrement\nDeductions can occur as a result of an API call to create a ledger entry (see\n[Add Ledger Entry](create-ledger-entry)), or automatically as a result of incurring usage. Both ledger entries\npresent the `decrement` entry type.\n\nAs usage for a customer is reported into Orb, credits may be deducted according to the customer's plan\nconfiguration. An automated deduction of this type will result in a ledger entry, also with a starting and ending\nbalance. In order to provide better tracing capabilities for automatic deductions, Orb always associates each\nautomatic deduction with the `event_id` at the time of ingestion, used to pinpoint _why_ credit deduction took\nplace and to ensure that credits are never deducted without an associated usage event.\n\nBy default, Orb uses an algorithm that automatically deducts from the *soonest expiring credit block* first in\norder to ensure that all credits are utilized appropriately. As an example, if trial credits with an expiration date\nof 2 weeks from now are present for a customer, they will be used before any deductions take place from a\nnon-expiring credit block.\n\nIf there are multiple blocks with the same expiration date, Orb will deduct from the block with the\n*lower cost basis* first (ex. trial credits with a $0 cost basis before paid credits with a $5.00 cost basis).\n\nIt's also possible for a single usage event's deduction to _span_ credit blocks. In this case, Orb will deduct from\nthe next block, ending at the credit block which consists of unexpiring credits. Each of these deductions will lead\nto a _separate_ ledger entry, one per credit block that is deducted from. By default, the customer's total credit\nbalance in Orb can be negative as a result of a decrement.\n\n## Expiration change\nThe expiry of credits can be changed as a result of the API (See [Add Ledger Entry](create-ledger-entry)). This will\ncreate a ledger entry that specifies the balance as well as the initial and target expiry dates.\n\nNote that for this entry type, `starting_balance` will equal `ending_balance`, and the `amount` represents the\nbalance transferred. The credit block linked to the ledger entry is the source credit block from which there was an\nexpiration change\n\n## Credits expiry\nWhen a set of credits expire on pre-set expiration date, the customer's balance automatically reflects this change\nand adds an entry to the ledger indicating this event. Note that credit expiry should always happen close to a date\nboundary in the customer's timezone.\n\n## Void initiated\nCredit blocks can be voided via the API. The `amount` on this entry corresponds to the number of credits that were\nremaining in the block at time of void. `void_reason` will be populated if the void is created with a reason.\n\n## Void\nWhen a set of credits is voided, the customer's balance automatically reflects this change and adds an entry to the\nledger indicating this event.\n\n## Amendment\nWhen credits are added to a customer's balance as a result of a correction, this entry will be added to the ledger\nto indicate the adjustment of credits.",
                "operationId": "fetch-customer-credits-ledger-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Currency"
                        },
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Minimum Amount"
                        },
                        "name": "minimum_amount",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "increment",
                                        "decrement",
                                        "expiration_change",
                                        "credit_block_expiry",
                                        "void",
                                        "void_initiated",
                                        "amendment"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Entry Type"
                        },
                        "name": "entry_type",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "committed",
                                        "pending"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Entry Status"
                        },
                        "name": "entry_status",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditLedgerEntries"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-ledger-by-external-id"
            }
        },
        "/customers/external_customer_id/{external_customer_id}/credits/ledger_entry": {
            "post": {
                "tags": [
                    "Credit"
                ],
                "summary": "Create ledger entry by external ID",
                "description": "This endpoint allows you to create a new ledger entry for a specified customer's balance. This can be used to\nincrement balance, deduct credits, and change the expiry date of existing credits.\n\n## Effects of adding a ledger entry\n1. After calling this endpoint, [Fetch Credit Balance](fetch-customer-credits) will return a credit block that\n  represents the changes (i.e. balance changes or transfers).\n2. A ledger entry will be added to the credits ledger for this customer, and therefore returned in the\n  [View Credits Ledger](fetch-customer-credits) response as well as serialized in the response to this request. In\n  the case of deductions without a specified block, multiple ledger entries may be created if the deduction spans\n  credit blocks.\n3. If `invoice_settings` is specified, an invoice will be created that reflects the cost of the credits (based on\n  `amount` and `per_unit_cost_basis`).\n\n## Adding credits\n  Adding credits is done by creating an entry of type `increment`. This requires the caller to specify a number of\n  credits as well as an optional expiry date in `YYYY-MM-DD` format. Orb also recommends specifying a description\n  to assist with auditing. When adding credits, the caller can also specify a cost basis per-credit, to indicate\n  how much in USD a customer paid for a single credit in a block. This can later be used for revenue recognition.\n\nThe following snippet illustrates a sample request body to increment credits which will expire in January of 2022.\n\n```json\n{\n  \"entry_type\": \"increment\",\n  \"amount\": 100,\n  \"expiry_date\": \"2022-12-28\",\n  \"per_unit_cost_basis\": \"0.20\",\n  \"description\": \"Purchased 100 credits\"\n}\n```\n\nNote that by default, Orb will always first increment any _negative_ balance in existing blocks before adding the\nremaining amount to the desired credit block.\n\n### Invoicing for credits\nBy default, Orb manipulates the credit ledger but does not charge for credits. However, if you pass\n`invoice_settings` in the body of this request, Orb will also generate a one-off invoice for the customer for the\ncredits pre-purchase. Note that you _must_ provide the `per_unit_cost_basis`, since the total charges on the\ninvoice are calculated by multiplying the cost basis with the number of credit units added.\n\n## Deducting Credits\nOrb allows you to deduct credits from a customer by creating an entry of type `decrement`. Orb matches the\nalgorithm for automatic deductions for determining which credit blocks to decrement from. In the case that the\ndeduction leads to multiple ledger entries, the response from this endpoint will be the final deduction. Orb also\noptionally allows specifying a description to assist with auditing.\n\nThe following snippet illustrates a sample request body to decrement credits.\n\n```json\n{\n  \"entry_type\": \"decrement\",\n  \"amount\": 20,\n  \"description\": \"Removing excess credits\"\n}\n```\n\n## Changing credits expiry\nIf you'd like to change when existing credits expire, you should create a ledger entry of type `expiration_change`.\nFor this entry, the required parameter `expiry_date` identifies the _originating_ block, and the required parameter\n`target_expiry_date` identifies when the transferred credits should now expire. A new credit block will be created\nwith expiry date `target_expiry_date`, with the same cost basis data as the original credit block, if present.\n\nNote that the balance of the block with the given `expiry_date` must be at least equal to the desired transfer\namount determined by the `amount` parameter.\n\nThe following snippet illustrates a sample request body to extend the expiration date of credits by one year:\n\n```json\n{\n  \"entry_type\": \"expiration_change\",\n  \"amount\": 10,\n  \"expiry_date\": \"2022-12-28\",\n  \"block_id\": \"UiUhFWeLHPrBY4Ad\",\n  \"target_expiry_date\": \"2023-12-28\",\n  \"description\": \"Extending credit validity\"\n}\n```\n\n## Voiding credits\n\nIf you'd like to void a credit block, create a ledger entry of type `void`. For this entry, `block_id` is required\nto identify the block, and `amount` indicates how many credits to void, up to the block's initial balance. Pass\nin a `void_reason` of `refund` if the void is due to a refund.\n\n## Amendment\n\nIf you'd like to undo a decrement on a credit block, create a ledger entry of type `amendment`. For this entry, `block_id`\nis required to identify the block that was originally decremented from, and `amount` indicates how many credits to return\nto the customer, up to the block's initial balance.",
                "operationId": "create-ledger-entry-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddCreditLedgerEntryRequestParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditLedgerEntry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "add-by-external-id"
            }
        },
        "/customers/external_customer_id/{external_customer_id}/usage": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Amend usage by external ID",
                "description": "This endpoint is used to amend usage within a timeframe for a customer that has an active subscription.\n\nThis endpoint will mark _all_ existing events within `[timeframe_start, timeframe_end)` as _ignored_  for billing\npurposes, and Orb will only use the _new_ events passed in the body of this request as the source of truth for that\ntimeframe moving forwards.\nNote that a given time period can be amended any number of times, so events can be overwritten in subsequent calls to th\nis endpoint.\n\nThis is a powerful and audit-safe mechanism to retroactively change usage data in cases where you need to:\n- decrease historical usage consumption because of degraded service availability in your systems\n- account for gaps from your usage reporting mechanism\n- make point-in-time fixes for specific event records, while retaining the original time of usage and associated metadata.\nThis amendment API is designed with two explicit goals:\n1. Amendments are **always audit-safe**. The amendment process\nwill still retain original events in the timeframe, though they will be ignored for billing calculations. For auditing a\nnd data fidelity purposes, Orb never overwrites or permanently deletes ingested usage data.\n2. Amendments always preserve data **consistency**. In other words, either an amendment is fully processed by the system\n(and the new events for the timeframe are honored rather than the existing ones) or the amendment request fails. To maintain\nthis important property, Orb prevents _partial event ingestion_ on this endpoint.\n\n## Response semantics\n- Either all events are ingested successfully, or all fail to ingest (returning a `4xx` or `5xx` response code).\n- Any event that fails schema validation will lead to a `4xx` response. In this case, to maintain data consistency,\nOrb will not ingest any events and will\nalso not deprecate existing events in the time period.\n- You can assume that the amendment is successful on receipt of\na `2xx` response.While a successful response from this endpoint indicates that the new events have been ingested,\nupdating usage totals happens asynchronously and may be delayed by a few minutes.\n\nAs emphasized above, Orb will never show\nan inconsistent state (e.g. in invoice previews or dashboards); either it will show the existing state (before the amendment)\n or the new state (with new events in the requested timeframe).\n\n## Sample request body\n```json\n{\n    \"events\": [{\n        \"event_name\": \"payment_processed\",\n        \"timestamp\": \"2022-03-24T07:15:00Z\",\n        \"properties\": {\n            \"amount\": 100\n        }\n    }, {\n        \"event_name\": \"payment_failed\",\n        \"timestamp\": \"2022-03-24T07:15:00Z\",\n        \"properties\": {\n                \"amount\": 100\n        }\n    }]\n}\n```\n\n## Request Validation\n- The `timestamp` of\neach event reported must fall within the bounds of `timeframe_start` and `timeframe_end`. As with ingestion, all timesta\nmps must be sent in ISO8601 format with UTC timezone offset.\n- Orb **does not accept an `idempotency_key`** with each\nevent in this endpoint, since the entirety of the event list must be ingested to ensure consistency. On retryable errors\n, you should retry the request in its entirety, and assume that the amendment operation has not succeeded until receipt\nof a `2xx`.\n\n- Both `timeframe_start` and `timeframe_end` must be timestamps in the past. Furthermore, Orb will genera\nlly validate that the `timeframe_start` and `timeframe_end` fall within the customer's _current_ subscription billing pe\nriod. However, Orb does allow amendments while in the grace period of the previous billing period; in this instance, the\ntimeframe can start before the current period.\n\n## API Limits\nNote that Orb does not currently enforce a hard rate-\nlimit for API usage or a maximum request payload size. Similar to the event ingestion API, this API is architected for h\nigh-throughput ingestion. It is also safe to _programmatically_ call this endpoint if your system can automatically dete\nct a need for historical amendment.\n\nIn order to overwrite timeframes with a very large number of events, we suggest using multiple calls with small adjacent\n(e.g. every hour) timeframes.",
                "operationId": "amend-usage-external-customer-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "external_customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "title": "Timeframe Start",
                            "description": "This bound is inclusive (i.e. events with this timestamp onward, inclusive will be updated)"
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "title": "Timeframe End",
                            "description": "This bound is exclusive (i.e. events before this timestamp will be updated)"
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AmendedUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "amend-by-external-id"
            }
        },
        "/customers/{customer_id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer",
                "description": "This endpoint is used to fetch customer details given an identifier. If the `Customer` is in the process of being deleted,\nonly the properties `id` and `deleted: true` will be returned.\n\nSee the [Customer resource](../guides/core-concepts.mdx#customer) for a full discussion of the Customer model.",
                "operationId": "fetch-customer",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "customer_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update customer",
                "description": "This endpoint can be used to update the `payment_provider`, `payment_provider_id`, `name`, `email`, `email_delivery`, `tax_id`,\n`auto_collection`, `metadata`, `shipping_address`, `billing_address`, and `additional_emails` of an existing customer.\n\"Other fields on a customer are currently immutable.",
                "operationId": "update-customer",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "customer_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditCustomer"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete customer",
                "description": "This performs a deletion of this customer, its subscriptions, and its invoices.\nThis operation is irreversible. Note that this is a _soft_ deletion, but the data\nwill be inaccessible through the API and Orb dashboard. For hard-deletion, please\nreach out to the Orb team directly.\n\n**Note**: This operation happens asynchronously and can be expected to take a\nfew minutes to propagate to related resources. However, querying for the customer on\nsubsequent GET requests while deletion is in process will reflect its deletion with\na `deleted: true` property. Once the customer deletion has been fully processed,\nthe customer will not be returned in the API.\n\n\nOn successful processing, this returns an empty dictionary (`{}`) in the API.",
                "operationId": "delete-customer",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "customer_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteCustomerResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers/{customer_id}/balance_transactions": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "List balance transactions",
                "description": "## The customer balance\n\nThe customer balance is an amount in the customer's currency, which Orb automatically applies to subsequent\ninvoices. This balance can be adjusted manually via Orb's webapp on the customer details page. You can use this\nbalance to provide a fixed mid-period credit to the customer. Commonly, this is done due to system downtime/SLA\nviolation, or an adhoc adjustment discussed with the customer.\n\nIf the balance is a positive value at the time of invoicing, it represents that the customer has credit that should\nbe used to offset the amount due on the next issued invoice. In this case, Orb will automatically reduce the next\ninvoice by the balance amount, and roll over any remaining balance if the invoice is fully discounted.\n\nIf the balance is a negative value at the time of invoicing, Orb will increase the invoice's amount due with a\npositive adjustment, and reset the balance to 0.\n\nThis endpoint retrieves all customer balance transactions in reverse chronological order for a single customer,\nproviding a complete audit trail of all adjustments and invoice applications.\n\n## Eligibility\n\nThe customer balance can only be applied to invoices or adjusted manually if invoices are not synced to a separate\ninvoicing provider. If a payment gateway such as Stripe is used, the balance will be applied to the invoice before\nforwarding payment to the gateway.",
                "operationId": "list-balance-transactions",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Operation Time[Gte]"
                        },
                        "name": "operation_time[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Operation Time[Gt]"
                        },
                        "name": "operation_time[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Operation Time[Lt]"
                        },
                        "name": "operation_time[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Operation Time[Lte]"
                        },
                        "name": "operation_time[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBalanceTransactions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "list-balance-transactions",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create customer balance transaction",
                "description": "Creates an immutable balance transaction that updates the customer's balance and returns back the newly created\ntransaction.",
                "operationId": "create-customer-balance-transaction",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "customer_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCustomerBalanceTransaction"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBalanceTransaction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "create-balance-transaction"
            }
        },
        "/customers/{customer_id}/costs": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer costs",
                "description": "This endpoint is used to fetch a day-by-day snapshot of a customer's costs in Orb, calculated by applying pricing\ninformation to the underlying usage (see the [subscription usage endpoint](fetch-subscription-usage.api.mdx) to\nfetch usage per metric, in usage units rather than a currency).\n\nThis endpoint can be leveraged for internal tooling and to provide a more transparent billing experience for your\nend users:\n\n1. Understand the cost breakdown per line item historically and in real-time for the current billing period.\n2. Provide customer visibility into how different services are contributing to the overall invoice with a per-day\n  timeseries (as compared to the [upcoming invoice](fetch-upcoming-invoice) resource, which represents a snapshot\n  for the current period).\n3. Assess how minimums and discounts affect your customers by teasing apart costs directly as a result of usage,\n  as opposed to minimums and discounts at the plan and price level.\n4. Gain insight into key customer health metrics, such as the percent utilization of the minimum committed spend.\n\n## Fetching subscriptions\nBy default, this endpoint fetches the currently active subscription for the customer, and returns cost information\nfor the subscription's current billing period, broken down by each participating price. If there are no currently\nactive subscriptions, this will instead default to the most recently active subscription or return an empty series\nif none are found. For example, if your plan charges for compute hours, job runs, and data syncs, then this endpoint\nwould provide a daily breakdown of your customer's cost for each of those axes.\n\nIf timeframe bounds are specified, Orb fetches all subscriptions that were active in that timeframe. If two\nsubscriptions overlap on a single day, costs from each price will be summed, and prices for both subscriptions will\nbe included in the breakdown.\n\n## Prepaid plans\nFor plans that include prices which deduct credits rather than accrue in-arrears charges in a billable currency,\nthis endpoint will return the total deduction amount, in credits, for the specified timeframe.\n\n## Cumulative subtotals and totals\nSince the subtotal and total must factor in any billing-period level discounts and minimums, it's most meaningful\nto consider costs relative to the start of the subscription's billing period. As a result, by default this endpoint\nreturns cumulative totals since the beginning of the billing period. In particular, the `timeframe_start` of a\nreturned timeframe window is *always* the beginning of the billing period and `timeframe_end` is incremented one day\nat a time to build the result.\n\nA customer that uses a few API calls a day but has a minimum commitment might exhibit the following pattern for\ntheir subtotal and total in the first few days of the month. Here, we assume that each API call is $2.50, the\ncustomer's plan has a monthly minimum of $50 for this price, and that the subscription's billing period bounds are\naligned to the first of the month:\n\n| timeframe_start | timeframe_end | Cumulative usage | Subtotal | Total (incl. commitment)  |\n| -----------| ----------- | ----------- | ----------- |----------- |\n| 2023-02-01 | 2023-02-02 | 9 | $22.50 | $50.00 |\n| 2023-02-01 | 2023-02-03 | 19 | $47.50 | $50.00 |\n| 2023-02-01 | 2023-02-04 | 20 | $50.00 | $50.00 |\n| 2023-02-01 | 2023-02-05 | 28 | $70.00 | $70.00 |\n| 2023-02-01 | 2023-02-06 | 36 | $90.00 | $90.00 |\n\n### Periodic values\nWhen the query parameter `view_mode=periodic` is specified, Orb will return an incremental day-by-day view of costs.\nIn this case, there will always be a one-day difference between `timeframe_start` and `timeframe_end` for the\ntimeframes returned. This is a transform on top of the cumulative costs, calculated by taking the difference of each\ntimeframe with the last. Note that in the above example, the `Total` value would be 0 for the second two data\npoints, since the minimum commitment has not yet been hit and each day is not contributing anything to the total\ncost.\n\n## Timeframe bounds\nIf no timeframe bounds are specified, the response will default to the current billing period for the customer's\nsubscription. For subscriptions that have ended, this will be the billing period when they were last active. If the\nsubscription starts or ends within the timeframe, the response will only include windows where the subscription is\nactive.\n\nAs noted above, `timeframe_start` for a given cumulative datapoint is always the beginning of the billing period,\nand `timeframe_end` is incremented one day at a time to construct the response. When a timeframe is passed in that\nis not aligned to the current subscription's billing period, the response will contain cumulative totals from\nmultiple billing periods.\n\nSuppose the queried customer has a subscription aligned to the 15th of every month. If this endpoint is queried with\nthe date range `2023-06-01` - `2023-07-01`, the first data point will represent about half a billing period's worth\nof costs, accounting for accruals from the start of the billing period and inclusive of the first day of the\ntimeframe (`timeframe_start = 2023-05-15 00:00:00`, `timeframe_end = 2023-06-02 00:00:00`)\n\n| datapoint index | timeframe_start | timeframe_end |\n| ----------- | -----------| ----------- |\n| 0 | 2023-05-15 | 2023-06-02 |\n| 1 | 2023-05-15 | 2023-06-03 |\n| 2 | ... | ... |\n| 3 | 2023-05-15 | 2023-06-14 |\n| 4 | 2023-06-15 | 2023-06-16 |\n| 5 | 2023-06-15 | 2023-06-17 |\n| 6 | ... | ... |\n| 7 | 2023-06-15 | 2023-07-01 |\n\nYou can see this sliced timeframe visualized [here](https://i.imgur.com/TXhYgme.png).\n\n## Grouping by custom attributes\nIn order to view costs grouped by a specific _attribute_ that each event is tagged with (i.e. `cluster`), you can\nadditionally specify a `group_by` key. The `group_by` key denotes the event property on which to group.\n\nWhen returning grouped costs, a separate `price_group` object in the `per_price_costs` array is returned for each\nvalue of the `group_by` key present in your events. The `subtotal` value of the `per_price_costs` object is the sum\nof each `price_group`'s total.\n\nOrb expects events will contain values in the `properties` dictionary that correspond to the `group_by` key\nspecified. By default, Orb will return a `null` group (i.e. events that match the metric but do not have the key\nset). Currently, it is only possible to view costs grouped by a single attribute at a time.\n\n### Matrix prices\nWhen a price uses matrix pricing, it's important to view costs grouped by those matrix dimensions. Orb will return\n`price_groups` with the `grouping_key` and `secondary_grouping_key` based on the matrix price definition, for each\n`grouping_value` and `secondary_grouping_value` available.",
                "operationId": "fetch-customer-costs",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe Start",
                            "description": "Costs returned are inclusive of `timeframe_start`.",
                            "examples": [
                                "2022-02-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe End",
                            "description": "Costs returned are exclusive of `timeframe_end`.",
                            "examples": [
                                "2022-03-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "periodic",
                                        "cumulative"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "View Mode",
                            "description": "Controls whether Orb returns cumulative costs since the start of the billing period, or incremental day-by-day costs. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior."
                        },
                        "name": "view_mode",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Group By",
                            "description": "Groups per-price costs by the key provided."
                        },
                        "name": "group_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCosts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-costs"
            }
        },
        "/customers/{customer_id}/credits": {
            "get": {
                "tags": [
                    "Credit"
                ],
                "summary": "Fetch customer credit balance",
                "description": "Returns a paginated list of unexpired, non-zero credit blocks for a customer.",
                "operationId": "fetch-customer-credits",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCreditBalances"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-balance",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/customers/{customer_id}/credits/ledger": {
            "get": {
                "tags": [
                    "Credit"
                ],
                "summary": "Fetch customer credits ledger",
                "description": "The credits ledger provides _auditing_ functionality over Orb's credits system with a list of actions that have\ntaken place to modify a customer's credit balance. This [paginated endpoint](../reference/pagination) lists these\nentries, starting from the most recent ledger entry.\n\nMore details on using Orb's real-time credit feature are [here](../guides/product-catalog/prepurchase.md).\n\nThere are four major types of modifications to credit balance, detailed below.\n\n## Increment\nCredits (which optionally expire on a future date) can be added via the API\n([Add Ledger Entry](create-ledger-entry)). The ledger entry for such an action will always contain the total\neligible starting and ending balance for the customer at the time the entry was added to the ledger.\n\n## Decrement\nDeductions can occur as a result of an API call to create a ledger entry (see\n[Add Ledger Entry](create-ledger-entry)), or automatically as a result of incurring usage. Both ledger entries\npresent the `decrement` entry type.\n\nAs usage for a customer is reported into Orb, credits may be deducted according to the customer's plan\nconfiguration. An automated deduction of this type will result in a ledger entry, also with a starting and ending\nbalance. In order to provide better tracing capabilities for automatic deductions, Orb always associates each\nautomatic deduction with the `event_id` at the time of ingestion, used to pinpoint _why_ credit deduction took\nplace and to ensure that credits are never deducted without an associated usage event.\n\nBy default, Orb uses an algorithm that automatically deducts from the *soonest expiring credit block* first in\norder to ensure that all credits are utilized appropriately. As an example, if trial credits with an expiration date\nof 2 weeks from now are present for a customer, they will be used before any deductions take place from a\nnon-expiring credit block.\n\nIf there are multiple blocks with the same expiration date, Orb will deduct from the block with the\n*lower cost basis* first (ex. trial credits with a $0 cost basis before paid credits with a $5.00 cost basis).\n\nIt's also possible for a single usage event's deduction to _span_ credit blocks. In this case, Orb will deduct from\nthe next block, ending at the credit block which consists of unexpiring credits. Each of these deductions will lead\nto a _separate_ ledger entry, one per credit block that is deducted from. By default, the customer's total credit\nbalance in Orb can be negative as a result of a decrement.\n\n## Expiration change\nThe expiry of credits can be changed as a result of the API (See [Add Ledger Entry](create-ledger-entry)). This will\ncreate a ledger entry that specifies the balance as well as the initial and target expiry dates.\n\nNote that for this entry type, `starting_balance` will equal `ending_balance`, and the `amount` represents the\nbalance transferred. The credit block linked to the ledger entry is the source credit block from which there was an\nexpiration change\n\n## Credits expiry\nWhen a set of credits expire on pre-set expiration date, the customer's balance automatically reflects this change\nand adds an entry to the ledger indicating this event. Note that credit expiry should always happen close to a date\nboundary in the customer's timezone.\n\n## Void initiated\nCredit blocks can be voided via the API. The `amount` on this entry corresponds to the number of credits that were\nremaining in the block at time of void. `void_reason` will be populated if the void is created with a reason.\n\n## Void\nWhen a set of credits is voided, the customer's balance automatically reflects this change and adds an entry to the\nledger indicating this event.\n\n## Amendment\nWhen credits are added to a customer's balance as a result of a correction, this entry will be added to the ledger\nto indicate the adjustment of credits.",
                "operationId": "fetch-customer-credits-ledger",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Currency"
                        },
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Minimum Amount"
                        },
                        "name": "minimum_amount",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "increment",
                                        "decrement",
                                        "expiration_change",
                                        "credit_block_expiry",
                                        "void",
                                        "void_initiated",
                                        "amendment"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Entry Type"
                        },
                        "name": "entry_type",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "committed",
                                        "pending"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Entry Status"
                        },
                        "name": "entry_status",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditLedgerEntries"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-ledger"
            }
        },
        "/customers/{customer_id}/credits/ledger_entry": {
            "post": {
                "tags": [
                    "Credit"
                ],
                "summary": "Create ledger entry",
                "description": "This endpoint allows you to create a new ledger entry for a specified customer's balance. This can be used to\nincrement balance, deduct credits, and change the expiry date of existing credits.\n\n## Effects of adding a ledger entry\n1. After calling this endpoint, [Fetch Credit Balance](fetch-customer-credits) will return a credit block that\n  represents the changes (i.e. balance changes or transfers).\n2. A ledger entry will be added to the credits ledger for this customer, and therefore returned in the\n  [View Credits Ledger](fetch-customer-credits) response as well as serialized in the response to this request. In\n  the case of deductions without a specified block, multiple ledger entries may be created if the deduction spans\n  credit blocks.\n3. If `invoice_settings` is specified, an invoice will be created that reflects the cost of the credits (based on\n  `amount` and `per_unit_cost_basis`).\n\n## Adding credits\n  Adding credits is done by creating an entry of type `increment`. This requires the caller to specify a number of\n  credits as well as an optional expiry date in `YYYY-MM-DD` format. Orb also recommends specifying a description\n  to assist with auditing. When adding credits, the caller can also specify a cost basis per-credit, to indicate\n  how much in USD a customer paid for a single credit in a block. This can later be used for revenue recognition.\n\nThe following snippet illustrates a sample request body to increment credits which will expire in January of 2022.\n\n```json\n{\n  \"entry_type\": \"increment\",\n  \"amount\": 100,\n  \"expiry_date\": \"2022-12-28\",\n  \"per_unit_cost_basis\": \"0.20\",\n  \"description\": \"Purchased 100 credits\"\n}\n```\n\nNote that by default, Orb will always first increment any _negative_ balance in existing blocks before adding the\nremaining amount to the desired credit block.\n\n### Invoicing for credits\nBy default, Orb manipulates the credit ledger but does not charge for credits. However, if you pass\n`invoice_settings` in the body of this request, Orb will also generate a one-off invoice for the customer for the\ncredits pre-purchase. Note that you _must_ provide the `per_unit_cost_basis`, since the total charges on the\ninvoice are calculated by multiplying the cost basis with the number of credit units added.\n\n## Deducting Credits\nOrb allows you to deduct credits from a customer by creating an entry of type `decrement`. Orb matches the\nalgorithm for automatic deductions for determining which credit blocks to decrement from. In the case that the\ndeduction leads to multiple ledger entries, the response from this endpoint will be the final deduction. Orb also\noptionally allows specifying a description to assist with auditing.\n\nThe following snippet illustrates a sample request body to decrement credits.\n\n```json\n{\n  \"entry_type\": \"decrement\",\n  \"amount\": 20,\n  \"description\": \"Removing excess credits\"\n}\n```\n\n## Changing credits expiry\nIf you'd like to change when existing credits expire, you should create a ledger entry of type `expiration_change`.\nFor this entry, the required parameter `expiry_date` identifies the _originating_ block, and the required parameter\n`target_expiry_date` identifies when the transferred credits should now expire. A new credit block will be created\nwith expiry date `target_expiry_date`, with the same cost basis data as the original credit block, if present.\n\nNote that the balance of the block with the given `expiry_date` must be at least equal to the desired transfer\namount determined by the `amount` parameter.\n\nThe following snippet illustrates a sample request body to extend the expiration date of credits by one year:\n\n```json\n{\n  \"entry_type\": \"expiration_change\",\n  \"amount\": 10,\n  \"expiry_date\": \"2022-12-28\",\n  \"block_id\": \"UiUhFWeLHPrBY4Ad\",\n  \"target_expiry_date\": \"2023-12-28\",\n  \"description\": \"Extending credit validity\"\n}\n```\n\n## Voiding credits\n\nIf you'd like to void a credit block, create a ledger entry of type `void`. For this entry, `block_id` is required\nto identify the block, and `amount` indicates how many credits to void, up to the block's initial balance. Pass\nin a `void_reason` of `refund` if the void is due to a refund.\n\n## Amendment\n\nIf you'd like to undo a decrement on a credit block, create a ledger entry of type `amendment`. For this entry, `block_id`\nis required to identify the block that was originally decremented from, and `amount` indicates how many credits to return\nto the customer, up to the block's initial balance.",
                "operationId": "create-ledger-entry",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "customer_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddCreditLedgerEntryRequestParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditLedgerEntry"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers/{customer_id}/usage": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Amend usage",
                "description": "This endpoint is used to amend usage within a timeframe for a customer that has an active subscription.\n\nThis endpoint will mark _all_ existing events within `[timeframe_start, timeframe_end)` as _ignored_  for billing\npurposes, and Orb will only use the _new_ events passed in the body of this request as the source of truth for that\ntimeframe moving forwards.\nNote that a given time period can be amended any number of times, so events can be overwritten in subsequent calls to th\nis endpoint.\n\nThis is a powerful and audit-safe mechanism to retroactively change usage data in cases where you need to:\n- decrease historical usage consumption because of degraded service availability in your systems\n- account for gaps from your usage reporting mechanism\n- make point-in-time fixes for specific event records, while retaining the original time of usage and associated metadata.\nThis amendment API is designed with two explicit goals:\n1. Amendments are **always audit-safe**. The amendment process\nwill still retain original events in the timeframe, though they will be ignored for billing calculations. For auditing a\nnd data fidelity purposes, Orb never overwrites or permanently deletes ingested usage data.\n2. Amendments always preserve data **consistency**. In other words, either an amendment is fully processed by the system\n(and the new events for the timeframe are honored rather than the existing ones) or the amendment request fails. To maintain\nthis important property, Orb prevents _partial event ingestion_ on this endpoint.\n\n## Response semantics\n- Either all events are ingested successfully, or all fail to ingest (returning a `4xx` or `5xx` response code).\n- Any event that fails schema validation will lead to a `4xx` response. In this case, to maintain data consistency,\nOrb will not ingest any events and will\nalso not deprecate existing events in the time period.\n- You can assume that the amendment is successful on receipt of\na `2xx` response.While a successful response from this endpoint indicates that the new events have been ingested,\nupdating usage totals happens asynchronously and may be delayed by a few minutes.\n\nAs emphasized above, Orb will never show\nan inconsistent state (e.g. in invoice previews or dashboards); either it will show the existing state (before the amendment)\n or the new state (with new events in the requested timeframe).\n\n## Sample request body\n```json\n{\n    \"events\": [{\n        \"event_name\": \"payment_processed\",\n        \"timestamp\": \"2022-03-24T07:15:00Z\",\n        \"properties\": {\n            \"amount\": 100\n        }\n    }, {\n        \"event_name\": \"payment_failed\",\n        \"timestamp\": \"2022-03-24T07:15:00Z\",\n        \"properties\": {\n                \"amount\": 100\n        }\n    }]\n}\n```\n\n## Request Validation\n- The `timestamp` of\neach event reported must fall within the bounds of `timeframe_start` and `timeframe_end`. As with ingestion, all timesta\nmps must be sent in ISO8601 format with UTC timezone offset.\n- Orb **does not accept an `idempotency_key`** with each\nevent in this endpoint, since the entirety of the event list must be ingested to ensure consistency. On retryable errors\n, you should retry the request in its entirety, and assume that the amendment operation has not succeeded until receipt\nof a `2xx`.\n\n- Both `timeframe_start` and `timeframe_end` must be timestamps in the past. Furthermore, Orb will genera\nlly validate that the `timeframe_start` and `timeframe_end` fall within the customer's _current_ subscription billing pe\nriod. However, Orb does allow amendments while in the grace period of the previous billing period; in this instance, the\ntimeframe can start before the current period.\n\n## API Limits\nNote that Orb does not currently enforce a hard rate-\nlimit for API usage or a maximum request payload size. Similar to the event ingestion API, this API is architected for h\nigh-throughput ingestion. It is also safe to _programmatically_ call this endpoint if your system can automatically dete\nct a need for historical amendment.\n\nIn order to overwrite timeframes with a very large number of events, we suggest using multiple calls with small adjacent\n(e.g. every hour) timeframes.",
                "operationId": "amend-usage",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "name": "customer_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "title": "Timeframe Start",
                            "description": "This bound is inclusive (i.e. events with this timestamp onward, inclusive will be updated)"
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "title": "Timeframe End",
                            "description": "This bound is exclusive (i.e. events before this timestamp will be updated)"
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AmendedUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/backfills": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "List backfills",
                "description": "This endpoint returns a list of all backfills in a list format.\n\nThe list of backfills is ordered starting from the most recently created backfill. The response also includes\n[`pagination_metadata`](../reference/pagination), which lets the caller retrieve the next page of results if they\nexist. More information about pagination can be found in the [Pagination-metadata schema](pagination).",
                "operationId": "list-backfills",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Backfills"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "list-backfills",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Create backfill",
                "description": "Creating the backfill enables adding or replacing past events, even those that are older than the ingestion grace\nperiod. Performing a backfill in Orb involves 3 steps:\n\n1. Create the backfill, specifying its parameters.\n2. [Ingest](ingest) usage events, referencing the backfill (query parameter `backfill_id`).\n3. [Close](close-backfill) the\nbackfill, propagating the update in past usage throughout Orb.\n\nChanges from a backfill are not reflected until the\nbackfill is closed, so you won\u2019t need to worry about your customers seeing partially updated usage data. Backfills are\nalso reversible, so you\u2019ll be able to revert a backfill if you\u2019ve made a mistake.\n\nThis endpoint will return a\nbackfill object, which contains an `id`. That `id` can then be used as the `backfill_id` query parameter to the event\ningestion endpoint to associate ingested events with this backfill. The effects (e.g. updated usage graphs) of this\nbackfill will not take place until the backfill is closed.\n\nIf the `replace_existing_events` is `true`, existing\nevents in the backfill's timeframe will be replaced with the newly ingested events associated with the backfill. If\n`false`, newly ingested events will be added to the existing events.",
                "operationId": "create-backfill",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewBackfill"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Backfill"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/backfills/{backfill_id}": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "Fetch backfill",
                "description": "This endpoint is used to fetch a backfill given an identifier.",
                "operationId": "fetch-backfill",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "backfill_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Backfill"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/backfills/{backfill_id}/close": {
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Close backfill",
                "description": "Closing a backfill makes the updated usage visible in Orb. Upon closing a backfill, Orb will asynchronously reflect\nthe updated usage in invoice amounts and usage graphs. Once all of the updates are complete, the backfill's status\nwill transition to `reflected`.",
                "operationId": "close-backfill",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "backfill_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Backfill"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/backfills/{backfill_id}/revert": {
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Revert backfill",
                "description": "Reverting a backfill undoes all the effects of closing the backfill. If the backfill is reflected, the status will\ntransition to `pending_revert` while the effects of the backfill are undone. Once all effects are undone, the\nbackfill will transition to `reverted`.\n\nIf a backfill is reverted before its closed, no usage will be updated as a result of the backfill and it will\nimmediately transition to `reverted`.",
                "operationId": "revert-backfill",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "backfill_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Backfill"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/search": {
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Search events",
                "description": "This endpoint returns a filtered set of events for an account in a [paginated list format](../reference/pagination).\n\nNote that this is a `POST` endpoint rather than a `GET` endpoint because it employs a JSON body for search criteria\nrather than query parameters, allowing for a more flexible search syntax.\n\nNote that a search criteria _must_ be specified. Currently, Orb supports the following criteria:\n- `event_ids`: This is an explicit array of IDs to filter by. Note that an event's ID is the `idempotency_key` that\n  was originally used for ingestion.\n- `invoice_id`: This is an issued Orb invoice ID (see also [List Invoices](list-invoices)). Orb will fetch all\n  events that were used to calculate the invoice. In the common case, this will be a list of events whose\n  `timestamp` property falls within the billing period specified by the invoice.\n\nBy default, Orb does not return _deprecated_ events in this endpoint.\n\nBy default, Orb will not throw a `404` if no events matched, Orb will return an empty array for `data` instead.",
                "operationId": "search-events",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timestamp[Gte]"
                        },
                        "name": "timestamp[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timestamp[Gt]"
                        },
                        "name": "timestamp[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timestamp[Lt]"
                        },
                        "name": "timestamp[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timestamp[Lte]"
                        },
                        "name": "timestamp[lte]",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventSearchCriteria"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Events"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/events/{event_id}": {
            "put": {
                "tags": [
                    "Event"
                ],
                "summary": "Amend event",
                "description": "This endpoint is used to amend a single usage event with a given `event_id`. `event_id` refers to the\n`idempotency_key` passed in during ingestion. The event will maintain its existing `event_id` after the amendment.\n\nThis endpoint will mark the existing event as ignored, and Orb will only use the new event passed in the body of\nthis request as the source of truth for that `event_id`. Note that a single event can be amended any number of\ntimes, so the same event can be overwritten in subsequent calls to this endpoint, or overwritten using the\n[Amend customer usage](amend-usage) endpoint. Only a single event with a given `event_id` will be considered the\nsource of truth at any given time.\n\nThis is a powerful and audit-safe mechanism to retroactively update a single event in cases where you need to:\n* update an event with new metadata as you iterate on your pricing model\n* update an event based on the result of an external API call (ex. call to a payment gateway succeeded or failed)\n\nThis amendment API is always audit-safe. The process will still retain the original event, though it will be\nignored for billing calculations. For auditing and data fidelity purposes, Orb never overwrites or permanently\ndeletes ingested usage data.\n\n## Request validation\n* The `timestamp` of the new event must match the `timestamp` of the existing event already ingested. As with\n  ingestion, all timestamps must be sent in ISO8601 format with UTC timezone offset.\n* The `customer_id` or `external_customer_id` of the new event must match the `customer_id` or\n  `external_customer_id` of the existing event already ingested. Exactly one of `customer_id` and\n  `external_customer_id` should be specified, and similar to ingestion, the ID must identify a Customer resource\n  within Orb. Unlike ingestion, for event amendment, we strictly enforce that the Customer must be in the Orb\n  system, even during the initial integration period. We do not allow updating the `Customer` an event is\n  associated with.\n* Orb does not accept an `idempotency_key` with the event in this endpoint, since this request is by design\n  idempotent. On retryable errors, you should retry the request and assume the amendment operation has not\n  succeeded until receipt of a 2xx.\n* The event's `timestamp` must fall within the customer's current subscription's billing period, or within the\n  grace period of the customer's current subscription's previous billing period.",
                "operationId": "amend-event",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "event_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AmendedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AmendEventResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{event_id}/deprecate": {
            "put": {
                "tags": [
                    "Event"
                ],
                "summary": "Deprecate event",
                "description": "This endpoint is used to deprecate a single usage event with a given `event_id`. `event_id` refers to the\n`idempotency_key` passed in during ingestion.\n\nThis endpoint will mark the existing event as ignored. Note that if you attempt to re-ingest an event with the same\n`event_id` as a deprecated event, Orb will return an error.\n\nThis is a powerful and audit-safe mechanism to retroactively deprecate a single event in cases where you need to:\n* no longer bill for an event that was improperly reported\n* no longer bill for an event based on the result of an external API call (ex. call to a payment gateway failed and\n  the user should not be billed)\n\nIf you want to only change specific properties of an event, but keep the event as part of the billing calculation,\nuse the [Amend single event](amend-event) endpoint instead.\n\nThis API is always audit-safe. The process will still retain the deprecated event, though it will be ignored for\nbilling calculations. For auditing and data fidelity purposes, Orb never overwrites or permanently deletes ingested\nusage data.\n\n## Request validation\n* Orb does not accept an `idempotency_key` with the event in this endpoint, since this request is by design\n  idempotent. On retryable errors, you should retry the request and assume the deprecation operation has not\n  succeeded until receipt of a 2xx.\n* The event's `timestamp` must fall within the customer's current subscription's billing period, or within the\n  grace period of the customer's current subscription's previous billing period. Orb does not allow deprecating\n  events for billing periods that have already invoiced customers.\n* The `customer_id` or the `external_customer_id` of the original event ingestion request must identify a Customer\n  resource within Orb, even if this event was ingested during the initial integration period. We do not allow\n  deprecating events for customers not in the Orb system.",
                "operationId": "deprecate-event",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "event_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeprecatedEventResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ingest": {
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "Ingest events",
                "description": "Orb's event ingestion model and API is designed around two core principles:\n\n1. **Data fidelity**: The accuracy of your billing model depends on a robust foundation of events. Orb's API protocol\nencourages usage patterns that ensure that your data is consistently complete and correct.\n2. **Fast integration**: Sending events into Orb requires no tedious setup steps or explicit field schema for your event\nshape, making it instant to start streaming in usage in real-time.\n\n\n## Event shape\n\nEvents are the starting point for all usage calculations in the system, and are simple at their core:\n\n```json\n{\n// customer_id and external_customer_id are used to\n// attribute usage to a given Customer. Exactly one of these\n// should be specified in a given ingestion event.\n\n// `customer_id` is the Orb generated identifier for the Customer,\n// which is returned from the Create customer API call.\ncustomer_id: string,\n\n// external_customer_id is an alternate identifier which is associated\n// with a Customer at creation time. This is treated as an alias for\n// customer_id, and is usually set to an identifier native to your system.\nexternal_customer_id: string,\n\n// A string name identifying the event, usually a usage\n// action. By convention, this should not contain any whitespace.\nevent_name: string,\n\n// An ISO 8601 format date with no timezone offset.\n// This should represent the time that usage occurred\n// and is important to attribute usage to a given\n// billing period. See the notes below on determining the timestamp.\n// e.g. 2020-12-09T16:09:53Z\ntimestamp: string,\n\n// A unique value, generated by the client, that is\n// used to de-duplicate events.\n// Exactly one event with a given\n// idempotency key will be ingested, which allows for\n// safe request retries.\nidempotency_key: string\n\n// Optional custom metadata to attach to the event.\n// This might include a numeric value used for aggregation,\n// or a string/boolean value used for filtering.\n// The schema of this dictionary need not be pre-declared, and\n// properties can be added at any time.\nproperties: {\n[key: string]?: string | number | boolean,\n},\n}\n```\n\n## Required fields\nBecause events streamed to Orb are meant to be as flexible as possible, there are only a few required fields in every\nevent.\n\n- We recommend that `idempotency_key` are unique strings that you generated with V4 UUIDs, but only require that they\nuniquely identify an event (i.e. don\u2019t collide).\n- The `timestamp` field in the event body will be used to determine which billable period a given event falls into. For\nexample, with a monthly billing cycle starting from the first of December, Orb will calculate metrics based on events\nthat fall into the range `12-01 00:00:00 <= timestamp < 01-01 00:00:00`.\n\n## Logging metadata\n\nOrb allows tagging events with metadata using a flexible properties dictionary. Since Orb does not enforce a rigid\nschema for this field-set, key-value pairs can be added dynamically as your events evolve.\n\nThis dictionary can be helpful for a wide variety of use cases:\n\n- Numeric properties on events like `compute_time_ms` can later be inputs to our flexible query engine to determine\nusage.\n- Logging a region or cluster with each event can help you provide customers more granular visibility into their usage.\n\nWe encourage logging this metadata with an eye towards future use cases to ensure full coverage for historical data. The\ndatatype of the value in the properties dictionary is important for metric creation from an event source. Values that\nyou wish to numerically aggregate should be of numeric type in the event.\n\n\n## Determining event timestamp\nFor cases where usage is being reported in real time as it is occurring, timestamp should correspond to the time that\nusage occurred.\n\nIn cases where usage is reported in aggregate for a historical timeframe at a regular interval, we recommend setting the\nevent `timestamp` to the midpoint of the interval. As an example, if you have an hourly reporter that sends data once an\nhour for the previous hour of usage, setting the `timestamp` to the half-hour mark will ensure that the usage is counted\nwithin the correct period.\n\nNote that other time-related fields (e.g. time elapsed) can be added to the properties dictionary as necessary.\n\nIn cases where usage is reported in aggregate for a historical timeframe, the timestamp must be within the grace period\nset for your account. Events with `timestamp < current_time - grace_period` will not be accepted as a valid event, and\nwill throw validation errors. Enforcing the grace period enables Orb to accurately map usage to the correct billing\ncycle and ensure that all usage is billed for in the corresponding billing period.\n\n## Event validation\n\nOrb\u2019s validation ensures that you recognize errors in your events as quickly as possible, and the API provides\ninformative error messages to help you fix problems quickly.\n\nWe validate the following:\n\n- Exactly one of `customer_id` and `external_customer_id` should be specified.\n- If specified, `customer_id` must identify a Customer resource within Orb. We do not support sending events for\ncustomers that have not been provisioned. Similarly, if specified, `external_customer_id` must be an identifier that is\nassociated with an Orb Customer resource. Note: During our initial integration period, this enforcement will be\ntemporarily turned into a warning to ensure smooth customer migration.\n- `timestamp` must conform to ISO 8601 and represent a timestamp at most 1 hour in the future. This timestamp should be\nsent in UTC timezone (no timezone offset).\n\n## Idempotency and retry semantics\n\nOrb's idempotency guarantees allow you to implement safe retry logic in the event of network or machine failures,\nensuring data fidelity. Each event in the request payload is associated with an idempotency key, and Orb guarantees that\na single idempotency key will be successfully ingested at most once.\n\n- Successful responses return a 200 HTTP status code. The response contains information about previously processed\nevents.\n- Requests that return a `4xx` HTTP status code indicate a payload error and contain at least one event with a\nvalidation failure. An event with a validation failure can be re-sent to the ingestion endpoint (after the payload is\nfixed) with the original idempotency key since that key is not marked as processed.\n- Requests that return a `5xx` HTTP status code indicate a server-side failure. These requests should be retried in\ntheir entirety.\n\n\n## API usage and limits\nThe ingestion API is designed made for real-time streaming ingestion and architected for high throughput. Even if events\nare later deemed unnecessary or filtered out, we encourage you to log them to Orb if they may be relevant to billing\ncalculations in the future.\n\nTo take advantage of the real-time features of the Orb platform and avoid any chance of dropped events by producers, we\nrecommend reporting events to Orb frequently. Optionally, events can also be briefly aggregated at the source, as this\nAPI accepts an array of event bodies.\n\nOrb does not currently enforce a hard rate-limit for API usage or a maximum request payload size, but please give us a\nheads up if you\u2019re changing either of these factors by an order of magnitude from initial setup.\n\n## Testing in debug mode\nThe ingestion API supports a debug mode, which returns additional verbose output to indicate which event idempotency\nkeys were newly ingested or duplicates from previous requests. To enable this mode, mark `debug=true` as a query\nparameter.\n\nIf `debug=true` is not specified, the response will only contain `validation_failed`. Orb will still honor the\nidempotency guarantees set [here](../guides/events-and-metrics/event-ingestion#event-volume-and-concurrency) in all\ncases.\n\nWe strongly recommend that you only use debug mode as part of testing your initial Orb integration. Once you're ready to\nswitch to production, disable debug mode to take advantage of improved performance and maximal throughput.\n\n#### Example: ingestion response with `debug=true`\n\n```json\n{\n\"debug\": {\n\"duplicate\": [],\n\"ingested\": [\n\"B7E83HDMfJPAunXW\",\n\"SJs5DQJ3TnwSqEZE\",\n\"8SivfDsNKwCeAXim\"\n]\n},\n\"validation_failed\": []\n}\n```\n\n#### Example: ingestion response with `debug=false`\n\n```json\n{\n\"validation_failed\": []\n}\n```",
                "operationId": "ingest",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "boolean",
                            "title": "Debug",
                            "description": "Flag to enable additional debug information in the endpoint response",
                            "default": false
                        },
                        "name": "debug",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Backfill Id",
                            "description": "If this ingestion request is part of a backfill, this parameter ties the ingested events to the backfill"
                        },
                        "name": "backfill_id",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IngestionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoice_line_items": {
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Create invoice line item",
                "description": "This creates a one-off fixed fee invoice line item on an Invoice.\nThis can only be done for invoices that are in a `draft` status.",
                "operationId": "create-invoice-line-item",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInvoiceLineItemParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceLineItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "create-line-item"
            }
        },
        "/invoices": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "List invoices",
                "description": "This endpoint returns a list of all [`Invoice`](../guides/concepts#invoice)s for an account in a list format.\n\nThe list of invoices is ordered starting from the most recently issued invoice date. The response also includes\n[`pagination_metadata`](../reference/pagination), which lets the caller retrieve the next page of results if they\nexist.\n\nBy default, this only returns invoices that are `issued`, `paid`, or `synced`.",
                "operationId": "list-invoices",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Customer Id"
                        },
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "External Customer Id"
                        },
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Subscription Id"
                        },
                        "name": "subscription_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "draft",
                                        "issued",
                                        "paid",
                                        "synced",
                                        "void"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Status"
                        },
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "draft",
                                            "issued",
                                            "paid",
                                            "synced",
                                            "void"
                                        ]
                                    },
                                    "type": "array"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Status[]"
                        },
                        "name": "status[]",
                        "in": "query",
                        "x-speakeasy-name-override": "statuses"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Due Date Window"
                        },
                        "name": "due_date_window",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "due_date",
                                        "invoice_date"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Date Type",
                            "default": "invoice_date"
                        },
                        "name": "date_type",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Due Date"
                        },
                        "name": "due_date",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Due Date[Gt]"
                        },
                        "name": "due_date[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Due Date[Lt]"
                        },
                        "name": "due_date[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Amount"
                        },
                        "name": "amount",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Amount[Gt]"
                        },
                        "name": "amount[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Amount[Lt]"
                        },
                        "name": "amount[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Is Recurring"
                        },
                        "name": "is_recurring",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Invoice Date[Gte]"
                        },
                        "name": "invoice_date[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Invoice Date[Gt]"
                        },
                        "name": "invoice_date[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Invoice Date[Lt]"
                        },
                        "name": "invoice_date[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Invoice Date[Lte]"
                        },
                        "name": "invoice_date[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoices"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Create a one-off invoice",
                "description": "This endpoint is used to create a one-off invoice for a customer.",
                "operationId": "create-invoice",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOneOffInvoiceParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/upcoming": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Fetch upcoming invoice",
                "description": "This endpoint can be used to fetch the upcoming [invoice](../guides/concepts#invoice) for the current billing\nperiod given a subscription.",
                "operationId": "fetch-upcoming-invoice",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "title": "Subscription Id"
                        },
                        "name": "subscription_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpcomingInvoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-upcoming"
            }
        },
        "/invoices/{invoice_id}": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Fetch invoice",
                "description": "This endpoint is used to fetch an [`Invoice`](../guides/concepts#invoice) given an identifier.",
                "operationId": "fetch-invoice",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "invoice_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{invoice_id}/issue": {
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Issue invoice",
                "description": "This endpoint allows an eligible invoice to be issued manually. This is only possible with invoices where status is `draft`,\n`will_auto_issue` is true, and an `eligible_to_issue_at` is a time in the past. Issuing an invoice could possibly trigger\nside effects, some of which could be customer-visible (e.g. sending emails, auto-collecting payment,\nsyncing the invoice to external providers, etc).",
                "operationId": "issue-invoice",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "invoice_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "issue"
            }
        },
        "/invoices/{invoice_id}/mark_paid": {
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Mark invoice as paid",
                "description": "This endpoint allows an invoice's status to be set the `paid` status. This can only be done to invoices that are in\nthe `issued` status.",
                "operationId": "mark-invoice-as-paid",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "invoice_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MarkAsPaidRequestParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices/{invoice_id}/void": {
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Void invoice",
                "description": "This endpoint allows an invoice's status to be set the `void` status. This can only be done to invoices that are in\nthe `issued` status.\n\nIf the associated invoice has used the customer balance to change the amount due, the customer balance operation\nwill be reverted. For example, if the invoice used $10 of customer balance, that amount will be added back to the\ncustomer balance upon voiding.",
                "operationId": "void-invoice",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "invoice_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "void"
            }
        },
        "/items": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "List items",
                "description": "This endpoint returns a list of all Items, ordered in descending order by creation time.",
                "operationId": "list-items",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Items"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/items/{item_id}": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Fetch item",
                "description": "This endpoint returns an item identified by its item_id.",
                "operationId": "fetch-item",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "item_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "Metric"
                ],
                "summary": "List metrics",
                "description": "This endpoint is used to fetch [metric](../guides/concepts#metric) details given a metric identifier.\nIt returns information about the metrics including its name, description, and item.",
                "operationId": "list-metrics",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BillableMetrics"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Metric"
                ],
                "summary": "Create metric",
                "description": "This endpoint is used to create a [metric](../guides/concepts##metric) using a SQL string.\nSee [SQL support](../guides/extensibility/advanced-metrics#sql-support)\nfor a description of constructing SQL queries with examples.",
                "operationId": "create-metric",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewBillableMetric"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BillableMetric"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metrics/{metric_id}": {
            "get": {
                "tags": [
                    "Metric"
                ],
                "summary": "Get metric",
                "description": "This endpoint is used to list [metrics](../guides/concepts##metric).\nIt returns information about the metrics including its name, description, and item.",
                "operationId": "fetch-metric",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "metric_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BillableMetric"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "tags": [
                    "Availability"
                ],
                "summary": "Check availability",
                "description": "This endpoint allows you to test your connection to the Orb API and check the validity of your API key, passed in\nthe Authorization header. This is particularly useful for checking that your environment is set up properly, and is\na great choice for connectors and integrations.\n\nThis API does not have any side-effects or return any Orb resources.",
                "operationId": "ping",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plans": {
            "get": {
                "tags": [
                    "Plan"
                ],
                "summary": "List plans",
                "description": "This endpoint returns a list of all [plans](../guides/concepts##plan-and-price) for an account in a list format.\nThe list of plans is ordered starting from the most recently created plan.\nThe response also includes [`pagination_metadata`](../reference/pagination),\nwhich lets the caller retrieve the next page of results if they exist.",
                "operationId": "list-plans",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "archived",
                                "draft"
                            ],
                            "title": "Status",
                            "description": "The plan status to filter to ('active', 'archived', or 'draft')."
                        },
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plans"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Plan"
                ],
                "summary": "Create plan",
                "description": "This endpoint allows creation of plans including their prices.",
                "operationId": "create-plan",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewPlan"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plans/external_plan_id/{external_plan_id}": {
            "get": {
                "tags": [
                    "Plan"
                ],
                "summary": "Fetch plan by external ID",
                "description": "This endpoint is used to fetch [plan](../guides/concepts##plan-and-price) details given an external_plan_id\nidentifier. It returns information about the prices included in the plan and their configuration, as well as\nthe product that the plan is attached to.\n\n## Serialized prices\nOrb supports a few different pricing models\nout of the box. Each of these models is serialized differently in a given [Price](../guides/concepts#plan-and-price)\nobject. The `model_type` field determines the key for the configuration object that is present. A detailed explanation\nof price types can be found in the [Price schema](../guides/concepts#plan-and-price). \"",
                "operationId": "fetch-plan-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "external_plan_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-by-external-id"
            },
            "put": {
                "tags": [
                    "Plan"
                ],
                "summary": "Update plan by external ID",
                "description": "This endpoint is used to fetch [plan](../guides/concepts##plan-and-price) details given an external_plan_id identifier.\nIt returns information about the prices included in the plan and their configuration, as well\nas the product that the plan is attached to.\n\n## Serialized prices\nOrb supports a few different pricing models out of the box. Each of these\nmodels is serialized differently in a given [Price](../guides/concepts#plan-and-price) object.\nThe `model_type` field determines the key for the configuration object that is present.\nA detailed explanation of price types can be found in the [Price schema](../guides/concepts#plan-and-price).",
                "operationId": "update-plan-external",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "external_plan_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditPlan"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plans/{plan_id}": {
            "get": {
                "tags": [
                    "Plan"
                ],
                "summary": "Fetch plan",
                "description": "This endpoint is used to fetch [plan](../guides/concepts##plan-and-price) details given a plan identifier.\nIt returns information about the prices included in the plan and their configuration, as well as the product\nthat the plan is attached to.\n\n## Serialized prices\nOrb supports a few different pricing models out of the box.\nEach of these models is serialized differently in a given [Price](../guides/concepts#plan-and-price) object.\nThe `model_type` field determines the key for the configuration object that is present. A detailed explanation of\nprice types can be found in the [Price schema](../guides/concepts#plan-and-price).\n\n## Phases\nOrb supports plan phases, also known as contract ramps. For plans with phases, the serialized prices refer to\nall prices across all phases.",
                "operationId": "fetch-plan",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "plan_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Plan"
                ],
                "summary": "Update plan by id",
                "description": "This endpoint can be used to update the `external_plan_id`, and `metadata` of an existing plan.\n\nOther fields on a customer are currently immutable.",
                "operationId": "update-plan",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "plan_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditPlan"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "tags": [
                    "Price"
                ],
                "summary": "List prices",
                "description": "This endpoint is used to list all add-on prices created using the [price creation endpoint](../reference/create-price).",
                "operationId": "list-prices",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Prices"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Price"
                ],
                "summary": "Create price",
                "description": "This endpoint is used to create a [price](../reference/price).\nA price created using this endpoint is always an add-on, meaning that it\u2019s not associated with a specific plan and can instead\nbe individually added to subscriptions, including subscriptions on different plans.\n\nAn `external_price_id` can be optionally specified as an alias to allow ergonomic interaction with prices in the Orb API.\n\nSee the [Price resource](../reference/price) for the specification of\ndifferent price model configurations possible in this endpoint.",
                "operationId": "create-price",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewFloatingPrice"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Price"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "create"
            }
        },
        "/prices/external_price_id/{external_price_id}": {
            "get": {
                "tags": [
                    "Price"
                ],
                "summary": "Fetch price by external price id",
                "description": "This endpoint returns a price given an external price id.\nSee the [price creation API](../reference/create-price) for more information about external price aliases.",
                "operationId": "fetch-price-external-id",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "external_price_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Price"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-by-external-id"
            }
        },
        "/prices/{price_id}": {
            "get": {
                "tags": [
                    "Price"
                ],
                "summary": "Fetch price",
                "description": "This endpoint returns a price given an identifier.",
                "operationId": "fetch-price",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "price_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Price"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "tags": [
                    "Subscription"
                ],
                "summary": "List subscriptions",
                "description": "This endpoint returns a list of all subscriptions for an account as a [paginated](../reference/pagination) list,\nordered starting from the most recently created subscription. For a full discussion of the subscription resource,\nsee [Subscription](../guides/concepts#subscription).\n\nSubscriptions can be filtered to a single customer by\npassing in the `customer_id` query parameter or the `external_customer_id` query parameter.",
                "operationId": "list-subscriptions",
                "parameters": [
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Customer Id"
                        },
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "External Customer Id"
                        },
                        "name": "external_customer_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "active",
                                        "ended",
                                        "upcoming"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Status"
                        },
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gte]"
                        },
                        "name": "created_at[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Gt]"
                        },
                        "name": "created_at[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lt]"
                        },
                        "name": "created_at[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Created At[Lte]"
                        },
                        "name": "created_at[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscriptions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            },
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Create subscription",
                "description": "A subscription represents the purchase of a plan by a customer. The customer is identified by either the `customer_id`\nor the `external_customer_id`, and exactly one of these fields must be provided.\n\nBy default, subscriptions begin on the day that they're created and renew automatically for each billing cycle at the\ncadence that's configured in the plan definition.\n\nThe default configuration for subscriptions in Orb is **In-advance billing** and **Beginning of month alignment** (see\n[Subscription](../guides/concepts#subscription) for more details).\n\nIn order to change the alignment behavior, Orb also supports billing subscriptions on the day of the month they are\ncreated. If `align_billing_with_subscription_start_date = true` is specified, subscriptions have billing cycles that are\naligned with their `start_date`. For example, a subscription that begins on January 15th will have a billing cycle from\nJanuary 15th to February 15th. Every subsequent billing cycle will continue to start and invoice on the 15th.\n\nIf the \"day\" value is greater than the number of days in the month, the next billing cycle will start at the end of the\nmonth. For example, if the start_date is January 31st, the next billing cycle will start on February 28th.\n\nIf a customer was created with a currency, Orb only allows subscribing the customer to a plan with a matching\n`invoicing_currency`. If the customer does not have a currency set, on subscription creation, we set the customer's\ncurrency to be the `invoicing_currency` of the plan.\n\n## Price overrides\n\nPrice overrides are used to update some or all prices in a plan for the specific subscription being created. This is\nuseful when a new customer has negotiated one or more different prices for a specific plan than the plan's default\nprices. Any type of price can be overridden, if the correct data is provided. The billable metric, cadence, type, and\nname of a price can not be overridden.\n\n\nTo override prices, provide a list of objects with the key `price_overrides`. The price object in the list of overrides\nis expected to contain the existing price id, the `model_type` and config value in the format below. The specific\nnumerical values can be updated, but the config value and `model_type` must match the existing price that is being\noverridden\n\n### Request format for price overrides\n\nOrb supports a few different pricing models out of the box. The `model_type` field determines the key for the\nconfiguration object that is present.\n\n### Unit pricing\n\nWith unit pricing, each unit costs a fixed amount.\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"unit\",\n\"unit_config\": {\n\"unit_amount\": \"0.50\"\n}\n...\n}\n```\n\n### Tiered pricing\n\nIn tiered pricing, the cost of a given unit depends on the tier range that it falls into, where each tier range is\ndefined by an upper and lower bound. For example, the first ten units may cost $0.50 each and all units thereafter may\ncost $0.10 each. Tiered prices can be overridden with a new number of tiers or new values for `first_unit`, `last_unit`,\nor `unit_amount`.\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"tiered\",\n\"tiered_config\": {\n\"tiers\": [\n{\n\"first_unit\":\"1\",\n\"last_unit\": \"10\",\n\"unit_amount\": \"0.50\"\n},\n{\n\"first_unit\": \"10\",\n\"last_unit\": null,\n\"unit_amount\": \"0.10\"\n}\n]\n}\n...\n}\n```\n\n### Bulk pricing\n\nBulk pricing applies when the number of units determine the cost of _all_ units. For example, if you've bought less than\n10 units, they may each be $0.50 for a total of $5.00. Once you've bought more than 10 units, all units may now be\npriced at $0.40 (i.e. 101 units total would be $40.40). Bulk prices can be overridden with a new number of tiers or new\nvalues for `maximum_units`, or `unit_amount`.\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"bulk\",\n\"bulk_config\": {\n\"tiers\": [\n{\n\"maximum_units\": \"10\",\n\"unit_amount\": \"0.50\"\n},\n{\n\"maximum_units\": \"1000\",\n\"unit_amount\": \"0.40\"\n}\n]\n}\n...\n}\n```\n### Package pricing\n\nPackage pricing defines the size or granularity of a unit for billing purposes. For example, if the package size is set\nto 5, then 4 units will be billed as 5 and 6 units will be billed at 10.\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"package\",\n\"package_config\": {\n\"package_amount\": \"0.80\",\n\"package_size\": 10\n}\n...\n}\n```\n### BPS pricing\n\nBPS pricing specifies a per-event (e.g. per-payment) rate in one hundredth of a percent (the number of basis points to\ncharge), as well as a cap per event to assess. For example, this would allow you to assess a fee of 0.25% on every\npayment you process, with a maximum charge of $25 per payment.\n\n```json\n{\n...\n\"id\": \"price_id\"\n\"model_type\": \"bps\",\n\"bps_config\": {\n\"bps\": 125,\n\"per_event_cap\": \"11.00\"\n}\n...\n}\n```\n### Bulk BPS pricing\n\nBulk BPS pricing specifies BPS parameters in a tiered manner, dependent on the total quantity across all events. Similar\nto bulk pricing, the BPS parameters of a given event depends on the tier range that the billing period falls into. Each\ntier range is defined by an upper and lower bound. For example, after $1.5M of payment volume is reached, each\nindividual payment may have a lower cap or a smaller take-rate.\n\n```json\n{\n...\n\"id\": \"price_id\"\n\"model_type\": \"bulk_bps\",\n\"bulk_bps_config\": {\n\"tiers\": [\n{\n\"minimum_amount\": \"0.00\",\n\"maximum_amount\": \"1000000.00\",\n\"bps\": 125,\n\"per_event_cap\": \"19.00\"\n},\n{\n\"minimum_amount\":\"1000000.00\",\n\"maximum_amount\": null,\n\"bps\": 115,\n\"per_event_cap\": \"4.00\"\n}\n]\n}\n...\n}\n```\n### Tiered BPS pricing\nTiered BPS pricing specifies BPS parameters in a graduated manner, where an event's applicable parameter is a function\nof its marginal addition to the period total. Similar to tiered pricing, the BPS parameters of a given event depends on\nthe tier range that it falls into, where each tier range is defined by an upper and lower bound. For example, the first\nfew payments may have a 0.8 BPS take-rate and all payments after a specific volume may incur a take-rate of 0.5 BPS\neach.\n\n```json\n{\n...\n\"id\": \"price_id\"\n\"model_type\": \"tiered_bps\",\n\"tiered_bps_config\": {\n\"tiers\": [\n{\n\"minimum_amount\": \"0.00\",\n\"maximum_amount\": \"1000000.00\",\n\"bps\": 125,\n\"per_event_cap\": \"19.00\"\n},\n{\n\"minimum_amount\":\"1000000\",\n\"maximum_amount\": null,\n\"bps\": 115,\n\"per_event_cap\": \"4.00\"\n}\n]\n}\n...\n}\n```\n### Matrix pricing\nMatrix pricing defines a set of unit prices in a one or two-dimensional matrix. `dimensions` defines the two event\nproperty values evaluated in this pricing model. In a one-dimensional matrix, the second value is `null`. Every\nconfiguration has a list of `matrix_values` which give the unit prices for specified property values. In a\none-dimensional matrix, the matrix values will have `dimension_values` where the second value of the pair is null. If an\nevent does not match any of the dimension values in the matrix, it will resort to the `default_unit_amount`.\n```json\n...\n\"model_type\": \"matrix\"\n\"matrix_config\": {\n\"default_unit_amount\": \"3.00\",\n\"dimensions\": [\n\"cluster_name\",\n\"region\"\n],\n\"matrix_values\": [\n{\n\"dimension_values\": [\n\"alpha\",\n\"west\"\n],\n\"unit_amount\": \"2.00\"\n},\n...\n]\n}\n...\n```\n\n### Fixed fees\nFixed fees follow unit pricing, and also have an additional parameter `fixed_price_quantity` that indicates how many of\na fixed fee that should be applied for a subscription. This parameter defaults to 1.\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"unit\",\n\"unit_config\": {\n\"unit_amount\": \"2.00\"\n},\n\"fixed_price_quantity\": 3.0\n...\n}\n```\n\n## Maximums and Minimums\nMinimums and maximums, much like price overrides, can be useful when a new customer has negotiated a new or different\nminimum or maximum spend cap than the default for a given price. If one exists for a price\nand null is provided for the minimum/maximum override on creation, then there\nwill be no minimum/maximum on the new subscription. If no value is provided, then the default price maximum or minimum is\nused.\n\nTo add a minimum for a specific price, add `minimum_amount` to the specific price in the `price_overrides` object.\n\nTo add a maximum for a specific price, add `maximum_amount` to the specific price in the `price_overrides` object.\n\n\n### Minimum override example\n\nPrice minimum override example:\n\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"unit\",\n\"unit_config\": {\n\"unit_amount\": \"0.50\"\n},\n\"minimum_amount\": \"100.00\"\n...\n}\n```\n\n\nRemoving an existing minimum example\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"unit\",\n\"unit_config\": {\n\"unit_amount\": \"0.50\"\n},\n\"minimum_amount\": null\n...\n}\n```\n\n## Discounts\nDiscounts, like price overrides, can be useful when a new customer has negotiated a new or different discount than the\ndefault for a price. A single price price can have at most\none discount. If a discount exists for a price and a null discount is provided on creation, then there will be\nno discount on the new subscription.\n\nTo add a discount for a specific price, add `discount` to the price in the `price_overrides` object.\nDiscount should be a dictionary of the format:\n```json\n{\n\"discount_type\": \"amount\" | \"percentage\" | \"usage\",\n\"amount_discount\": string,\n\"percentage_discount\": string,\n\"usage_discount\": string\n}\n```\nwhere either `amount_discount`, `percentage_discount`, or `usage_discount` is provided.\n\nPrice discount example\n```json\n{\n...\n\"id\": \"price_id\",\n\"model_type\": \"unit\",\n\"unit_config\": {\n\"unit_amount\": \"0.50\"\n},\n\"discount\": {\"discount_type\": \"amount\", \"amount_discount\": \"175\"},\n}\n```\n\nRemoving an existing discount example\n```json\n{\n\"customer_id\": \"customer_id\",\n\"plan_id\": \"plan_id\",\n\"discount\": null,\n\"price_overrides\": [ ... ]\n...\n}\n```\n\n## Threshold Billing\n\nOrb supports invoicing for a subscription when a preconfigured usage threshold is hit. To enable threshold billing, pass\nin an `invoicing_threshold`, which is specified in the subscription's invoicing currency, when creating a subscription.\nEx. pass in `10.00` to issue an invoice when usage amounts hit $10.00 for a subscription that invoices in USD.",
                "operationId": "create-subscription",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewSubscription"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}": {
            "get": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Fetch subscription",
                "description": "This endpoint is used to fetch a [Subscription](../guides/concepts#subscription) given an identifier.",
                "operationId": "fetch-subscription",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/cancel": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Cancel subscription",
                "description": "This endpoint can be used to cancel an existing subscription. It returns the serialized subscription object with an\n`end_date` parameter that signifies when the subscription will transition to an ended state.\n\nThe body parameter `cancel_option` determines the cancellation behavior. Orb supports three cancellation options:\n- `end_of_subscription_term`: stops the subscription from auto-renewing. Subscriptions that have been cancelled with\n  this option can still incur charges for the remainder of their term:\n    - Issuing this cancellation request for a monthly subscription will keep the subscription active until the start\n      of the subsequent month, and potentially issue an invoice for any usage charges incurred in the intervening\n      period.\n    - Issuing this cancellation request for a quarterly subscription will keep the subscription active until the end\n      of the quarter and potentially issue an invoice for any usage charges incurred in the intervening period.\n    - Issuing this cancellation request for a yearly subscription will keep the subscription active for the full\n      year. For example, a yearly subscription starting on 2021-11-01 and cancelled on 2021-12-08 will remain active\n      until 2022-11-01 and potentially issue charges in the intervening months for any recurring monthly usage\n      charges in its plan.\n    - **Note**: If a subscription's plan contains prices with difference cadences, the end of term date will be\n      determined by the largest cadence value. For example, cancelling end of term for a subscription with a\n      quarterly fixed fee with a monthly usage fee will result in the subscription ending at the end of the quarter.\n\n- `immediate`: ends the subscription immediately, setting the `end_date` to the current time:\n    - Subscriptions that have been cancelled with this option will be invoiced immediately. This invoice will\n      include any usage fees incurred in the billing period up to the cancellation, along with any prorated\n      recurring fees for the billing period, if applicable.\n    - **Note**: If the subscription has a recurring fee that was paid in-advance, the prorated amount for the\n      remaining time period will be added to the [customer's balance](list-balance-transactions) upon immediate\n      cancellation. However, if the customer is ineligible to use the customer balance, the subscription cannot be\n      cancelled immediately.\n\n- `requested_date`: ends the subscription on a specified date, which requires a `cancellation_date` to be passed in.\n  If no timezone is provided, the customer's timezone is used.  For example, a subscription starting on January 1st\n  with a monthly price can be set to be cancelled on the first of any month after January 1st (e.g. March 1st, April\n  1st, May 1st). A subscription with multiple prices with different cadences defines the \"term\" to be the highest\n  cadence of the prices.\n\nUpcoming subscriptions are only eligible for immediate cancellation, which will set the `end_date` equal to the\n`start_date` upon cancellation.\n\n## Backdated cancellations\nOrb allows you to cancel a subscription in the past as long as there are no paid invoices between the\n`requested_date` and the current time. If the cancellation is after the latest issued invoice, Orb will generate a\nbalance refund for the current period. If the cancellation is before the most recently issued invoice, Orb will void\nthe intervening invoice and generate a new one based on the new dates for the subscription. See the section on\n[cancellation behaviors](../guides/product-catalog/creating-subscriptions.md#cancellation-behaviors).",
                "operationId": "cancel-subscription",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CancelSubscriptionParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/costs": {
            "get": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Fetch subscription costs",
                "description": "This endpoint is used to fetch a day-by-day snapshot of a subscription's costs in Orb, calculated by applying\npricing information to the underlying usage (see the [subscription usage endpoint](fetch-subscription-usage) to\nfetch usage per metric, in usage units rather than a currency).\n\nThe semantics of this endpoint exactly mirror those of [fetching a customer's costs](fetch-customer-costs). Use this\nendpoint to limit your analysis of costs to a specific subscription for the customer (e.g. to de-aggregate costs\nwhen a customer's subscription has started and stopped on the same day).",
                "operationId": "fetch-subscription-costs",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe Start",
                            "description": "Costs returned are inclusive of `timeframe_start`.",
                            "examples": [
                                "2022-02-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe End",
                            "description": "Costs returned are exclusive of `timeframe_end`.",
                            "examples": [
                                "2022-03-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "periodic",
                                        "cumulative"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "View Mode",
                            "description": "Controls whether Orb returns cumulative costs since the start of the billing period, or incremental day-by-day costs. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior."
                        },
                        "name": "view_mode",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Group By",
                            "description": "Groups per-price costs by the key provided."
                        },
                        "name": "group_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionCosts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-costs"
            }
        },
        "/subscriptions/{subscription_id}/price_intervals": {
            "post": {
                "tags": [
                    "Price interval"
                ],
                "summary": "Add or edit price intervals",
                "description": "This endpoint is used to add and edit subscription [price intervals](../reference/price-interval). By making\nmodifications to a subscription\u2019s price intervals, you can [flexibly and atomically control the billing behavior of a\nsubscription](../guides/product-catalog/modifying-subscriptions).\n\n## Adding price intervals\n\nPrices can be added as\nprice intervals to a subscription by specifying them in the `add` array. A `price_id` or `external_price_id` from an\nadd-on price or previously removed plan price can be specified to reuse an existing price definition (however, please\nnote that prices from other plans cannot be added to the subscription). Additionally, a new price can be specified using\nthe `price` field \u2014 this price will be created automatically.\n\nA `start_date` must be specified for the price\ninterval. This is the date when the price will start billing on the subscription, so this will notably result in an\nimmediate charge at this time for any billed in advance fixed fees. The `end_date` will default to null, resulting in a\nprice interval that will bill on a continually recurring basis. Both of these dates can be set in the past or the future\nand Orb will generate or modify invoices to ensure the subscription\u2019s invoicing behavior is correct.\n\nAdditionally, a\ndiscount, minimum, or maximum can be specified on the price interval. This will only apply to this price interval, not\nany other price intervals on the subscription.\n\n## Editing price intervals\n\nPrice intervals can be adjusted by\nspecifying edits to make in the `edit` array. A `price_interval_id` to edit must be specified \u2014 this can be retrieved\nfrom the `price_intervals` field on the subscription.\n\nA new `start_date` or `end_date` can be specified to change the\nrange of the price interval, which will modify past or future invoices to ensure correctness. If either of these dates\nare unspecified, they will default to the existing date on the price interval. To remove a price interval entirely from\na subscription, set the `end_date` to be equivalent to the `start_date`.\n\n## Fixed fee quantity transitions\nThe fixed fee quantity transitions for a fixed fee price interval can also be specified when adding or editing by passing an\narray for `fixed_fee_quantity_transitions`. A fixed fee quantity transition must have a `quantity` and an\n`effective_date`, which is the date after which the new quantity will be used for billing. If a fixed fee quantity\ntransition is scheduled at a billing period boundary, the full quantity will be billed on an invoice with the other\nprices on the subscription. If the fixed fee quantity transition is scheduled mid-billing period, the difference between\nthe existing quantity and quantity specified in the transition will be prorated for the rest of the billing period and\nbilled immediately, which will generate a new invoice.\n\nNotably, the list of fixed fee quantity transitions passed\nwill overwrite the existing fixed fee quantity transitions on the price interval, so the entire list of transitions must\nbe specified to add additional transitions. The existing list of transitions can be retrieved using the\n`fixed_fee_quantity_transitions` property on a subscription\u2019s serialized price intervals.",
                "operationId": "add-edit-price-intervals",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddEditPriceIntervalParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/schedule": {
            "get": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Fetch subscription schedule",
                "description": "This endpoint returns a [paginated](../reference/pagination) list of all plans associated with a subscription along\nwith their start and end dates. This list contains the subscription's initial plan along with past and future plan\nchanges.",
                "operationId": "fetch-subscription-schedule",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "title": "Limit",
                            "description": "The number of items to fetch. Defaults to 20.",
                            "default": 20
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Start Date[Gte]"
                        },
                        "name": "start_date[gte]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Start Date[Gt]"
                        },
                        "name": "start_date[gt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Start Date[Lt]"
                        },
                        "name": "start_date[lt]",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Start Date[Lte]"
                        },
                        "name": "start_date[lte]",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionScheduleItems"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-schedule",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/schedule_plan_change": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Schedule plan change",
                "description": "This endpoint can be used to change the plan on an existing subscription. It returns the serialized updated\nsubscription object.\n\nThe body parameter `change_option` determines the timing of the plan change. Orb supports three options:\n- `end_of_subscription_term`: changes the plan at the end of the existing plan's term.\n    - Issuing this plan change request for a monthly subscription will keep the existing plan active until the start\n      of the subsequent month, and potentially issue an invoice for any usage charges incurred in the intervening\n      period.\n    - Issuing this plan change request for a yearly subscription will keep the existing plan active for the full\n      year.\n- `immediate`: changes the plan immediately. Subscriptions that have their plan changed with this option will be\n  invoiced immediately. This invoice will include any usage fees incurred in the billing period up to the change,\n  along with any prorated recurring fees for the billing period, if applicable.\n- `requested_date`: changes the plan on the requested date (`change_date`). If no timezone is provided, the\n  customer's timezone is used. The `change_date` body parameter is required if this option is chosen.\n\nNote that one of `plan_id` or `external_plan_id` is required in the request body for this operation.\n\n## Price overrides, maximums, and minimums\nPrice overrides are used to update some or all prices in the target plan. Minimums and maximums, much like price\noverrides, can be useful when a new customer has negotiated a new or different minimum or maximum spend cap than the\ndefault for the plan. The request format for price overrides, maximums, and minimums are the same as those in\n[subscription creation](create-subscription).\n\n## Prorations for in-advance fees\nBy default, Orb calculates the prorated difference in any fixed fees when making a plan change, adjusting the\ncustomer balance as needed. For details on this behavior, see\n[Modifying subscriptions](../guides/product-catalog/modifying-subscriptions.md#prorations-for-in-advance-fees).",
                "operationId": "schedule-plan-change",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionPlanChange"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/trigger_phase": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Trigger phase",
                "description": "Manually trigger a phase, effective the given date (or the current time, if not specified).",
                "operationId": "trigger-phase",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TriggerSubscriptionPhaseParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/unschedule_cancellation": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Unschedule subscription cancellation",
                "description": "This endpoint can be used to unschedule any pending cancellations for a subscription.\n\nTo be eligible, the subscription must currently be active and have a future cancellation. This operation will turn\non auto-renew, ensuring that the subscription does not end at the currently scheduled cancellation time.",
                "operationId": "unschedule-cancellation",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/unschedule_fixed_fee_quantity_updates": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Unschedule fixed fee quantity updates",
                "description": "This endpoint can be used to clear scheduled updates to the quantity for a fixed fee.\n\nIf there are no updates scheduled, this endpoint is a no-op.",
                "operationId": "unschedule-fixed-fee-quantity",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnscheduleFixedFeeQuantityChangeParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/unschedule_pending_plan_changes": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Unschedule plan change",
                "description": "This endpoint can be used to unschedule any pending plan changes on an existing subscription.",
                "operationId": "unschedule-plan-change",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/update_fixed_fee_quantity": {
            "post": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Update price quantity",
                "description": "This endpoint can be used to update the quantity for a fixed fee.\n\nTo be eligible, the subscription must currently be active and the price specified must be a fixed fee (not\nusage-based). This operation will immediately update the quantity for the fee, or if a `effective_date` is passed\nin, will update the quantity on the requested date at midnight in the customer's timezone.\n\nIn order to change the fixed fee quantity as of the next draft invoice for this subscription, pass\n`change_option=upcoming_invoice` without an `effective_date` specified.\n\nIf the fee is an in-advance fixed fee, it will also issue an immediate invoice for the difference for the remainder\nof the billing period.",
                "operationId": "update-fixed-fee-quantity",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FixedFeeQuantityChange"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}/usage": {
            "get": {
                "tags": [
                    "Subscription"
                ],
                "summary": "Fetch subscription usage",
                "description": "This endpoint is used to fetch a subscription's usage in Orb. Especially when combined with optional query\nparameters, this endpoint is a powerful way to build visualizations on top of Orb's event data and metrics.\n\nWith no query parameters specified, this endpoint returns usage for the subscription's _current billing period_\nacross each billable metric that participates in the subscription. Usage quantities returned are the result of\nevaluating the metric definition for the entirety of the customer's billing period.\n\n### Default response shape\nOrb returns a `data` array with an object corresponding to each billable metric. Nested within this object is a\n`usage` array which has a `quantity` value and a corresponding `timeframe_start` and `timeframe_end`.  The `quantity`\nvalue represents the calculated usage value for the billable metric over the specified timeframe (inclusive of the\n`timeframe_start` timestamp and exclusive of the `timeframe_end` timestamp).\n\nOrb will include _every_ window in the response starting from the beginning of the billing period, even when there\nwere no events (and therefore no usage) in the window. This increases the size of the response but prevents the caller\nfrom filling in gaps and handling cumbersome time-based logic.\n\nThe query parameters in this endpoint serve to override this behavior and provide some key functionality, as listed\nbelow. Note that this functionality can also be used _in conjunction_ with each other, e.g. to display grouped usage\non a custom timeframe.\n\n## Custom timeframe\nIn order to view usage for a custom timeframe rather than the current billing period, specify a `timeframe_start` and\n`timeframe_end`. This will calculate quantities for usage incurred between timeframe_start (inclusive) and timeframe_end\n(exclusive), i.e. `[timeframe_start, timeframe_end)`.\n\nNote:\n- These timestamps must be specified in ISO 8601 format and UTC timezone, e.g. `2022-02-01T05:00:00Z`.\n- Both parameters must be specified if either is specified.\n\n## Grouping by custom attributes\nIn order to view a single metric grouped by a specific _attribute_ that each event is tagged with (e.g. `cluster`), you\nmust additionally specify a `billable_metric_id` and a `group_by` key. The `group_by` key denotes the event property on\nwhich to group.\n\nWhen returning grouped usage, only usage for `billable_metric_id` is  returned, and a separate object in the `data` array\nis returned for each value of the `group_by` key present in your events. The `quantity` value is the result of evaluating\nthe billable metric for events filtered to a single value of the `group_by` key.\n\nOrb expects that events that match the billable metric will contain values in the `properties` dictionary that correspond\nto the `group_by` key specified. By default, Orb will not return a `null` group (i.e. events that match the metric but\ndo not have the key set). Currently, it is only possible to view usage grouped by a single attribute at a time.\n\n When viewing grouped usage, Orb uses pagination to limit the response size to 1000 groups by default. If there are more\n groups for a given subscription, pagination metadata in the response can be used to fetch all of the data.\n\nThe following example shows usage for an \"API Requests\" billable metric grouped by `region`. Note the extra `metric_group`\ndictionary in the response, which provides metadata about the group:\n\n```json\n{\n    \"data\": [\n        {\n            \"usage\": [\n                {\n                    \"quantity\": 0.19291,\n                    \"timeframe_start\": \"2021-10-01T07:00:00Z\",\n                    \"timeframe_end\": \"2021-10-02T07:00:00Z\",\n                },\n                ...\n            ],\n            \"metric_group\": {\n                \"property_key\": \"region\",\n                \"property_value\": \"asia/pacific\"\n            },\n            \"billable_metric\": {\n                \"id\": \"Fe9pbpMk86xpwdGB\",\n                \"name\": \"API Requests\"\n            },\n            \"view_mode\": \"periodic\"\n        },\n        ...\n    ]\n}\n```\n\n\n## Windowed usage\nThe `granularity` parameter can be used to _window_ the usage `quantity` value into periods. When not specified, usage\nis returned for the entirety of the time range.\n\nWhen `granularity = day` is specified with a timeframe longer than a day, Orb will return a `quantity` value for each\nfull day between `timeframe_start` and `timeframe_end`. Note that the days are demarcated by the _customer's local midnight_.\n\nFor example, with `timeframe_start = 2022-02-01T05:00:00Z`, `timeframe_end = 2022-02-04T01:00:00Z` and `granularity=day`,\nthe following windows will be returned for a customer in the `America/Los_Angeles` timezone since local midnight is `08:00` UTC:\n- `[2022-02-01T05:00:00Z, 2022-02-01T08:00:00Z)`\n- `[2022-02-01T08:00:00, 2022-02-02T08:00:00Z)`\n- `[2022-02-02T08:00:00, 2022-02-03T08:00:00Z)`\n- `[2022-02-03T08:00:00, 2022-02-04T01:00:00Z)`\n\n```json\n{\n    \"data\": [\n        {\n            \"billable_metric\": {\n                \"id\": \"Q8w89wjTtBdejXKsm\",\n                \"name\": \"API Requests\"\n            },\n            \"usage\": [\n                {\n                    \"quantity\": 0,\n                    \"timeframe_end\": \"2022-02-01T08:00:00+00:00\",\n                    \"timeframe_start\": \"2022-02-01T05:00:00+00:00\"\n                },\n                {\n\n                    \"quantity\": 0,\n                    \"timeframe_end\": \"2022-02-02T08:00:00+00:00\",\n                    \"timeframe_start\": \"2022-02-01T08:00:00+00:00\"\n                },\n                {\n                    \"quantity\": 0,\n                    \"timeframe_end\": \"2022-02-03T08:00:00+00:00\",\n                    \"timeframe_start\": \"2022-02-02T08:00:00+00:00\"\n                },\n                {\n                    \"quantity\": 0,\n                    \"timeframe_end\": \"2022-02-04T01:00:00+00:00\",\n                    \"timeframe_start\": \"2022-02-03T08:00:00+00:00\"\n                }\n            ],\n            \"view_mode\": \"periodic\"\n        },\n        ...\n    ]\n}\n```\n\n## Decomposable vs. non-decomposable metrics\nBillable metrics fall into one of two categories: decomposable and non-decomposable. A decomposable billable metric, such as\na sum or a count, can be displayed and aggregated across arbitrary timescales. On the other hand, a non-decomposable metric\nis not meaningful when only a slice of the billing window is considered.\n\nAs an example, if we have a billable metric that's defined to count unique users, displaying a graph of unique users for each\nday is not representative of the billable metric value over the month (days could have an overlapping set of 'unique' users).\nInstead, what's useful for any given day is the number of unique users in the billing period so far, which are the\n_cumulative_ unique users.\n\nAccordingly, this endpoint returns treats these two types of metrics differently when `group_by` is specified:\n- Decomposable metrics can be grouped by any event property.\n- Non-decomposable metrics can only be grouped by the corresponding price's invoice grouping key. If no invoice grouping key\nis present, the metric does not support `group_by`.\n\n## Matrix prices\nWhen a billable metric is attached to a price that uses matrix pricing, it's important to view usage grouped by those matrix\ndimensions. In this case, use the query parameters `first_dimension_key`, `first_dimension_value` and `second_dimension_key`,\n`second_dimension_value` while filtering to a specific `billable_metric_id`.\n\nFor example, if your compute metric has a separate unit price (i.e. a matrix pricing model) per `region` and `provider`,\nyour request might provide the following parameters:\n\n- `first_dimension_key`: `region`\n- `first_dimension_value`: `us-east-1`\n- `second_dimension_key`: `provider`\n- `second_dimension_value`: `aws`",
                "operationId": "fetch-subscription-usage",
                "parameters": [
                    {
                        "required": true,
                        "style": "simple",
                        "schema": {
                            "type": "string"
                        },
                        "name": "subscription_id",
                        "in": "path"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Limit",
                            "description": "If including a `group_by`, the number of groups to fetch data for. Defaults to 1000."
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Cursor",
                            "description": "Cursor for pagination. This can be populated by the `next_cursor` value returned from the initial request."
                        },
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "day"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Granularity",
                            "description": "This determines the windowing of usage reporting.",
                            "default": "day"
                        },
                        "name": "granularity",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe Start",
                            "description": "Usage returned is inclusive of `timeframe_start`.",
                            "examples": [
                                "2022-02-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_start",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Timeframe End",
                            "description": "Usage returned is exclusive of `timeframe_end`.",
                            "examples": [
                                "2022-03-01T05:00:00Z"
                            ]
                        },
                        "name": "timeframe_end",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Billable Metric Id",
                            "description": "When specified in conjunction with `group_by`, this parameter filters usage to a single billable metric. Note that both `group_by` and `billable_metric_id` must be specified together."
                        },
                        "name": "billable_metric_id",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Group By",
                            "description": "Groups per-price usage by the key provided."
                        },
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "periodic",
                                        "cumulative"
                                    ]
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "View Mode",
                            "description": "Controls whether Orb returns cumulative usage since the start of the billing period, or incremental day-by-day usage. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior."
                        },
                        "name": "view_mode",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "First Dimension Key"
                        },
                        "name": "first_dimension_key",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "First Dimension Value"
                        },
                        "name": "first_dimension_value",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Second Dimension Key"
                        },
                        "name": "second_dimension_key",
                        "in": "query"
                    },
                    {
                        "style": "form",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Second Dimension Value"
                        },
                        "name": "second_dimension_value",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/400Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/401Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/404Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/409Error"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/413Error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/429Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/500Error"
                                }
                            }
                        }
                    }
                },
                "x-speakeasy-name-override": "fetch-usage",
                "x-speakeasy-pagination": {
                    "type": "cursor",
                    "inputs": [
                        {
                            "name": "limit",
                            "in": "parameters",
                            "type": "limit"
                        },
                        {
                            "name": "cursor",
                            "in": "parameters",
                            "type": "cursor"
                        }
                    ],
                    "outputs": {
                        "nextCursor": "$.pagination_metadata.next_cursor"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "400Error": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DuplicateConstraintViolationError"
                    },
                    {
                        "$ref": "#/components/schemas/DuplicateResourceCreationError"
                    },
                    {
                        "$ref": "#/components/schemas/RequestValidationError"
                    }
                ],
                "title": "400Error"
            },
            "401Error": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AuthorizationError"
                    }
                ],
                "title": "401Error"
            },
            "404Error": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/FeatureNotAvailableError"
                    },
                    {
                        "$ref": "#/components/schemas/ResourceNotFoundError"
                    },
                    {
                        "$ref": "#/components/schemas/URLNotFound"
                    }
                ],
                "title": "404Error"
            },
            "409Error": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/IdempotencyConflict"
                    },
                    {
                        "$ref": "#/components/schemas/IdempotencyKeyValidationError"
                    },
                    {
                        "$ref": "#/components/schemas/IdempotencyRequestMismatch"
                    }
                ],
                "title": "409Error"
            },
            "413Error": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RequestTooLargeError"
                    },
                    {
                        "$ref": "#/components/schemas/ResourceTooLargeError"
                    }
                ],
                "title": "413Error"
            },
            "429Error": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TooManyRequests"
                    }
                ],
                "title": "429Error"
            },
            "500Error": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServerError"
                    }
                ],
                "title": "500Error"
            },
            "AccountingProvider": {
                "properties": {
                    "provider_type": {
                        "type": "string",
                        "enum": [
                            "quickbooks",
                            "netsuite"
                        ],
                        "title": "Provider Type"
                    },
                    "external_provider_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Provider Id"
                    }
                },
                "type": "object",
                "required": [
                    "provider_type",
                    "external_provider_id"
                ],
                "title": "AccountingProvider"
            },
            "AccountingProviderConfig": {
                "properties": {
                    "provider_type": {
                        "type": "string",
                        "title": "Provider Type"
                    },
                    "external_provider_id": {
                        "type": "string",
                        "title": "External Provider Id"
                    }
                },
                "type": "object",
                "required": [
                    "provider_type",
                    "external_provider_id"
                ],
                "title": "AccountingProviderConfig"
            },
            "AccountingSyncConfiguration": {
                "properties": {
                    "excluded": {
                        "type": "boolean",
                        "title": "Excluded"
                    },
                    "accounting_providers": {
                        "items": {
                            "$ref": "#/components/schemas/AccountingProvider"
                        },
                        "type": "array",
                        "title": "Accounting Providers"
                    }
                },
                "type": "object",
                "required": [
                    "excluded",
                    "accounting_providers"
                ],
                "title": "AccountingSyncConfiguration"
            },
            "AddAmendmentCreditLedgerEntryRequestParams": {
                "properties": {
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional metadata that can be specified when adding ledger results via the API. For example, this can be used to note an increment refers to trial credits, or for noting corrections as a result of an incident, etc."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User-specified key/value pairs for the ledger entry resource."
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "amendment"
                        ],
                        "title": "Entry Type"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount",
                        "description": "The number of credits to effect. Note that this is required for increment, decrement or void operations."
                    },
                    "block_id": {
                        "type": "string",
                        "title": "Block Id",
                        "description": "The ID of the block to reverse a decrement from."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "entry_type",
                    "amount",
                    "block_id"
                ],
                "title": "AddAmendmentCreditLedgerEntryRequestParams"
            },
            "AddCreditLedgerEntryRequestParams": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AddIncrementCreditLedgerEntryRequestParams"
                    },
                    {
                        "$ref": "#/components/schemas/AddDecrementCreditLedgerEntryRequestParams"
                    },
                    {
                        "$ref": "#/components/schemas/AddExpirationChangeCreditLedgerEntryRequestParams"
                    },
                    {
                        "$ref": "#/components/schemas/AddVoidCreditLedgerEntryRequestParams"
                    },
                    {
                        "$ref": "#/components/schemas/AddAmendmentCreditLedgerEntryRequestParams"
                    }
                ],
                "title": "AddCreditLedgerEntryRequestParams",
                "discriminator": {
                    "propertyName": "entry_type",
                    "mapping": {
                        "amendment": "#/components/schemas/AddAmendmentCreditLedgerEntryRequestParams",
                        "decrement": "#/components/schemas/AddDecrementCreditLedgerEntryRequestParams",
                        "expiration_change": "#/components/schemas/AddExpirationChangeCreditLedgerEntryRequestParams",
                        "increment": "#/components/schemas/AddIncrementCreditLedgerEntryRequestParams",
                        "void": "#/components/schemas/AddVoidCreditLedgerEntryRequestParams"
                    }
                }
            },
            "AddDecrementCreditLedgerEntryRequestParams": {
                "properties": {
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional metadata that can be specified when adding ledger results via the API. For example, this can be used to note an increment refers to trial credits, or for noting corrections as a result of an incident, etc."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User-specified key/value pairs for the ledger entry resource."
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "decrement"
                        ],
                        "title": "Entry Type"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount",
                        "description": "The number of credits to effect. Note that this is required for increment, decrement, void, or undo operations."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "entry_type",
                    "amount"
                ],
                "title": "AddDecrementCreditLedgerEntryRequestParams"
            },
            "AddEditPriceIntervalParams": {
                "properties": {
                    "add": {
                        "items": {
                            "$ref": "#/components/schemas/AddPriceIntervalParams"
                        },
                        "type": "array",
                        "title": "Add",
                        "description": "A list of price intervals to add to the subscription."
                    },
                    "edit": {
                        "items": {
                            "$ref": "#/components/schemas/EditPriceIntervalParams"
                        },
                        "type": "array",
                        "title": "Edit",
                        "description": "A list of price intervals to edit on the subscription."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "AddEditPriceIntervalParams"
            },
            "AddExpirationChangeCreditLedgerEntryRequestParams": {
                "properties": {
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional metadata that can be specified when adding ledger results via the API. For example, this can be used to note an increment refers to trial credits, or for noting corrections as a result of an incident, etc."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User-specified key/value pairs for the ledger entry resource."
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "expiration_change"
                        ],
                        "title": "Entry Type"
                    },
                    "amount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Amount",
                        "description": "The number of credits to effect. Note that this is required for increment, decrement, void, or undo operations."
                    },
                    "expiry_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiry Date",
                        "description": "A future date (specified in YYYY-MM-DD format) that identifies the origination credit block to expire"
                    },
                    "block_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Block Id",
                        "description": "The ID of the block affected by an expiration_change, used to differentiate between multiple blocks with the same `expiry_date`."
                    },
                    "target_expiry_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Target Expiry Date",
                        "description": "A future date (specified in YYYY-MM-DD format) used for expiration change, denoting when credits transferred (as part of a partial block expiration) should expire."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "entry_type",
                    "expiry_date",
                    "target_expiry_date"
                ],
                "title": "AddExpirationChangeCreditLedgerEntryRequestParams"
            },
            "AddIncrementCreditLedgerEntryRequestParams": {
                "properties": {
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional metadata that can be specified when adding ledger results via the API. For example, this can be used to note an increment refers to trial credits, or for noting corrections as a result of an incident, etc."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User-specified key/value pairs for the ledger entry resource."
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "increment"
                        ],
                        "title": "Entry Type"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount",
                        "description": "The number of credits to effect. Note that this is required for increment, decrement, void, or undo operations."
                    },
                    "expiry_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiry Date",
                        "description": "A future date (specified in YYYY-MM-DD format) that denotes when this credit balance should expire."
                    },
                    "effective_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Effective Date",
                        "description": "A future date (specified in YYYY-MM-DD format) that denotes when this credit balance should become available for use."
                    },
                    "per_unit_cost_basis": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Cost Basis",
                        "description": "Can only be specified when entry_type=increment. How much, in USD, a customer paid for a single credit in this block"
                    },
                    "invoice_settings": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/IncrementCreditLedgerEntryInvoiceSettings"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Passing `invoice_settings` automatically generates an invoice for the newly added credits. If `invoice_settings` is passed, you must specify per_unit_cost_basis, as the calculation of the invoice total is done on that basis."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "entry_type",
                    "amount"
                ],
                "title": "AddIncrementCreditLedgerEntryRequestParams"
            },
            "AddPriceIntervalParams": {
                "properties": {
                    "price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price Id",
                        "description": "The id of the price to add to the subscription.",
                        "example": "h74gfhdjvn7ujokd"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "The external price id of the price to add to the subscription.",
                        "example": "external_price_id"
                    },
                    "price": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NewFloatingPrice"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The definition of a new price to create and add to the subscription."
                    },
                    "start_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "start_of_term",
                                    "end_of_term"
                                ]
                            }
                        ],
                        "title": "Start Date",
                        "description": "The start date of the price interval. This is the date that the price will start billing on the subscription.",
                        "example": "2023-05-01"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "start_of_term",
                                            "end_of_term"
                                        ]
                                    }
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the price interval. This is the date that the price will stop billing on the subscription.",
                        "example": "2023-07-10"
                    },
                    "fixed_fee_quantity_transitions": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/PriceIntervalFixedFeeQuantityTransitionParams"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Fee Quantity Transitions",
                        "description": "A list of fixed fee quantity transitions to initialize on the price interval."
                    },
                    "discounts": {
                        "oneOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/AmountDiscountCreationParams"
                                        },
                                        {
                                            "$ref": "#/components/schemas/PercentageDiscountCreationParams"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UsageDiscountCreationParams"
                                        }
                                    ],
                                    "discriminator": {
                                        "propertyName": "discount_type",
                                        "mapping": {
                                            "amount": "#/components/schemas/AmountDiscountCreationParams",
                                            "percentage": "#/components/schemas/PercentageDiscountCreationParams",
                                            "usage": "#/components/schemas/UsageDiscountCreationParams"
                                        }
                                    }
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Discounts",
                        "description": "A list of discounts to initialize on the price interval."
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The minimum amount that will be billed for this price interval for a given billing period.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The maximum amount that will be billed for this price interval for a given billing period.",
                        "example": "1.23"
                    }
                },
                "type": "object",
                "required": [
                    "start_date"
                ],
                "title": "AddPriceIntervalParams"
            },
            "AddVoidCreditLedgerEntryRequestParams": {
                "properties": {
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Optional metadata that can be specified when adding ledger results via the API. For example, this can be used to note an increment refers to trial credits, or for noting corrections as a result of an incident, etc."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User-specified key/value pairs for the ledger entry resource."
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "void"
                        ],
                        "title": "Entry Type"
                    },
                    "block_id": {
                        "type": "string",
                        "title": "Block Id",
                        "description": "The ID of the block to void."
                    },
                    "void_reason": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "refund"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Void Reason",
                        "description": "Can only be specified when `entry_type=void`. The reason for the void."
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount",
                        "description": "The number of credits to effect. Note that this is required for increment, decrement, void, or undo operations."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "entry_type",
                    "block_id",
                    "amount"
                ],
                "title": "AddVoidCreditLedgerEntryRequestParams"
            },
            "Address": {
                "properties": {
                    "line1": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Line1"
                    },
                    "line2": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Line2"
                    },
                    "city": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "City"
                    },
                    "state": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "State"
                    },
                    "postal_code": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Postal Code"
                    },
                    "country": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Country"
                    }
                },
                "type": "object",
                "required": [
                    "line1",
                    "line2",
                    "city",
                    "state",
                    "postal_code",
                    "country"
                ],
                "title": "Address"
            },
            "AddressInput": {
                "properties": {
                    "line1": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Line1"
                    },
                    "line2": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Line2"
                    },
                    "city": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "City"
                    },
                    "state": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "State"
                    },
                    "postal_code": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Postal Code"
                    },
                    "country": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Country"
                    }
                },
                "type": "object",
                "title": "AddressInput"
            },
            "AffectedBlock": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "expiry_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiry Date"
                    },
                    "per_unit_cost_basis": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Cost Basis"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "expiry_date",
                    "per_unit_cost_basis"
                ],
                "title": "AffectedBlock"
            },
            "AggregatedCost": {
                "properties": {
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "Total costs for the timeframe, excluding any minimums and discounts."
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "Total costs for the timeframe, including any minimums and discounts."
                    },
                    "timeframe_start": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe Start"
                    },
                    "timeframe_end": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe End"
                    },
                    "per_price_costs": {
                        "items": {
                            "$ref": "#/components/schemas/PerPriceCost"
                        },
                        "type": "array",
                        "title": "Per Price Costs"
                    }
                },
                "type": "object",
                "required": [
                    "subtotal",
                    "total",
                    "timeframe_start",
                    "timeframe_end",
                    "per_price_costs"
                ],
                "title": "AggregatedCost"
            },
            "AmendEventResult": {
                "properties": {
                    "amended": {
                        "type": "string",
                        "title": "Amended",
                        "description": "event_id of the amended event, if successfully ingested"
                    }
                },
                "type": "object",
                "required": [
                    "amended"
                ],
                "title": "AmendEventResult"
            },
            "AmendedEvent": {
                "properties": {
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The Orb Customer identifier"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An alias for the Orb customer, whose mapping is specified when creating the customer"
                    },
                    "event_name": {
                        "type": "string",
                        "title": "Event Name",
                        "description": "A name to meaningfully identify the action or event type."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.",
                        "example": "2020-12-09T16:09:53Z"
                    },
                    "properties": {
                        "type": "object",
                        "title": "Properties",
                        "description": "A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "event_name",
                    "timestamp",
                    "properties"
                ],
                "title": "AmendedEvent"
            },
            "AmendedUsage": {
                "properties": {
                    "duplicate": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Duplicate",
                        "description": "An array of strings, corresponding to idempotency_key's marked as duplicates (previously ingested)"
                    },
                    "ingested": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Ingested",
                        "description": "An array of strings, corresponding to idempotency_key's which were successfully ingested."
                    }
                },
                "type": "object",
                "required": [
                    "duplicate",
                    "ingested"
                ],
                "title": "AmendedUsage"
            },
            "AmendmentLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "amendment"
                        ],
                        "title": "Entry Type"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type"
                ],
                "title": "AmendmentLedgerEntry"
            },
            "AmountDiscount": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "amount"
                        ],
                        "title": "Discount Type"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this discount applies to. For plan/plan phase discounts, this can be a subset of prices.",
                        "example": [
                            "h74gfhdjvn7ujokd",
                            "7hfgtgjnbvc3ujkl"
                        ]
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "amount_discount": {
                        "type": "string",
                        "title": "Amount Discount",
                        "description": "Only available if discount_type is `amount`."
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "applies_to_price_ids",
                    "amount_discount"
                ],
                "title": "AmountDiscount"
            },
            "AmountDiscountCreationParams": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "amount"
                        ],
                        "title": "Discount Type"
                    },
                    "amount_discount": {
                        "type": "number",
                        "minimum": 0.0,
                        "title": "Amount Discount",
                        "description": "Only available if discount_type is `amount`.",
                        "example": "10.00"
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "amount_discount"
                ],
                "title": "AmountDiscountCreationParams"
            },
            "AmountDiscountInterval": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "amount"
                        ],
                        "title": "Discount Type"
                    },
                    "amount_discount": {
                        "type": "string",
                        "title": "Amount Discount",
                        "description": "Only available if discount_type is `amount`."
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the discount interval."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the discount interval."
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "The price ids that this discount interval applies to."
                    },
                    "applies_to_price_interval_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Interval Ids",
                        "description": "The price interval ids that this discount interval applies to."
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "amount_discount",
                    "start_date",
                    "end_date",
                    "applies_to_price_ids",
                    "applies_to_price_interval_ids"
                ],
                "title": "AmountDiscountInterval"
            },
            "AuthorizationError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#401-authentication-error"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            401
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "AuthorizationError"
            },
            "AutoCollection": {
                "properties": {
                    "next_attempt_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Next Attempt At",
                        "description": "If the invoice is scheduled for auto-collection, this field will reflect when the next attempt will occur. If dunning has been exhausted, or auto-collection is not enabled for this invoice, this field will be `null`."
                    },
                    "previously_attempted_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Previously Attempted At",
                        "description": "If Orb has ever attempted payment auto-collection for this invoice, this field will reflect when that attempt occurred. In conjunction with `next_attempt_at`, this can be used to tell whether the invoice is currently in dunning (that is, `previously_attempted_at` is non-null, and `next_attempt_time` is non-null), or if dunning has been exhausted (`previously_attempted_at` is non-null, but `next_attempt_time` is null)."
                    },
                    "enabled": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Enabled",
                        "description": "True only if auto-collection is enabled for this invoice."
                    }
                },
                "type": "object",
                "required": [
                    "next_attempt_at",
                    "previously_attempted_at",
                    "enabled"
                ],
                "title": "AutoCollection"
            },
            "Backfill": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackfillStatus"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "timeframe_start": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe Start"
                    },
                    "timeframe_end": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe End"
                    },
                    "close_time": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Close Time",
                        "description": "If in the future, the time at which the backfill will automatically close. If in the past, the time at which the backfill was closed."
                    },
                    "reverted_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reverted At",
                        "description": "The time at which this backfill was reverted."
                    },
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The customer ID this backfill is scoped to. If null, this backfill is not scoped to a single customer."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "status",
                    "created_at",
                    "timeframe_start",
                    "timeframe_end",
                    "close_time",
                    "reverted_at",
                    "customer_id"
                ],
                "title": "Backfill",
                "description": "A backfill represents an update to historical usage data, adding or replacing events in a timeframe."
            },
            "BackfillStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "reflected",
                    "pending_revert",
                    "reverted"
                ],
                "title": "BackfillStatus",
                "description": "The status of the backfill."
            },
            "Backfills": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Backfill"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Backfills"
            },
            "BillableMetric": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "draft",
                            "archived"
                        ],
                        "title": "Status"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "item": {
                        "$ref": "#/components/schemas/Item"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "status",
                    "metadata",
                    "item"
                ],
                "title": "BillableMetric",
                "description": "The Metric resource represents a calculation of a quantity based on events.\nMetrics are defined by the query that transforms raw usage events into meaningful values for your customers."
            },
            "BillableMetricSimple": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "title": "BillableMetricSimple"
            },
            "BillableMetricTiny": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "BillableMetricTiny"
            },
            "BillableMetrics": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BillableMetric"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "BillableMetrics"
            },
            "BillingCycleAlignment": {
                "type": "string",
                "enum": [
                    "unchanged",
                    "plan_change_date",
                    "start_of_month"
                ],
                "title": "BillingCycleAlignment"
            },
            "BpsConfig": {
                "properties": {
                    "bps": {
                        "type": "number",
                        "title": "Bps",
                        "description": "Basis point take rate per event"
                    },
                    "per_unit_maximum": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Maximum",
                        "description": "Optional currency amount maximum to cap spend per event"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "bps"
                ],
                "title": "BpsConfig"
            },
            "BpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bps"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "bps_config": {
                        "$ref": "#/components/schemas/BpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "bps_config"
                ],
                "title": "BpsPrice"
            },
            "BpsTier": {
                "properties": {
                    "minimum_amount": {
                        "type": "string",
                        "title": "Minimum Amount",
                        "description": "Inclusive tier starting value"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "Exclusive tier ending value"
                    },
                    "bps": {
                        "type": "number",
                        "title": "Bps",
                        "description": "Per-event basis point rate"
                    },
                    "per_unit_maximum": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Maximum",
                        "description": "Per unit maximum to charge"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "minimum_amount",
                    "bps"
                ],
                "title": "BpsTier"
            },
            "BulkBpsConfig": {
                "properties": {
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/BulkBpsTier"
                        },
                        "type": "array",
                        "title": "Tiers",
                        "description": "Tiers for a bulk BPS pricing model where all usage is aggregated to a single tier based on total volume"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "tiers"
                ],
                "title": "BulkBpsConfig"
            },
            "BulkBpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk_bps"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "bulk_bps_config": {
                        "$ref": "#/components/schemas/BulkBpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "bulk_bps_config"
                ],
                "title": "BulkBpsPrice"
            },
            "BulkBpsTier": {
                "properties": {
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "Upper bound for tier"
                    },
                    "bps": {
                        "type": "number",
                        "title": "Bps",
                        "description": "Basis points to rate on"
                    },
                    "per_unit_maximum": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Maximum",
                        "description": "The maximum amount to charge for any one event"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "bps"
                ],
                "title": "BulkBpsTier"
            },
            "BulkConfig": {
                "properties": {
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/BulkTier"
                        },
                        "type": "array",
                        "title": "Tiers",
                        "description": "Bulk tiers for rating based on total usage volume"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "tiers"
                ],
                "title": "BulkConfig"
            },
            "BulkPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "bulk_config": {
                        "$ref": "#/components/schemas/BulkConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "bulk_config"
                ],
                "title": "BulkPrice"
            },
            "BulkTier": {
                "properties": {
                    "maximum_units": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Units",
                        "description": "Upper bound for this tier"
                    },
                    "unit_amount": {
                        "type": "string",
                        "title": "Unit Amount",
                        "description": "Amount per unit"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "unit_amount"
                ],
                "title": "BulkTier"
            },
            "CancelSubscriptionParams": {
                "properties": {
                    "cancel_option": {
                        "type": "string",
                        "enum": [
                            "end_of_subscription_term",
                            "immediate",
                            "requested_date"
                        ],
                        "title": "Cancel Option",
                        "description": "Determines the timing of subscription cancellation"
                    },
                    "cancellation_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cancellation Date",
                        "description": "The date that the cancellation should take effect. This parameter can only be passed if the `cancel_option` is `requested_date`."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "cancel_option"
                ],
                "title": "CancelSubscriptionParams"
            },
            "ChangeOption": {
                "type": "string",
                "enum": [
                    "requested_date",
                    "end_of_subscription_term",
                    "immediate"
                ],
                "title": "ChangeOption"
            },
            "Coupon": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "Also referred to as coupon_id in this documentation.",
                        "example": "7iz2yanVjQoBZhyH"
                    },
                    "redemption_code": {
                        "type": "string",
                        "title": "Redemption Code",
                        "description": "This string can be used to redeem this coupon for a given subscription.",
                        "example": "HALFOFF"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PercentageDiscount"
                            },
                            {
                                "$ref": "#/components/schemas/AmountDiscount"
                            }
                        ],
                        "title": "Discount",
                        "discriminator": {
                            "propertyName": "discount_type",
                            "mapping": {
                                "amount": "#/components/schemas/AmountDiscount",
                                "percentage": "#/components/schemas/PercentageDiscount"
                            }
                        }
                    },
                    "times_redeemed": {
                        "type": "integer",
                        "title": "Times Redeemed",
                        "description": "The number of times this coupon has been redeemed."
                    },
                    "duration_in_months": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Duration In Months",
                        "description": "This allows for a coupon's discount to apply for a limited time (determined in months); a `null` value here means \"unlimited time\".",
                        "example": 12
                    },
                    "max_redemptions": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Redemptions",
                        "description": "The maximum number of redemptions allowed for this coupon before it is exhausted; `null` here means \"unlimited\"."
                    },
                    "archived_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Archived At",
                        "description": "An archived coupon can no longer be redeemed. Active coupons will have a value of null for `archived_at`; this field will be non-null for archived coupons."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "redemption_code",
                    "discount",
                    "times_redeemed",
                    "duration_in_months",
                    "max_redemptions",
                    "archived_at"
                ],
                "title": "Coupon",
                "description": "A coupon represents a reusable discount configuration, and have an attached redemption code that can be issued to\nyour end users. Coupons are most often used in self-serve signup or upgrade flows in your checkout experience or\nbilling portal.\n\nTo redeem a coupon, pass the `redemption_code` property in the [create subscription](create-subscription.api.mdx)\nor [schedule plan change](schedule-plan-change.api.mdx) request."
            },
            "CouponRedemption": {
                "properties": {
                    "coupon_id": {
                        "type": "string",
                        "title": "Coupon Id"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    }
                },
                "type": "object",
                "required": [
                    "coupon_id",
                    "start_date",
                    "end_date"
                ],
                "title": "CouponRedemption"
            },
            "Coupons": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Coupon"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Coupons"
            },
            "CreateInvoiceLineItemParams": {
                "properties": {
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date",
                        "description": "A date string to specify the line item's start date in the customer's timezone.",
                        "example": "2023-09-22"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date",
                        "description": "A date string to specify the line item's end date in the customer's timezone.",
                        "example": "2023-09-22"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "description": "The number of units on the line item",
                        "example": 1
                    },
                    "invoice_id": {
                        "type": "string",
                        "title": "Invoice Id",
                        "description": "The id of the Invoice to add this line item.",
                        "example": "4khy3nwzktxv7"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The item name associated with this line item. If an item with the same name exists in Orb, that item will be associated with the line item.",
                        "example": "Item Name"
                    },
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The total amount in the invoice's currency to add to the line item.",
                        "example": "12.00"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "start_date",
                    "end_date",
                    "quantity",
                    "invoice_id",
                    "name",
                    "amount"
                ],
                "title": "CreateInvoiceLineItemParams"
            },
            "CreateOneOffInvoiceParams": {
                "properties": {
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The id of the `Customer` to create this invoice for. One of `customer_id` and `external_customer_id` are required.",
                        "example": "4khy3nwzktxv7"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "The `external_customer_id` of the `Customer` to create this invoice for. One of `customer_id` and `external_customer_id` are required.",
                        "example": "external-customer-id"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string. Must be the same as the customer's currency if it is set.",
                        "example": "USD"
                    },
                    "memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memo",
                        "description": "An optional memo to attach to the invoice.",
                        "example": "An optional memo for my invoice."
                    },
                    "will_auto_issue": {
                        "type": "boolean",
                        "title": "Will Auto Issue",
                        "description": "When true, this invoice will automatically be issued upon creation. When false, the resulting invoice will require manual review to issue. Defaulted to false.",
                        "default": false,
                        "example": false
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Invoice Date",
                        "description": "Optional invoice date to set. Must be in the past, if not set, `invoice_date` is set to the current time in the customer's timezone.",
                        "example": "2023-09-22"
                    },
                    "net_terms": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Net Terms",
                        "description": "Determines the difference between the invoice issue date for subscription invoices as the date that they are due. A value of '0' here represents that the invoice is due on issue, whereas a value of 30 represents that the customer has 30 days to pay the invoice.",
                        "example": 0
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineItemParams"
                        },
                        "type": "array",
                        "title": "Line Items"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "currency",
                    "invoice_date",
                    "net_terms",
                    "line_items"
                ],
                "title": "CreateOneOffInvoiceParams"
            },
            "CreditBlockExpiryLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "credit_block_expiry"
                        ],
                        "title": "Entry Type"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type"
                ],
                "title": "CreditBlockExpiryLedgerEntry"
            },
            "CreditLedgerEntries": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/CreditLedgerEntry"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "CreditLedgerEntries"
            },
            "CreditLedgerEntry": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/IncrementLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/DecrementLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/ExpirationChangeLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/CreditBlockExpiryLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/VoidLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/VoidInitiatedLedgerEntry"
                    },
                    {
                        "$ref": "#/components/schemas/AmendmentLedgerEntry"
                    }
                ],
                "title": "CreditLedgerEntry",
                "description": "The [Credit Ledger Entry resource](/guides/product-catalog/prepurchase) models prepaid credits within Orb.",
                "discriminator": {
                    "propertyName": "entry_type",
                    "mapping": {
                        "amendment": "#/components/schemas/AmendmentLedgerEntry",
                        "credit_block_expiry": "#/components/schemas/CreditBlockExpiryLedgerEntry",
                        "decrement": "#/components/schemas/DecrementLedgerEntry",
                        "expiration_change": "#/components/schemas/ExpirationChangeLedgerEntry",
                        "increment": "#/components/schemas/IncrementLedgerEntry",
                        "void": "#/components/schemas/VoidLedgerEntry",
                        "void_initiated": "#/components/schemas/VoidInitiatedLedgerEntry"
                    }
                }
            },
            "CreditNote": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The Orb id of this credit note."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "The creation time of the resource in Orb."
                    },
                    "voided_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voided At",
                        "description": "The time at which the credit note was voided in Orb, if applicable."
                    },
                    "credit_note_number": {
                        "type": "string",
                        "title": "Credit Note Number",
                        "description": "The unique identifier for credit notes."
                    },
                    "invoice_id": {
                        "type": "string",
                        "title": "Invoice Id",
                        "description": "The id of the invoice resource that this credit note is applied to."
                    },
                    "memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memo",
                        "description": "An optional memo supplied on the credit note."
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "Duplicate",
                                    "Fraudulent",
                                    "Order change",
                                    "Product unsatisfactory"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "refund",
                            "adjustment"
                        ],
                        "title": "Type"
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "The total prior to any creditable invoice-level discounts or minimums."
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "The total including creditable invoice-level discounts or minimums, and tax."
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "credit_note_pdf": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Credit Note Pdf",
                        "description": "A URL to a PDF of the credit note."
                    },
                    "minimum_amount_refunded": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount Refunded",
                        "description": "Any credited amount from the applied minimum on the invoice."
                    },
                    "discounts": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteDiscount"
                        },
                        "type": "array",
                        "title": "Discounts",
                        "description": "Any discounts applied on the original invoice."
                    },
                    "maximum_amount_adjustment": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreditNoteDiscount"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The maximum amount applied on the original invoice"
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteLineItem"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "All of the line items associated with this credit note."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "voided_at",
                    "credit_note_number",
                    "invoice_id",
                    "memo",
                    "reason",
                    "type",
                    "subtotal",
                    "total",
                    "customer",
                    "credit_note_pdf",
                    "minimum_amount_refunded",
                    "discounts",
                    "maximum_amount_adjustment",
                    "line_items"
                ],
                "title": "CreditNote",
                "description": "The [Credit Note](/guides/invoicing/credit-notes) resource represents a credit that has been applied to a\nparticular invoice."
            },
            "CreditNoteDiscount": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage"
                        ],
                        "title": "Discount Type"
                    },
                    "percentage_discount": {
                        "type": "number",
                        "title": "Percentage Discount"
                    },
                    "amount_applied": {
                        "type": "string",
                        "title": "Amount Applied"
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "applies_to_prices": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/CreditNoteDiscountAppliesToPrice"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Applies To Prices"
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "percentage_discount",
                    "amount_applied"
                ],
                "title": "CreditNoteDiscount"
            },
            "CreditNoteDiscountAppliesToPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "title": "CreditNoteDiscountAppliesToPrice"
            },
            "CreditNoteLineItem": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The Orb id of this resource."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the corresponding invoice line item."
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "The amount of the line item, excluding any line item minimums and discounts."
                    },
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The amount of the line item, including any line item minimums and discounts."
                    },
                    "quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Quantity",
                        "description": "An optional quantity credited."
                    },
                    "discounts": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteLineItemDiscount"
                        },
                        "type": "array",
                        "title": "Discounts",
                        "description": "Any line items discounts from the invoice's line item."
                    },
                    "tax_amounts": {
                        "items": {
                            "$ref": "#/components/schemas/TaxAmount"
                        },
                        "type": "array",
                        "title": "Tax Amounts",
                        "description": "Any tax amounts applied onto the line item."
                    },
                    "sub_line_items": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteSubLineItem"
                        },
                        "type": "array",
                        "title": "Sub Line Items",
                        "description": "Any sub line items that may be credited."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "subtotal",
                    "amount",
                    "quantity",
                    "discounts",
                    "tax_amounts",
                    "sub_line_items"
                ],
                "title": "CreditNoteLineItem"
            },
            "CreditNoteLineItemDiscount": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage",
                            "amount"
                        ],
                        "title": "Discount Type"
                    },
                    "percentage_discount": {
                        "type": "number",
                        "title": "Percentage Discount"
                    },
                    "amount_discount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Amount Discount"
                    },
                    "amount_applied": {
                        "type": "string",
                        "title": "Amount Applied"
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "discount_type",
                    "percentage_discount",
                    "amount_applied",
                    "applies_to_price_ids"
                ],
                "title": "CreditNoteLineItemDiscount"
            },
            "CreditNoteMinified": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The id of the Credit note"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "CreditNoteMinified"
            },
            "CreditNoteSubLineItem": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Quantity"
                    },
                    "amount": {
                        "type": "string",
                        "title": "Amount"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "quantity",
                    "amount"
                ],
                "title": "CreditNoteSubLineItem"
            },
            "CreditNoteSummary": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "credit_note_number": {
                        "type": "string",
                        "title": "Credit Note Number"
                    },
                    "reason": {
                        "type": "string",
                        "title": "Reason"
                    },
                    "total": {
                        "type": "string",
                        "title": "Total"
                    },
                    "voided_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voided At",
                        "description": "If the credit note has a status of `void`, this gives a timestamp when the credit note was voided.",
                        "example": "2022-05-01T07:01:31+00:00"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "credit_note_number",
                    "reason",
                    "total",
                    "voided_at",
                    "type"
                ],
                "title": "CreditNoteSummary"
            },
            "CreditNotes": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNote"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "CreditNotes"
            },
            "CustomRatingFunctionConfig": {
                "properties": {},
                "additionalProperties": true,
                "type": "object",
                "title": "CustomRatingFunctionConfig"
            },
            "Customer": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An optional user-defined ID for this customer resource, used throughout the system as an alias for this Customer. Use this field to identify a customer by an existing identifier in your system."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The full name of the customer"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "A valid customer email, to be used for notifications. When Orb triggers payment through a payment gateway, this email will be used for any automatically issued receipts."
                    },
                    "timezone": {
                        "type": "string",
                        "title": "Timezone",
                        "description": "A timezone identifier from the IANA timezone database, such as \"America/Los_Angeles\". This \"defaults to your account's timezone if not set. This cannot be changed after customer creation."
                    },
                    "payment_provider_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider Id",
                        "description": "The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb."
                    },
                    "payment_provider": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "quickbooks",
                                    "bill.com",
                                    "stripe_charge",
                                    "stripe_invoice",
                                    "netsuite"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider",
                        "description": "This is used for creating charges or invoices in an external system via Orb. When not in test mode, the connection must first be configured in the Orb webapp."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "shipping_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "balance": {
                        "type": "string",
                        "title": "Balance",
                        "description": "The customer's current balance in their currency."
                    },
                    "currency": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Currency"
                    },
                    "tax_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CustomerTaxId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "auto_collection": {
                        "type": "boolean",
                        "title": "Auto Collection"
                    },
                    "email_delivery": {
                        "type": "boolean",
                        "title": "Email Delivery"
                    },
                    "additional_emails": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Additional Emails"
                    },
                    "portal_url": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Portal Url"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "accounting_sync_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AccountingSyncConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "reporting_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ReportingConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "external_customer_id",
                    "name",
                    "email",
                    "timezone",
                    "payment_provider_id",
                    "payment_provider",
                    "created_at",
                    "shipping_address",
                    "billing_address",
                    "balance",
                    "currency",
                    "tax_id",
                    "auto_collection",
                    "email_delivery",
                    "additional_emails",
                    "portal_url",
                    "metadata"
                ],
                "title": "Customer",
                "description": "A customer is a buyer of your products, and the other party to the billing relationship.\n\nIn Orb, customers are assigned system generated identifiers automatically, but it's often desirable to have these\nmatch existing identifiers in your system. To avoid having to denormalize Orb ID information, you can pass in an\n`external_customer_id` with your own identifier. See\n[Customer ID Aliases](../guides/events-and-metrics/customer-aliases) for further information about how these\naliases work in Orb.\n\nIn addition to having an identifier in your system, a customer may exist in a payment provider solution like\nStripe. Use the `payment_provider_id` and the `payment_provider` enum field to express this mapping.\n\nA customer also has a timezone (from the standard [IANA timezone database](https://www.iana.org/time-zones)), which\ndefaults to your account's timezone. See [Timezone localization](../guides/product-catalog/timezones.md) for\ninformation on what this timezone parameter influences within Orb."
            },
            "CustomerBalanceTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "A unique id for this transaction.",
                        "example": "cgZa3SXcsPTVyC4Y"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "The creation time of this transaction.",
                        "example": "2022-05-01T07:01:31+00:00"
                    },
                    "starting_balance": {
                        "type": "string",
                        "title": "Starting Balance",
                        "description": "The original value of the customer's balance prior to the transaction, in the customer's currency.",
                        "example": "33.00"
                    },
                    "ending_balance": {
                        "type": "string",
                        "title": "Ending Balance",
                        "description": "The new value of the customer's balance prior to the transaction, in the customer's currency.",
                        "example": "22.00"
                    },
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The value of the amount changed in the transaction.",
                        "example": "11.00"
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "applied_to_invoice",
                            "manual_adjustment",
                            "prorated_refund",
                            "revert_prorated_refund",
                            "return_from_voiding",
                            "credit_note_applied",
                            "credit_note_voided",
                            "overpayment_refund"
                        ],
                        "title": "Action"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "An optional description provided for manual customer balance adjustments.",
                        "example": "An optional description"
                    },
                    "invoice": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/InvoiceMinified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "increment",
                            "decrement"
                        ],
                        "title": "Type"
                    },
                    "credit_note": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreditNoteMinified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "action",
                    "description",
                    "invoice",
                    "type",
                    "credit_note"
                ],
                "title": "CustomerBalanceTransaction"
            },
            "CustomerBalanceTransactions": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/CustomerBalanceTransaction"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "CustomerBalanceTransactions"
            },
            "CustomerCosts": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/AggregatedCost"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "CustomerCosts"
            },
            "CustomerCreditBalance": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "balance": {
                        "type": "number",
                        "title": "Balance"
                    },
                    "expiry_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiry Date"
                    },
                    "per_unit_cost_basis": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Unit Cost Basis"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "balance",
                    "expiry_date",
                    "per_unit_cost_basis"
                ],
                "title": "CustomerCreditBalance"
            },
            "CustomerCreditBalances": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/CustomerCreditBalance"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "CustomerCreditBalances"
            },
            "CustomerMinified": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "external_customer_id"
                ],
                "title": "CustomerMinified"
            },
            "CustomerTaxId": {
                "properties": {
                    "country": {
                        "type": "string",
                        "enum": [
                            "AE",
                            "AT",
                            "AU",
                            "BE",
                            "BG",
                            "BR",
                            "CA",
                            "CH",
                            "CL",
                            "CY",
                            "CZ",
                            "DE",
                            "DK",
                            "EE",
                            "EG",
                            "ES",
                            "EU",
                            "FI",
                            "FR",
                            "GB",
                            "GE",
                            "GR",
                            "HK",
                            "HR",
                            "HU",
                            "ID",
                            "IE",
                            "IL",
                            "IN",
                            "IS",
                            "IT",
                            "JP",
                            "KE",
                            "KR",
                            "LI",
                            "LT",
                            "LU",
                            "LV",
                            "MT",
                            "MX",
                            "MY",
                            "NL",
                            "NO",
                            "NZ",
                            "PH",
                            "PL",
                            "PT",
                            "RO",
                            "RU",
                            "SA",
                            "SE",
                            "SG",
                            "SI",
                            "SK",
                            "TH",
                            "TR",
                            "TW",
                            "UA",
                            "US",
                            "ZA"
                        ],
                        "title": "Country"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "ae_trn",
                            "eu_vat",
                            "au_abn",
                            "au_arn",
                            "bg_uic",
                            "br_cnpj",
                            "br_cpf",
                            "ca_bn",
                            "ca_gst_hst",
                            "ca_pst_bc",
                            "ca_pst_mb",
                            "ca_pst_sk",
                            "ca_qst",
                            "ch_vat",
                            "cl_tin",
                            "eg_tin",
                            "es_cif",
                            "eu_oss_vat",
                            "gb_vat",
                            "ge_vat",
                            "hk_br",
                            "hu_tin",
                            "id_npwp",
                            "il_vat",
                            "in_gst",
                            "is_vat",
                            "jp_cn",
                            "jp_rn",
                            "jp_trn",
                            "ke_pin",
                            "kr_brn",
                            "li_uid",
                            "mx_rfc",
                            "my_frp",
                            "my_itn",
                            "my_sst",
                            "no_vat",
                            "nz_gst",
                            "ph_tin",
                            "ru_inn",
                            "ru_kpp",
                            "sa_vat",
                            "sg_gst",
                            "sg_uen",
                            "si_tin",
                            "th_vat",
                            "tr_tin",
                            "tw_vat",
                            "ua_vat",
                            "us_ein",
                            "za_vat"
                        ],
                        "title": "Type"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value"
                    }
                },
                "type": "object",
                "required": [
                    "country",
                    "type",
                    "value"
                ],
                "title": "CustomerTaxId",
                "description": "Tax IDs are commonly required to be displayed on customer invoices, which are added to the headers of invoices.\n\n\n### Supported Tax ID Countries and Types\n\n\n| Country        | Type         | Description                                 |\n|----------------|--------------|---------------------------------------------|\n| Australia      | `au_abn`     | Australian Business Number (AU ABN)               |\n| Australia      | `au_arn`     | Australian Taxation Office Reference Number |\n| Austria        | `eu_vat`     | European VAT number                         |\n| Belgium        | `eu_vat`     | European VAT number                         |\n| Brazil         | `br_cnpj`    | Brazilian CNPJ number                       |\n| Brazil         | `br_cpf`     | Brazilian CPF number                             |\n| Bulgaria       | `bg_uic`     | Bulgaria Unified Identification Code        |\n| Bulgaria       | `eu_vat`     | European VAT number                         |\n| Canada         | `ca_bn`      | Canadian BN                                 |\n| Canada         | `ca_gst_hst` | Canadian GST/HST number                     |\n| Canada         | `ca_pst_bc`  | Canadian PST number (British Columbia)      |\n| Canada         | `ca_pst_mb`  | Canadian PST number (Manitoba)              |\n| Canada         | `ca_pst_sk`  | Canadian PST number (Saskatchewan)          |\n| Canada         | `ca_qst`     | Canadian QST number (Qu\u00e9bec)                |\n| Chile          | `cl_tin`     | Chilean TIN                                 |\n| Croatia        | `eu_vat`     | European VAT number                         |\n| Cyprus         | `eu_vat`     | European VAT number                         |\n| Czech Republic | `eu_vat`     | European VAT number                         |\n| Denmark        | `eu_vat`     | European VAT number                         |\n| Egypt          | `eg_tin`     | Egyptian Tax Identification Number                 |\n| Estonia   | `eu_vat`     | European VAT number   |\n| EU        | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme |\n| Finland   | `eu_vat`     | European VAT number                                    |\n| France    | `eu_vat`     | European VAT number                                    |\n| Georgia   | `ge_vat`     | Georgian VAT                                           |\n| Germany   | `eu_vat`     | European VAT number                                    |\n| Greece    | `eu_vat`     | European VAT number                                    |\n| Hong Kong | `hk_br`      | Hong Kong BR number                                    |\n| Hungary   | `eu_vat`     | European VAT number                                    |\n| Hungary   | `hu_tin`     | Hungary tax number (ad\u00f3sz\u00e1m)                           |\n| Iceland   | `is_vat`     | Icelandic VAT                                          |\n| India     | `in_gst`     | Indian GST number                                      |\n| Indonesia | `id_npwp`    | Indonesian NPWP number                                 |\n| Ireland   | `eu_vat`     | European VAT number                                    |\n| Israel    | `il_vat`     | Israel VAT                                             |\n| Italy     | `eu_vat`     | European VAT number                                    |\n| Japan     | `jp_cn`      | Japanese Corporate Number (*H\u014djin Bang\u014d*)              |\n| Japan     | `jp_rn`      | Japanese Registered Foreign Businesses' Registration Number (*T\u014droku Kokugai Jigy\u014dsha no T\u014droku Bang\u014d*)         |\n| Japan     | `jp_trn`     | Japanese Tax Registration Number (*T\u014droku Bang\u014d*)          |\n| Kenya     | `ke_pin`     | Kenya Revenue Authority Personal Identification Number |\n| Latvia    | `eu_vat`     | European VAT number                                    |\n| Liechtenstein | `li_uid`  | Liechtensteinian UID number           |\n| Lithuania     | `eu_vat`  | European VAT number                     |\n| Luxembourg    | `eu_vat`  | European VAT number                     |\n| Malaysia      | `my_frp`  | Malaysian FRP number                  |\n| Malaysia      | `my_itn`  | Malaysian ITN                         |\n| Malaysia      | `my_sst`  | Malaysian SST number                  |\n| Malta         | `eu_vat ` | European VAT number                   |\n| Mexico        | `mx_rfc`  | Mexican RFC number                    |\n| Netherlands   | `eu_vat`  | European VAT number                     |\n| New Zealand   | `nz_gst`  | New Zealand GST number                       |\n| Norway        | `no_vat`  | Norwegian VAT number                  |\n| Philippines   | `ph_tin   ` | Philippines Tax Identification Number |\n| Poland        | `eu_vat`  | European VAT number                   |\n| Portugal      | `eu_vat`  | European VAT number                   |\n| Romania       | `eu_vat`  | European VAT number                   |\n| Russia        | `ru_inn`  | Russian INN                           |\n| Russia        | `ru_kpp`  | Russian KPP                           |\n| Saudi Arabia  | `sg_gst`  | Singaporean GST                       |\n| Singapore     | `sg_uen`  | Singaporean UEN                             |\n| Slovakia      | `eu_vat`  | European VAT number                   |\n| Slovenia      | `eu_vat`  | European VAT number                   |\n| Slovenia             | `si_tin` | Slovenia tax number (dav\u010dna \u0161tevilka)                |\n| South Africa              | `za_vat` | South African VAT number                           |\n| South Korea          | `kr_brn` | Korean BRN                                         |\n| Spain                | `es_cif` | Spanish NIF number (previously Spanish CIF number) |\n| Spain                | `eu_vat` | European VAT number                                    |\n| Sweden               | `eu_vat` | European VAT number                                |\n| Switzerland          | `ch_vat` | Switzerland VAT number                              |\n| Taiwan               | `tw_vat` | Taiwanese VAT                                        |\n| Thailand             | `th_vat` | Thai VAT                                           |\n| Turkey               | `tr_tin` | Turkish Tax Identification Number                  |\n| Ukraine              | `ua_vat` | Ukrainian VAT                                      |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN                                  |\n| United Kingdom       | `eu_vat` | Northern Ireland VAT number                        |\n| United Kingdom       | `gb_vat` | United Kingdom VAT number                          |\n| United States        | `us_ein` | United States EIN                                  |"
            },
            "Customers": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Customer"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Customers"
            },
            "Debug": {
                "properties": {
                    "duplicate": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Duplicate"
                    },
                    "ingested": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Ingested"
                    }
                },
                "type": "object",
                "required": [
                    "duplicate",
                    "ingested"
                ],
                "title": "Debug"
            },
            "DecrementLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "decrement"
                        ],
                        "title": "Entry Type"
                    },
                    "price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price Id"
                    },
                    "event_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Event Id"
                    },
                    "invoice_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Id"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type"
                ],
                "title": "DecrementLedgerEntry"
            },
            "DeleteCustomerResponse": {
                "properties": {},
                "type": "object",
                "title": "DeleteCustomerResponse"
            },
            "DeprecatedEventResult": {
                "properties": {
                    "deprecated": {
                        "type": "string",
                        "title": "Deprecated",
                        "description": "event_id of the deprecated event, if successfully updated"
                    }
                },
                "type": "object",
                "required": [
                    "deprecated"
                ],
                "title": "DeprecatedEventResult"
            },
            "Discount": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PercentageDiscount"
                    },
                    {
                        "$ref": "#/components/schemas/TrialDiscount"
                    },
                    {
                        "$ref": "#/components/schemas/UsageDiscount"
                    },
                    {
                        "$ref": "#/components/schemas/AmountDiscount"
                    }
                ],
                "title": "Discount",
                "discriminator": {
                    "propertyName": "discount_type",
                    "mapping": {
                        "amount": "#/components/schemas/AmountDiscount",
                        "percentage": "#/components/schemas/PercentageDiscount",
                        "trial": "#/components/schemas/TrialDiscount",
                        "usage": "#/components/schemas/UsageDiscount"
                    }
                }
            },
            "DiscountOverride": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage",
                            "trial",
                            "usage",
                            "amount"
                        ],
                        "title": "Discount Type"
                    },
                    "percentage_discount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Percentage Discount",
                        "description": "Only available if discount_type is `percentage`. This is a number between 0 and 1.",
                        "example": 0.15
                    },
                    "trial_amount_discount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Trial Amount Discount",
                        "description": "Only available if discount_type is `trial`"
                    },
                    "usage_discount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Usage Discount",
                        "description": "Only available if discount_type is `usage`. Number of usage units that this discount is for"
                    },
                    "amount_discount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Amount Discount",
                        "description": "Only available if discount_type is `amount`."
                    },
                    "applies_to_price_ids": {
                        "oneOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this discount applies to. For plan/plan phase discounts, this can be a subset of prices.",
                        "example": [
                            "h74gfhdjvn7ujokd",
                            "7hfgtgjnbvc3ujkl"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "discount_type"
                ],
                "title": "DiscountOverride"
            },
            "DuplicateConstraintViolationError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#400-duplicate-resource-creation"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            400
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "DuplicateConstraintViolationError"
            },
            "DuplicateResourceCreationError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#400-duplicate-resource-creation"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            400
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "DuplicateResourceCreationError"
            },
            "EditCustomer": {
                "properties": {
                    "name": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name",
                        "description": "The full name of the customer"
                    },
                    "email": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email",
                        "description": "A valid customer email, to be used for invoicing and notifications."
                    },
                    "payment_provider_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider Id",
                        "description": "The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb."
                    },
                    "payment_provider": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "quickbooks",
                                    "bill.com",
                                    "stripe_charge",
                                    "stripe_invoice",
                                    "netsuite"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider",
                        "description": "This is used for creating charges or invoices in an external system via Orb. When not in test mode:\n- the connection must first be configured in the Orb webapp. \n- if the provider is an invoicing provider (`stripe_invoice`, `quickbooks`, `bill.com`, `netsuite`), any product mappings must first be configured with the Orb team."
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An optional user-defined ID for this customer resource, used throughout the system as an alias for this Customer. Use this field to identify a customer by an existing identifier in your system."
                    },
                    "shipping_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "currency": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Currency",
                        "description": "An ISO 4217 currency string used for the customer's invoices and balance. If not set at creation time, will be set at subscription creation time."
                    },
                    "tax_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CustomerTaxId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "auto_collection": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Collection",
                        "description": "Used to determine if invoices for this customer will automatically attempt to charge a saved payment method, if available. This parameter defaults to `True` when a payment provider is provided on customer creation."
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata",
                        "description": "User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the customer resource."
                    },
                    "additional_emails": {
                        "oneOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Additional Emails",
                        "description": "Additional email addresses for this customer. If populated, these email addresses will be CC'd for customer communications."
                    },
                    "email_delivery": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email Delivery"
                    },
                    "reporting_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NewReportingConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "accounting_sync_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NewAccountingSyncConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "EditCustomer"
            },
            "EditPlan": {
                "properties": {
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id",
                        "description": "An optional user-defined ID for this plan resource, used throughout the system as an alias for this Plan. Use this field to identify a plan by an existing identifier in your system."
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "EditPlan"
            },
            "EditPriceIntervalParams": {
                "properties": {
                    "price_interval_id": {
                        "type": "string",
                        "title": "Price Interval Id",
                        "description": "The id of the price interval to edit.",
                        "example": "sdfs6wdjvn7ujokd"
                    },
                    "start_date": {
                        "oneOf": [
                            {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "start_of_term",
                                            "end_of_term"
                                        ]
                                    }
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Start Date",
                        "description": "The updated start date of this price interval. If not specified, the start date will not be updated.",
                        "example": "2023-05-01"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    {
                                        "type": "string",
                                        "enum": [
                                            "start_of_term",
                                            "end_of_term"
                                        ]
                                    }
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The updated end date of this price interval. If not specified, the start date will not be updated.",
                        "example": "2023-07-10"
                    },
                    "fixed_fee_quantity_transitions": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/PriceIntervalFixedFeeQuantityTransitionParams"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Fee Quantity Transitions",
                        "description": "A list of fixed fee quantity transitions to use for this price interval. Note that this list will overwrite all existing fixed fee quantity transitions on the price interval."
                    }
                },
                "type": "object",
                "required": [
                    "price_interval_id"
                ],
                "title": "EditPriceIntervalParams"
            },
            "Event": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "A unique value, generated by the client, that is used to de-duplicate events. Exactly one event with a given idempotency key will be ingested, which allows for safe request retries."
                    },
                    "customer_id": {
                        "type": "string",
                        "title": "Customer Id",
                        "description": "The Orb Customer identifier"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An alias for the Orb customer, whose mapping is specified when creating the customer"
                    },
                    "event_name": {
                        "type": "string",
                        "title": "Event Name",
                        "description": "A name to meaningfully identify the action or event type."
                    },
                    "properties": {
                        "type": "object",
                        "minProperties": 1,
                        "title": "Properties",
                        "description": "A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.",
                        "examples": [
                            "2020-12-09T16:09:53Z"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "customer_id",
                    "external_customer_id",
                    "event_name",
                    "properties",
                    "timestamp"
                ],
                "title": "Event",
                "description": "The [Event](../guides/core-concepts.mdx#event) resource represents a usage event that has been created for a\ncustomer. Events are the core of Orb's usage-based billing model, and are used to calculate the usage charges for\na given billing period."
            },
            "EventSearchCriteria": {
                "properties": {
                    "invoice_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Id",
                        "description": "This is an issued Orb invoice ID (see also List Invoices). Orb will fetch all events that were used to calculate the invoice. In the common case, this will be a list of events whose timestamp property falls within the billing period specified by the invoice."
                    },
                    "event_ids": {
                        "oneOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Event Ids",
                        "description": "This is an explicit array of IDs to filter by. Note that an event's ID is the idempotency_key that was originally used for ingestion. Values in this array will be treated case sensitively."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "EventSearchCriteria"
            },
            "Events": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Events"
            },
            "ExpirationChangeLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "expiration_change"
                        ],
                        "title": "Entry Type"
                    },
                    "new_block_expiry_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "New Block Expiry Date"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type",
                    "new_block_expiry_date"
                ],
                "title": "ExpirationChangeLedgerEntry"
            },
            "FeatureNotAvailableError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#404-feature-not-available"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            400
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "FeatureNotAvailableError"
            },
            "FivetranExamplePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "fivetran_example"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "fivetran_example_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "fivetran_example_config"
                ],
                "title": "FivetranExamplePrice"
            },
            "FixedFeeQuantityChange": {
                "properties": {
                    "price_id": {
                        "type": "string",
                        "title": "Price Id",
                        "description": "Price for which the quantity should be updated. Must be a fixed fee."
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity"
                    },
                    "effective_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Effective Date",
                        "description": "The date that the quantity change should take effect, localized to the customer's timezone. Ifthis parameter is not passed in, the quantity change is effective according to `change_option`.",
                        "example": "2022-12-21"
                    },
                    "change_option": {
                        "type": "string",
                        "enum": [
                            "immediate",
                            "upcoming_invoice",
                            "effective_date"
                        ],
                        "title": "Change Option",
                        "description": "Determines when the change takes effect. Note that if `effective_date` is specified, this defaults to `effective_date`. Otherwise, this defaults to `immediate` unless it's explicitly set to `upcoming_invoice.",
                        "default": "immediate"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "price_id",
                    "quantity"
                ],
                "title": "FixedFeeQuantityChange"
            },
            "FixedFeeQuantityScheduleEntry": {
                "properties": {
                    "price_id": {
                        "type": "string",
                        "title": "Price Id"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity"
                    }
                },
                "type": "object",
                "required": [
                    "price_id",
                    "start_date",
                    "end_date",
                    "quantity"
                ],
                "title": "FixedFeeQuantityScheduleEntry"
            },
            "FixedFeeQuantityTransition": {
                "properties": {
                    "price_id": {
                        "type": "string",
                        "title": "Price Id"
                    },
                    "effective_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Effective Date"
                    },
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity"
                    }
                },
                "type": "object",
                "required": [
                    "price_id",
                    "effective_date",
                    "quantity"
                ],
                "title": "FixedFeeQuantityTransition"
            },
            "GroupedSubscriptionUsage": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/GroupedSubscriptionUsageRecord"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PaginationMetadata"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "GroupedSubscriptionUsage"
            },
            "GroupedSubscriptionUsageRecord": {
                "properties": {
                    "usage": {
                        "items": {
                            "$ref": "#/components/schemas/Usage"
                        },
                        "type": "array",
                        "title": "Usage"
                    },
                    "billable_metric": {
                        "$ref": "#/components/schemas/BillableMetricSimple"
                    },
                    "metric_group": {
                        "$ref": "#/components/schemas/MetricGroup"
                    },
                    "view_mode": {
                        "type": "string",
                        "enum": [
                            "periodic",
                            "cumulative"
                        ],
                        "title": "View Mode"
                    }
                },
                "type": "object",
                "required": [
                    "usage",
                    "billable_metric",
                    "metric_group",
                    "view_mode"
                ],
                "title": "GroupedSubscriptionUsageRecord"
            },
            "IdempotencyConflict": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#409-resource-conflict"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            409
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "IdempotencyConflict"
            },
            "IdempotencyKeyValidationError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#400-request-validation-errors"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            400
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    },
                    "validation_errors": {
                        "items": {},
                        "type": "array",
                        "title": "Validation Errors"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status",
                    "validation_errors"
                ],
                "title": "IdempotencyKeyValidationError"
            },
            "IdempotencyRequestMismatch": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#409-resource-conflict"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            409
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "IdempotencyRequestMismatch"
            },
            "IncrementCreditLedgerEntryInvoiceSettings": {
                "properties": {
                    "auto_collection": {
                        "type": "boolean",
                        "title": "Auto Collection",
                        "description": "Whether the credits purchase invoice should auto collect with the customer's saved payment method."
                    },
                    "net_terms": {
                        "type": "integer",
                        "title": "Net Terms",
                        "description": "The net terms determines the difference between the invoice date and the issue date for the invoice. If you intend the invoice to be due on issue, set this to 0."
                    },
                    "memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memo",
                        "description": "An optional memo to display on the invoice."
                    }
                },
                "type": "object",
                "required": [
                    "auto_collection",
                    "net_terms"
                ],
                "title": "IncrementCreditLedgerEntryInvoiceSettings"
            },
            "IncrementLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "increment"
                        ],
                        "title": "Entry Type"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type"
                ],
                "title": "IncrementLedgerEntry"
            },
            "IngestEvent": {
                "properties": {
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The Orb Customer identifier"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An alias for the Orb customer, whose mapping is specified when creating the customer"
                    },
                    "event_name": {
                        "type": "string",
                        "title": "Event Name",
                        "description": "A name to meaningfully identify the action or event type."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.",
                        "example": "2020-12-09T16:09:53Z"
                    },
                    "properties": {
                        "type": "object",
                        "title": "Properties",
                        "description": "A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed."
                    },
                    "idempotency_key": {
                        "type": "string",
                        "title": "Idempotency Key",
                        "description": "A unique value, generated by the client, that is used to de-duplicate events. Exactly one event with a given idempotency key will be ingested, which allows for safe request retries."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "event_name",
                    "timestamp",
                    "properties",
                    "idempotency_key"
                ],
                "title": "IngestEvent"
            },
            "IngestRequestBody": {
                "properties": {
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/IngestEvent"
                        },
                        "type": "array",
                        "title": "Events"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "events"
                ],
                "title": "IngestRequestBody"
            },
            "IngestionResponse": {
                "properties": {
                    "debug": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Debug"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."
                    },
                    "validation_failed": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Validation Failed",
                        "description": "Contains all failing validation events. In the case of a 200, this array will always be empty. This field will always be present."
                    }
                },
                "type": "object",
                "required": [
                    "validation_failed"
                ],
                "title": "IngestionResponse"
            },
            "Invoice": {
                "properties": {
                    "amount_due": {
                        "type": "string",
                        "title": "Amount Due",
                        "description": "This is the final amount required to be charged to the customer and reflects the application of the customer balance to the `total` of the invoice.",
                        "example": "8.00"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "The creation time of the resource in Orb.",
                        "example": "2022-05-01T07:01:31+00:00"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string or `credits`",
                        "example": "USD"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "discounts": {
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        },
                        "type": "array",
                        "title": "Discounts"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Due Date",
                        "description": "When the invoice payment is due.",
                        "example": "2022-05-30T07:00:00+00:00"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "invoice_pdf": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Pdf",
                        "description": "The link to download the PDF representation of the `Invoice`.",
                        "example": "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                    },
                    "invoice_number": {
                        "type": "string",
                        "title": "Invoice Number",
                        "description": "Automatically generated invoice number to help track and reconcile invoices. Invoice numbers have a prefix such as `RFOBWG`. These can be sequential per account or customer.",
                        "example": "JYEFHK-00001"
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineItem"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "The breakdown of prices in this invoice."
                    },
                    "subscription": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SubscriptionMinified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "The total before any discounts and minimums are applied.",
                        "example": "8.00"
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "The total after any minimums and discounts have been applied.",
                        "example": "8.00"
                    },
                    "customer_balance_transactions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomerBalanceTransaction"
                        },
                        "type": "array",
                        "title": "Customer Balance Transactions"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "issued",
                            "paid",
                            "synced",
                            "void",
                            "draft"
                        ],
                        "title": "Status"
                    },
                    "shipping_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "hosted_invoice_url": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hosted Invoice Url",
                        "description": "A URL for the invoice portal."
                    },
                    "will_auto_issue": {
                        "type": "boolean",
                        "title": "Will Auto Issue",
                        "description": "This is true if the invoice will be automatically issued in the future, and false otherwise."
                    },
                    "eligible_to_issue_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Eligible To Issue At",
                        "description": "If the invoice has a status of `draft`, this will be the time that the invoice will be eligible to be issued, otherwise it will be `null`. If `auto-issue` is true, the invoice will automatically begin issuing at this time."
                    },
                    "customer_tax_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CustomerTaxId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "voided_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voided At",
                        "description": "If the invoice has a status of `void`, this gives a timestamp when the invoice was voided."
                    },
                    "paid_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Paid At",
                        "description": "If the invoice has a status of `paid`, this gives a timestamp when the invoice was paid."
                    },
                    "issued_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Issued At",
                        "description": "If the invoice has been issued, this will be the time it transitioned to `issued` (even if it is now in a different state.)"
                    },
                    "scheduled_issue_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scheduled Issue At",
                        "description": "If the invoice is in draft, this timestamp will reflect when the invoice is scheduled to be issued."
                    },
                    "auto_collection": {
                        "$ref": "#/components/schemas/AutoCollection"
                    },
                    "memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memo",
                        "description": "Free-form text which is available on the invoice PDF and the Orb invoice portal."
                    },
                    "issue_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Issue Failed At",
                        "description": "If the invoice failed to issue, this will be the last time it failed to issue (even if it is now in a different state.)"
                    },
                    "sync_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sync Failed At",
                        "description": "If the invoice failed to sync, this will be the last time an external invoicing provider sync was attempted. This field will always be `null` for invoices using Orb Invoicing."
                    },
                    "payment_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Failed At",
                        "description": "If payment was attempted on this invoice but failed, this will be the time of the most recent attempt."
                    },
                    "payment_started_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Started At",
                        "description": "If payment was attempted on this invoice, this will be the start time of the most recent attempt. This field is especially useful for delayed-notification payment mechanisms (like bank transfers), where payment can take 3 days or more."
                    },
                    "credit_notes": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteSummary"
                        },
                        "type": "array",
                        "title": "Credit Notes",
                        "description": "A list of credit notes associated with the invoice"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata"
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Invoice Date",
                        "description": "The scheduled date of the invoice",
                        "example": "2022-05-01T07:00:00+00:00"
                    }
                },
                "type": "object",
                "required": [
                    "amount_due",
                    "created_at",
                    "currency",
                    "customer",
                    "discount",
                    "discounts",
                    "due_date",
                    "id",
                    "invoice_pdf",
                    "invoice_number",
                    "minimum",
                    "minimum_amount",
                    "maximum",
                    "maximum_amount",
                    "line_items",
                    "subscription",
                    "subtotal",
                    "total",
                    "customer_balance_transactions",
                    "status",
                    "shipping_address",
                    "billing_address",
                    "hosted_invoice_url",
                    "will_auto_issue",
                    "eligible_to_issue_at",
                    "customer_tax_id",
                    "voided_at",
                    "paid_at",
                    "issued_at",
                    "scheduled_issue_at",
                    "auto_collection",
                    "memo",
                    "issue_failed_at",
                    "sync_failed_at",
                    "payment_failed_at",
                    "payment_started_at",
                    "credit_notes",
                    "metadata",
                    "invoice_date"
                ],
                "title": "Invoice",
                "description": "An [`Invoice`](../guides/concepts#invoice) is a fundamental billing entity, representing the request for payment for\na single subscription. This includes a set of line items, which correspond to prices in the subscription's plan and\ncan represent fixed recurring fees or usage-based fees. They are generated at the end of a billing period, or as\nthe result of an action, such as a cancellation."
            },
            "InvoiceLineItem": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The final amount after any discounts or minimums.",
                        "example": "7.00"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "End Date",
                        "description": "The end date of the range of time applied for this line item's price.",
                        "example": "2022-02-01T08:00:00+00:00"
                    },
                    "grouping": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping",
                        "description": "[DEPRECATED] For configured prices that are split by a grouping key, this will be populated with the key and a value. The `amount` and `subtotal` will be the values for this particular grouping."
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price associated with this line item.",
                        "example": "Fixed Fee"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "example": 1
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the range of time applied for this line item's price.",
                        "example": "2022-02-01T08:00:00+00:00"
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "The line amount before any line item-specific discounts or minimums.",
                        "example": "9.00"
                    },
                    "sub_line_items": {
                        "items": {
                            "$ref": "#/components/schemas/InvoiceSubLineItem"
                        },
                        "type": "array",
                        "title": "Sub Line Items",
                        "description": "For complex pricing structures, the line item can be broken down further in `sub_line_items`."
                    },
                    "tax_amounts": {
                        "items": {
                            "$ref": "#/components/schemas/TaxAmount"
                        },
                        "type": "array",
                        "title": "Tax Amounts",
                        "description": "An array of tax rates and their incurred tax amounts. Empty if no tax integration is configured."
                    },
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "A unique ID for this line item."
                    },
                    "price": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Price"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "discount",
                    "end_date",
                    "grouping",
                    "minimum",
                    "minimum_amount",
                    "maximum",
                    "maximum_amount",
                    "name",
                    "quantity",
                    "start_date",
                    "subtotal",
                    "sub_line_items",
                    "tax_amounts",
                    "id",
                    "price"
                ],
                "title": "InvoiceLineItem"
            },
            "InvoiceLineItemParams": {
                "properties": {
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date",
                        "description": "A date string to specify the line item's start date in the customer's timezone.",
                        "example": "2023-09-22"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date",
                        "description": "A date string to specify the line item's end date in the customer's timezone.",
                        "example": "2023-09-22"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "description": "The number of units on the line item",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the line item.",
                        "example": "Line Item Name"
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "",
                        "example": "4khy3nwzktxv7"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "unit"
                        ],
                        "title": "Model Type",
                        "description": "",
                        "example": "unit"
                    },
                    "unit_config": {
                        "$ref": "#/components/schemas/UnitConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "start_date",
                    "end_date",
                    "quantity",
                    "name",
                    "item_id",
                    "model_type",
                    "unit_config"
                ],
                "title": "InvoiceLineItemParams"
            },
            "InvoiceMinified": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The Invoice id",
                        "example": "gXcsPTVyC4YZa3Sc"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "InvoiceMinified"
            },
            "InvoiceSubLineItem": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MatrixSubLineItem"
                    },
                    {
                        "$ref": "#/components/schemas/TierSubLineItem"
                    },
                    {
                        "$ref": "#/components/schemas/OtherSubLineItem"
                    }
                ],
                "title": "InvoiceSubLineItem",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "'null'": "#/components/schemas/OtherSubLineItem",
                        "matrix": "#/components/schemas/MatrixSubLineItem",
                        "tier": "#/components/schemas/TierSubLineItem"
                    }
                }
            },
            "Invoices": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Invoice"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Invoices"
            },
            "Item": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "external_connections": {
                        "items": {
                            "$ref": "#/components/schemas/ItemExternalConnection"
                        },
                        "type": "array",
                        "title": "External Connections"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "created_at",
                    "external_connections"
                ],
                "title": "Item",
                "description": "The Item resource represents a sellable product or good. Items are associated with all line items, billable metrics,\nand prices and are used for defining external sync behavior for invoices and tax calculation purposes."
            },
            "ItemExternalConnection": {
                "properties": {
                    "external_connection_name": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "stripe",
                                    "quickbooks",
                                    "bill.com",
                                    "netsuite"
                                ]
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "taxjar",
                                    "avalara",
                                    "anrok"
                                ]
                            }
                        ],
                        "title": "External Connection Name"
                    },
                    "external_entity_id": {
                        "type": "string",
                        "title": "External Entity Id"
                    }
                },
                "type": "object",
                "required": [
                    "external_connection_name",
                    "external_entity_id"
                ],
                "title": "ItemExternalConnection"
            },
            "ItemSlim": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ],
                "title": "ItemSlim"
            },
            "Items": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Items"
            },
            "MarkAsPaidRequestParams": {
                "properties": {
                    "payment_received_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Payment Received Date",
                        "description": "A date string to specify the date of the payment.",
                        "example": "2023-09-22"
                    },
                    "external_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Id",
                        "description": "An optional external ID to associate with the payment.",
                        "example": "external_payment_id_123"
                    },
                    "notes": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Notes",
                        "description": "An optional note to associate with the payment."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "payment_received_date",
                    "external_id",
                    "notes"
                ],
                "title": "MarkAsPaidRequestParams"
            },
            "MatrixConfig": {
                "properties": {
                    "dimensions": {
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Dimensions",
                        "description": "One or two event property values to evaluate matrix groups by"
                    },
                    "default_unit_amount": {
                        "type": "string",
                        "title": "Default Unit Amount",
                        "description": "Default per unit rate for any usage not bucketed into a specified matrix_value"
                    },
                    "matrix_values": {
                        "items": {
                            "$ref": "#/components/schemas/MatrixValue"
                        },
                        "type": "array",
                        "title": "Matrix Values",
                        "description": "Matrix values for specified matrix grouping keys"
                    },
                    "scaling_factor": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scaling Factor",
                        "description": "Default optional multiplier to scale rated quantities that fall into the default bucket by"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "dimensions",
                    "default_unit_amount",
                    "matrix_values"
                ],
                "title": "MatrixConfig"
            },
            "MatrixPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "matrix"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "matrix_config": {
                        "$ref": "#/components/schemas/MatrixConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "matrix_config"
                ],
                "title": "MatrixPrice"
            },
            "MatrixSubLineItem": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The total amount for this sub line item.",
                        "example": "9.00"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "example": "Tier One"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "example": 5
                    },
                    "grouping": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SubLineItemGrouping"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "matrix"
                        ],
                        "title": "Type"
                    },
                    "matrix_config": {
                        "$ref": "#/components/schemas/SubLineItemMatrixConfig"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "name",
                    "quantity",
                    "grouping",
                    "type",
                    "matrix_config"
                ],
                "title": "MatrixSubLineItem"
            },
            "MatrixValue": {
                "properties": {
                    "unit_amount": {
                        "type": "string",
                        "title": "Unit Amount",
                        "description": "Unit price for the specified dimension_values"
                    },
                    "scaling_factor": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scaling Factor",
                        "description": "Optional multiplier to scale rated quantities by"
                    },
                    "dimension_values": {
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Dimension Values",
                        "description": "One or two matrix keys to filter usage to this Matrix value by. For example, [\"region\", \"tier\"] could be used to filter cloud usage by a cloud region and an instance tier."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "unit_amount",
                    "dimension_values"
                ],
                "title": "MatrixValue"
            },
            "Maximum": {
                "properties": {
                    "maximum_amount": {
                        "type": "string",
                        "title": "Maximum Amount",
                        "description": "Maximum amount applied"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this maximum amount applies to. For plan/plan phase maximums, this can be a subset of prices."
                    }
                },
                "type": "object",
                "required": [
                    "maximum_amount",
                    "applies_to_price_ids"
                ],
                "title": "Maximum"
            },
            "MaximumInterval": {
                "properties": {
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the maximum interval."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the maximum interval."
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "The price ids that this maximum interval applies to."
                    },
                    "applies_to_price_interval_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Interval Ids",
                        "description": "The price interval ids that this maximum interval applies to."
                    },
                    "maximum_amount": {
                        "type": "string",
                        "title": "Maximum Amount",
                        "description": "The maximum amount to charge in a given billing period for the price intervals this transform applies to."
                    }
                },
                "type": "object",
                "required": [
                    "start_date",
                    "end_date",
                    "applies_to_price_ids",
                    "applies_to_price_interval_ids",
                    "maximum_amount"
                ],
                "title": "MaximumInterval"
            },
            "MetricGroup": {
                "properties": {
                    "property_key": {
                        "type": "string",
                        "title": "Property Key"
                    },
                    "property_value": {
                        "type": "string",
                        "title": "Property Value"
                    }
                },
                "type": "object",
                "required": [
                    "property_key",
                    "property_value"
                ],
                "title": "MetricGroup"
            },
            "Minimum": {
                "properties": {
                    "minimum_amount": {
                        "type": "string",
                        "title": "Minimum Amount",
                        "description": "Minimum amount applied"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this minimum amount applies to. For plan/plan phase minimums, this can be a subset of prices."
                    }
                },
                "type": "object",
                "required": [
                    "minimum_amount",
                    "applies_to_price_ids"
                ],
                "title": "Minimum"
            },
            "MinimumInterval": {
                "properties": {
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the minimum interval."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the minimum interval."
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "The price ids that this minimum interval applies to."
                    },
                    "applies_to_price_interval_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Interval Ids",
                        "description": "The price interval ids that this minimum interval applies to."
                    },
                    "minimum_amount": {
                        "type": "string",
                        "title": "Minimum Amount",
                        "description": "The minimum amount to charge in a given billing period for the price intervals this minimum applies to."
                    }
                },
                "type": "object",
                "required": [
                    "start_date",
                    "end_date",
                    "applies_to_price_ids",
                    "applies_to_price_interval_ids",
                    "minimum_amount"
                ],
                "title": "MinimumInterval"
            },
            "NewAccountingSyncConfiguration": {
                "properties": {
                    "excluded": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Excluded"
                    },
                    "accounting_providers": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/AccountingProviderConfig"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Accounting Providers"
                    }
                },
                "type": "object",
                "title": "NewAccountingSyncConfiguration"
            },
            "NewBackfill": {
                "properties": {
                    "replace_existing_events": {
                        "type": "boolean",
                        "title": "Replace Existing Events",
                        "description": "If true, replaces all existing events in the timeframe with the newly ingested events. If false, adds the newly ingested events to the existing events.",
                        "default": true
                    },
                    "timeframe_start": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe Start",
                        "description": "The (inclusive) start of the usage timeframe affected by this backfill."
                    },
                    "timeframe_end": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe End",
                        "description": "The (exclusive) end of the usage timeframe affected by this backfill."
                    },
                    "close_time": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Close Time",
                        "description": "The time at which no more events will be accepted for this backfill. The backfill will automatically begin reflecting throughout Orb at the close time. If not specified, it will default to 1 day after the creation of the backfill."
                    },
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The ID of the customer to which this backfill is scoped."
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "The external customer ID of the customer to which this backfill is scoped."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "timeframe_start",
                    "timeframe_end"
                ],
                "title": "NewBackfill"
            },
            "NewBillableMetric": {
                "properties": {
                    "sql": {
                        "type": "string",
                        "title": "Sql",
                        "description": "A sql string defining the metric.",
                        "example": "SELECT sum(bytes_downloaded) FROM events WHERE download_speed = 'fast'"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the metric.",
                        "example": "Bytes downloaded"
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "A description of the metric.",
                        "example": "Sum of bytes downloaded in fast mode"
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata",
                        "description": "User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the metric resource.",
                        "example": {
                            "category": "compute"
                        }
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "sql",
                    "name",
                    "item_id",
                    "description"
                ],
                "title": "NewBillableMetric"
            },
            "NewCoupon": {
                "properties": {
                    "redemption_code": {
                        "type": "string",
                        "title": "Redemption Code",
                        "description": "This string can be used to redeem this coupon for a given subscription.",
                        "example": "HALFOFF"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PercentageDiscount"
                            },
                            {
                                "$ref": "#/components/schemas/AmountDiscount"
                            }
                        ],
                        "title": "Discount",
                        "discriminator": {
                            "propertyName": "discount_type",
                            "mapping": {
                                "amount": "#/components/schemas/AmountDiscount",
                                "percentage": "#/components/schemas/PercentageDiscount"
                            }
                        }
                    },
                    "duration_in_months": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Duration In Months",
                        "description": "This allows for a coupon's discount to apply for a limited time (determined in months); a `null` value here means \"unlimited time\".",
                        "example": 12
                    },
                    "max_redemptions": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Max Redemptions",
                        "description": "The maximum number of redemptions allowed for this coupon before it is exhausted;`null` here means \"unlimited\"."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "redemption_code",
                    "discount"
                ],
                "title": "NewCoupon"
            },
            "NewCustomer": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The full name of the customer"
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "A valid customer email, to be used for notifications. When Orb triggers payment through a payment gateway, this email will be used for any automatically issued receipts."
                    },
                    "timezone": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Timezone",
                        "description": "A timezone identifier from the IANA timezone database, such as `\"America/Los_Angeles\"`. This defaults to your account's timezone if not set. This cannot be changed after customer creation."
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An optional user-defined ID for this customer resource, used throughout the system as an alias for this Customer. Use this field to identify a customer by an existing identifier in your system."
                    },
                    "payment_provider_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider Id",
                        "description": "The ID of this customer in an external payments solution, such as Stripe. This is used for creating charges or invoices in the external system via Orb."
                    },
                    "payment_provider": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "quickbooks",
                                    "bill.com",
                                    "stripe_charge",
                                    "stripe_invoice",
                                    "netsuite"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Provider",
                        "description": "This is used for creating charges or invoices in an external system via Orb. When not in test mode, the connection must first be configured in the Orb webapp."
                    },
                    "shipping_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "currency": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Currency",
                        "description": "An ISO 4217 currency string used for the customer's invoices and balance. If not set at creation time, will be set at subscription creation time."
                    },
                    "tax_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CustomerTaxId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "auto_collection": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Collection",
                        "description": "Used to determine if invoices for this customer will automatically attempt to charge a saved payment method, if available. This parameter defaults to `True` when a payment provider is provided on customer creation."
                    },
                    "email_delivery": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email Delivery"
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata",
                        "description": "User-specified key value pairs, often useful for referencing internal resources or IDs. Returned as-is in the customer resource."
                    },
                    "reporting_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NewReportingConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "accounting_sync_configuration": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/NewAccountingSyncConfiguration"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "additional_emails": {
                        "oneOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Additional Emails",
                        "description": "Additional email addresses for this customer. If populated, these email addresses will be CC'd for customer communications."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "email"
                ],
                "title": "NewCustomer"
            },
            "NewCustomerBalanceTransaction": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "title": "Amount"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "increment",
                            "decrement"
                        ],
                        "title": "Type"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "An optional description that can be specified around this entry."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "amount",
                    "type"
                ],
                "title": "NewCustomerBalanceTransaction"
            },
            "NewFloatingBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bps"
                        ],
                        "title": "Model Type"
                    },
                    "bps_config": {
                        "$ref": "#/components/schemas/BpsConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bps_config",
                    "currency"
                ],
                "title": "NewFloatingBpsPrice"
            },
            "NewFloatingBulkBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk_bps"
                        ],
                        "title": "Model Type"
                    },
                    "bulk_bps_config": {
                        "$ref": "#/components/schemas/BulkBpsConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bulk_bps_config",
                    "currency"
                ],
                "title": "NewFloatingBulkBpsPrice"
            },
            "NewFloatingBulkPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk"
                        ],
                        "title": "Model Type"
                    },
                    "bulk_config": {
                        "$ref": "#/components/schemas/BulkConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bulk_config",
                    "currency"
                ],
                "title": "NewFloatingBulkPrice"
            },
            "NewFloatingMatrixPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "matrix"
                        ],
                        "title": "Model Type"
                    },
                    "matrix_config": {
                        "$ref": "#/components/schemas/MatrixConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "matrix_config",
                    "currency"
                ],
                "title": "NewFloatingMatrixPrice"
            },
            "NewFloatingPackagePrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package"
                        ],
                        "title": "Model Type"
                    },
                    "package_config": {
                        "$ref": "#/components/schemas/PackageConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "package_config",
                    "currency"
                ],
                "title": "NewFloatingPackagePrice"
            },
            "NewFloatingPackageWithAllocationPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package_with_allocation"
                        ],
                        "title": "Model Type"
                    },
                    "package_with_allocation_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "package_with_allocation_config",
                    "currency"
                ],
                "title": "NewFloatingPackageWithAllocationPrice"
            },
            "NewFloatingPrice": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/NewFloatingUnitPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingPackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingMatrixPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingTieredPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingTieredBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingBulkBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingBulkPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingThresholdTotalAmountPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingTieredPackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingTieredWithMinimumPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewFloatingPackageWithAllocationPrice"
                    }
                ],
                "title": "NewFloatingPrice",
                "discriminator": {
                    "propertyName": "model_type",
                    "mapping": {
                        "bps": "#/components/schemas/NewFloatingBpsPrice",
                        "bulk": "#/components/schemas/NewFloatingBulkPrice",
                        "bulk_bps": "#/components/schemas/NewFloatingBulkBpsPrice",
                        "matrix": "#/components/schemas/NewFloatingMatrixPrice",
                        "package": "#/components/schemas/NewFloatingPackagePrice",
                        "package_with_allocation": "#/components/schemas/NewFloatingPackageWithAllocationPrice",
                        "threshold_total_amount": "#/components/schemas/NewFloatingThresholdTotalAmountPrice",
                        "tiered": "#/components/schemas/NewFloatingTieredPrice",
                        "tiered_bps": "#/components/schemas/NewFloatingTieredBpsPrice",
                        "tiered_package": "#/components/schemas/NewFloatingTieredPackagePrice",
                        "tiered_with_minimum": "#/components/schemas/NewFloatingTieredWithMinimumPrice",
                        "unit": "#/components/schemas/NewFloatingUnitPrice"
                    }
                }
            },
            "NewFloatingThresholdTotalAmountPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "threshold_total_amount"
                        ],
                        "title": "Model Type"
                    },
                    "threshold_total_amount_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "threshold_total_amount_config",
                    "currency"
                ],
                "title": "NewFloatingThresholdTotalAmountPrice"
            },
            "NewFloatingTieredBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_bps"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_bps_config": {
                        "$ref": "#/components/schemas/TieredBpsConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_bps_config",
                    "currency"
                ],
                "title": "NewFloatingTieredBpsPrice"
            },
            "NewFloatingTieredPackagePrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_package"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_package_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_package_config",
                    "currency"
                ],
                "title": "NewFloatingTieredPackagePrice"
            },
            "NewFloatingTieredPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_config": {
                        "$ref": "#/components/schemas/TieredConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_config",
                    "currency"
                ],
                "title": "NewFloatingTieredPrice"
            },
            "NewFloatingTieredWithMinimumPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_with_minimum"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_with_minimum_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_with_minimum_config",
                    "currency"
                ],
                "title": "NewFloatingTieredWithMinimumPrice"
            },
            "NewFloatingUnitPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "unit"
                        ],
                        "title": "Model Type"
                    },
                    "unit_config": {
                        "$ref": "#/components/schemas/UnitConfig"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string for which this price is billed in."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "unit_config",
                    "currency"
                ],
                "title": "NewFloatingUnitPrice"
            },
            "NewPlan": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "default_invoice_memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Invoice Memo",
                        "description": "Free-form text which is available on the invoice PDF and the Orb invoice portal."
                    },
                    "net_terms": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "maximum": 365.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Net Terms",
                        "description": "The net terms determines the difference between the invoice date and the issue date for the invoice. If you intend the invoice to be due on issue, set this to 0."
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string or custom pricing unit (`credits`) for this plan's prices."
                    },
                    "prices": {
                        "items": {
                            "$ref": "#/components/schemas/NewPlanPrice"
                        },
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "title": "Prices",
                        "description": "Prices for this plan. If the plan has phases, this includes prices across all phases of the plan."
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    },
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "currency",
                    "prices"
                ],
                "title": "NewPlan"
            },
            "NewPlanBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bps"
                        ],
                        "title": "Model Type"
                    },
                    "bps_config": {
                        "$ref": "#/components/schemas/BpsConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bps_config"
                ],
                "title": "NewPlanBpsPrice"
            },
            "NewPlanBulkBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk_bps"
                        ],
                        "title": "Model Type"
                    },
                    "bulk_bps_config": {
                        "$ref": "#/components/schemas/BulkBpsConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bulk_bps_config"
                ],
                "title": "NewPlanBulkBpsPrice"
            },
            "NewPlanBulkPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk"
                        ],
                        "title": "Model Type"
                    },
                    "bulk_config": {
                        "$ref": "#/components/schemas/BulkConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "bulk_config"
                ],
                "title": "NewPlanBulkPrice"
            },
            "NewPlanMatrixPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "matrix"
                        ],
                        "title": "Model Type"
                    },
                    "matrix_config": {
                        "$ref": "#/components/schemas/MatrixConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "matrix_config"
                ],
                "title": "NewPlanMatrixPrice"
            },
            "NewPlanPackagePrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package"
                        ],
                        "title": "Model Type"
                    },
                    "package_config": {
                        "$ref": "#/components/schemas/PackageConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "package_config"
                ],
                "title": "NewPlanPackagePrice"
            },
            "NewPlanPackageWithAllocationPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package_with_allocation"
                        ],
                        "title": "Model Type"
                    },
                    "package_with_allocation_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "package_with_allocation_config"
                ],
                "title": "NewPlanPackageWithAllocationPrice"
            },
            "NewPlanPrice": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/NewPlanUnitPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanPackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanMatrixPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanTieredPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanTieredBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanBulkBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanBulkPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanThresholdTotalAmountPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanTieredPackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanTieredWithMinimumPrice"
                    },
                    {
                        "$ref": "#/components/schemas/NewPlanPackageWithAllocationPrice"
                    }
                ],
                "title": "NewPlanPrice",
                "discriminator": {
                    "propertyName": "model_type",
                    "mapping": {
                        "bps": "#/components/schemas/NewPlanBpsPrice",
                        "bulk": "#/components/schemas/NewPlanBulkPrice",
                        "bulk_bps": "#/components/schemas/NewPlanBulkBpsPrice",
                        "matrix": "#/components/schemas/NewPlanMatrixPrice",
                        "package": "#/components/schemas/NewPlanPackagePrice",
                        "package_with_allocation": "#/components/schemas/NewPlanPackageWithAllocationPrice",
                        "threshold_total_amount": "#/components/schemas/NewPlanThresholdTotalAmountPrice",
                        "tiered": "#/components/schemas/NewPlanTieredPrice",
                        "tiered_bps": "#/components/schemas/NewPlanTieredBpsPrice",
                        "tiered_package": "#/components/schemas/NewPlanTieredPackagePrice",
                        "tiered_with_minimum": "#/components/schemas/NewPlanTieredWithMinimumPrice",
                        "unit": "#/components/schemas/NewPlanUnitPrice"
                    }
                }
            },
            "NewPlanThresholdTotalAmountPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "threshold_total_amount"
                        ],
                        "title": "Model Type"
                    },
                    "threshold_total_amount_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "threshold_total_amount_config"
                ],
                "title": "NewPlanThresholdTotalAmountPrice"
            },
            "NewPlanTieredBpsPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_bps"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_bps_config": {
                        "$ref": "#/components/schemas/TieredBpsConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_bps_config"
                ],
                "title": "NewPlanTieredBpsPrice"
            },
            "NewPlanTieredPackagePrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_package"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_package_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_package_config"
                ],
                "title": "NewPlanTieredPackagePrice"
            },
            "NewPlanTieredPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_config": {
                        "$ref": "#/components/schemas/TieredConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_config"
                ],
                "title": "NewPlanTieredPrice"
            },
            "NewPlanTieredWithMinimumPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_with_minimum"
                        ],
                        "title": "Model Type"
                    },
                    "tiered_with_minimum_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "tiered_with_minimum_config"
                ],
                "title": "NewPlanTieredWithMinimumPrice"
            },
            "NewPlanUnitPrice": {
                "properties": {
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id",
                        "description": "An alias for the price."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the price.",
                        "example": "Annual fee"
                    },
                    "billable_metric_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billable Metric Id",
                        "description": "The id of the billable metric for the price. Only needed if the price is usage-based."
                    },
                    "item_id": {
                        "type": "string",
                        "title": "Item Id",
                        "description": "The id of the item the plan will be associated with."
                    },
                    "billed_in_advance": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Billed In Advance",
                        "description": "If the Price represents a fixed cost, the price will be billed in-advance if this is true, and in-arrears if this is false."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "If the Price represents a fixed cost, this represents the quantity of units applied."
                    },
                    "invoice_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Grouping Key",
                        "description": "The property used to group this price on an invoice"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "annual",
                            "monthly",
                            "quarterly",
                            "one_time"
                        ],
                        "title": "Cadence",
                        "description": "The cadence to bill for this price on."
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "unit"
                        ],
                        "title": "Model Type"
                    },
                    "unit_config": {
                        "$ref": "#/components/schemas/UnitConfig"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "name",
                    "item_id",
                    "cadence",
                    "model_type",
                    "unit_config"
                ],
                "title": "NewPlanUnitPrice"
            },
            "NewReportingConfiguration": {
                "properties": {
                    "exempt": {
                        "type": "boolean",
                        "title": "Exempt"
                    }
                },
                "type": "object",
                "required": [
                    "exempt"
                ],
                "title": "NewReportingConfiguration"
            },
            "NewSubscription": {
                "properties": {
                    "plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Id",
                        "description": "The plan that the given subscription should be switched to. Note that either this property or `external_plan_id` must be specified.",
                        "example": "ZMwNQefe7J3ecf7W"
                    },
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id",
                        "description": "The external_plan_id of the plan that the given subscription should be switched to. Note that either this property or `plan_id` must be specified.",
                        "example": "ZMwNQefe7J3ecf7W"
                    },
                    "price_overrides": {
                        "oneOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/OverrideUnitPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverridePackagePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideMatrixPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBulkBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBulkPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTestRatingFunctionPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideFivetranExamplePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideThresholdTotalAmountPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredPackagePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredWithMinimumPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverridePackageWithAllocationPrice"
                                        }
                                    ],
                                    "discriminator": {
                                        "propertyName": "model_type",
                                        "mapping": {
                                            "bps": "#/components/schemas/OverrideBpsPrice",
                                            "bulk": "#/components/schemas/OverrideBulkPrice",
                                            "bulk_bps": "#/components/schemas/OverrideBulkBpsPrice",
                                            "fivetran_example": "#/components/schemas/OverrideFivetranExamplePrice",
                                            "matrix": "#/components/schemas/OverrideMatrixPrice",
                                            "package": "#/components/schemas/OverridePackagePrice",
                                            "package_with_allocation": "#/components/schemas/OverridePackageWithAllocationPrice",
                                            "test_rating_function": "#/components/schemas/OverrideTestRatingFunctionPrice",
                                            "threshold_total_amount": "#/components/schemas/OverrideThresholdTotalAmountPrice",
                                            "tiered": "#/components/schemas/OverrideTieredPrice",
                                            "tiered_bps": "#/components/schemas/OverrideTieredBpsPrice",
                                            "tiered_package": "#/components/schemas/OverrideTieredPackagePrice",
                                            "tiered_with_minimum": "#/components/schemas/OverrideTieredWithMinimumPrice",
                                            "unit": "#/components/schemas/OverrideUnitPrice"
                                        }
                                    }
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price Overrides",
                        "description": "Optionally provide a list of overrides for prices on the plan"
                    },
                    "per_credit_overage_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Credit Overage Amount"
                    },
                    "credits_overage_rate": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Credits Overage Rate"
                    },
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id"
                    },
                    "start_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Start Date"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    },
                    "external_marketplace": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "google",
                                    "aws",
                                    "azure"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Marketplace"
                    },
                    "external_marketplace_reporting_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Marketplace Reporting Id"
                    },
                    "align_billing_with_subscription_start_date": {
                        "type": "boolean",
                        "title": "Align Billing With Subscription Start Date",
                        "default": false
                    },
                    "net_terms": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Net Terms"
                    },
                    "auto_collection": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Collection"
                    },
                    "default_invoice_memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Invoice Memo"
                    },
                    "coupon_redemption_code": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Coupon Redemption Code"
                    },
                    "metadata": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    },
                    "invoicing_threshold": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoicing Threshold"
                    },
                    "initial_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Initial Phase Order"
                    },
                    "aws_region": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Aws Region"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "NewSubscription"
            },
            "OtherSubLineItem": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The total amount for this sub line item.",
                        "example": "9.00"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "example": "Tier One"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "example": 5
                    },
                    "grouping": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SubLineItemGrouping"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "'null'"
                        ],
                        "title": "Type"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "name",
                    "quantity",
                    "grouping",
                    "type"
                ],
                "title": "OtherSubLineItem"
            },
            "OverrideBpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bps"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "bps_config": {
                        "$ref": "#/components/schemas/BpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "bps_config"
                ],
                "title": "OverrideBpsPrice"
            },
            "OverrideBulkBpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk_bps"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "bulk_bps_config": {
                        "$ref": "#/components/schemas/BulkBpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "bulk_bps_config"
                ],
                "title": "OverrideBulkBpsPrice"
            },
            "OverrideBulkPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "bulk"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "bulk_config": {
                        "$ref": "#/components/schemas/BulkConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "bulk_config"
                ],
                "title": "OverrideBulkPrice"
            },
            "OverrideFivetranExamplePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "fivetran_example"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "fivetran_example_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "fivetran_example_config"
                ],
                "title": "OverrideFivetranExamplePrice"
            },
            "OverrideMatrixPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "matrix"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "matrix_config": {
                        "$ref": "#/components/schemas/MatrixConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "matrix_config"
                ],
                "title": "OverrideMatrixPrice"
            },
            "OverridePackagePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "package_config": {
                        "$ref": "#/components/schemas/PackageConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "package_config"
                ],
                "title": "OverridePackagePrice"
            },
            "OverridePackageWithAllocationPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package_with_allocation"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "package_with_allocation_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "package_with_allocation_config"
                ],
                "title": "OverridePackageWithAllocationPrice"
            },
            "OverrideTestRatingFunctionPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "test_rating_function"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "test_rating_function_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "test_rating_function_config"
                ],
                "title": "OverrideTestRatingFunctionPrice"
            },
            "OverrideThresholdTotalAmountPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "threshold_total_amount"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "threshold_total_amount_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "threshold_total_amount_config"
                ],
                "title": "OverrideThresholdTotalAmountPrice"
            },
            "OverrideTieredBpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_bps"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "tiered_bps_config": {
                        "$ref": "#/components/schemas/TieredBpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "tiered_bps_config"
                ],
                "title": "OverrideTieredBpsPrice"
            },
            "OverrideTieredPackagePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_package"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "tiered_package_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "tiered_package_config"
                ],
                "title": "OverrideTieredPackagePrice"
            },
            "OverrideTieredPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "tiered_config": {
                        "$ref": "#/components/schemas/TieredConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "tiered_config"
                ],
                "title": "OverrideTieredPrice"
            },
            "OverrideTieredWithMinimumPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_with_minimum"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "tiered_with_minimum_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "tiered_with_minimum_config"
                ],
                "title": "OverrideTieredWithMinimumPrice"
            },
            "OverrideUnitPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "unit"
                        ],
                        "title": "Model Type"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount",
                        "description": "The subscription's override minimum amount for the plan.",
                        "example": "1.23"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount",
                        "description": "The subscription's override maximum amount for the plan.",
                        "example": "1.23"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DiscountOverride"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The subscription's override discount for the plan."
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity",
                        "description": "The starting quantity of the price, if the price is a fixed price.",
                        "example": 2
                    },
                    "unit_config": {
                        "$ref": "#/components/schemas/UnitConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "model_type",
                    "unit_config"
                ],
                "title": "OverrideUnitPrice"
            },
            "PackageConfig": {
                "properties": {
                    "package_amount": {
                        "type": "string",
                        "title": "Package Amount",
                        "description": "A currency amount to rate usage by"
                    },
                    "package_size": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Package Size",
                        "description": "An integer amount to represent package size. For example, 1000 here would divide usage by 1000 before multiplying by package_amount in rating"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "package_amount"
                ],
                "title": "PackageConfig"
            },
            "PackagePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "package_config": {
                        "$ref": "#/components/schemas/PackageConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "package_config"
                ],
                "title": "PackagePrice"
            },
            "PackageWithAllocationPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "package_with_allocation"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "package_with_allocation_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "package_with_allocation_config"
                ],
                "title": "PackageWithAllocationPrice"
            },
            "PaginationMetadata": {
                "properties": {
                    "has_more": {
                        "type": "boolean",
                        "title": "Has More"
                    },
                    "next_cursor": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Next Cursor"
                    }
                },
                "type": "object",
                "required": [
                    "has_more",
                    "next_cursor"
                ],
                "title": "PaginationMetadata"
            },
            "PerPriceCost": {
                "properties": {
                    "quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Quantity",
                        "description": "The price's quantity for the timeframe"
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "Price's contributions for the timeframe, excluding any minimums and discounts."
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "Price's contributions for the timeframe, including minimums and discounts."
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "price_groups": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/PriceGroup"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price Groups",
                        "description": "If a `group_by` attribute is passed in, array of costs per `grouping_key`, `grouping_value` or `secondary_grouping_key`, `secondary_grouping_value`."
                    }
                },
                "type": "object",
                "required": [
                    "subtotal",
                    "total",
                    "price"
                ],
                "title": "PerPriceCost"
            },
            "PercentageDiscount": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage"
                        ],
                        "title": "Discount Type"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this discount applies to. For plan/plan phase discounts, this can be a subset of prices.",
                        "example": [
                            "h74gfhdjvn7ujokd",
                            "7hfgtgjnbvc3ujkl"
                        ]
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "percentage_discount": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Percentage Discount",
                        "description": "Only available if discount_type is `percentage`. This is a number between 0 and 1.",
                        "example": 0.15
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "applies_to_price_ids",
                    "percentage_discount"
                ],
                "title": "PercentageDiscount"
            },
            "PercentageDiscountCreationParams": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage"
                        ],
                        "title": "Discount Type"
                    },
                    "percentage_discount": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Percentage Discount",
                        "description": "Only available if discount_type is `percentage`. This is a number between 0 and 1.",
                        "example": 0.15
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "percentage_discount"
                ],
                "title": "PercentageDiscountCreationParams"
            },
            "PercentageDiscountInterval": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage"
                        ],
                        "title": "Discount Type"
                    },
                    "percentage_discount": {
                        "type": "number",
                        "title": "Percentage Discount",
                        "description": "Only available if discount_type is `percentage`.This is a number between 0 and 1.",
                        "example": 0.15
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the discount interval."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the discount interval."
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "The price ids that this discount interval applies to."
                    },
                    "applies_to_price_interval_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Interval Ids",
                        "description": "The price interval ids that this discount interval applies to."
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "percentage_discount",
                    "start_date",
                    "end_date",
                    "applies_to_price_ids",
                    "applies_to_price_interval_ids"
                ],
                "title": "PercentageDiscountInterval"
            },
            "PingResponse": {
                "properties": {
                    "response": {
                        "type": "string",
                        "title": "Response"
                    }
                },
                "type": "object",
                "required": [
                    "response"
                ],
                "title": "PingResponse"
            },
            "Plan": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "archived",
                            "draft"
                        ],
                        "title": "Status"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "trial_config": {
                        "$ref": "#/components/schemas/TrialConfig"
                    },
                    "plan_phases": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/PlanPhase"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phases"
                    },
                    "base_plan": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PlanMinified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "base_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Base Plan Id",
                        "description": "The parent plan id if the given plan was created by overriding one or more of the parent's prices"
                    },
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id",
                        "description": "An optional user-defined ID for this plan resource, used throughout the system as an alias for this Plan. Use this field to identify a plan by an existing identifier in your system."
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string or custom pricing unit (`credits`) for this plan's prices."
                    },
                    "invoicing_currency": {
                        "type": "string",
                        "title": "Invoicing Currency",
                        "description": "An ISO 4217 currency string for which this plan is billed in. Matches `currency` unless `currency` is a custom pricing unit."
                    },
                    "net_terms": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Net Terms",
                        "description": "Determines the difference between the invoice issue date and the due date. A value of \"0\" here signifies that invoices are due on issue, whereas a value of \"30\" means that the customer has a month to pay the invoice before its overdue. Note that individual subscriptions or invoices may set a different net terms configuration."
                    },
                    "default_invoice_memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Invoice Memo",
                        "description": "The default memo text on the invoices corresponding to subscriptions on this plan. Note that each subscription may configure its own memo."
                    },
                    "prices": {
                        "items": {
                            "$ref": "#/components/schemas/Price"
                        },
                        "type": "array",
                        "uniqueItems": true,
                        "title": "Prices",
                        "description": "Prices for this plan. If the plan has phases, this includes prices across all phases of the plan."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "description",
                    "maximum_amount",
                    "minimum_amount",
                    "created_at",
                    "status",
                    "maximum",
                    "minimum",
                    "discount",
                    "product",
                    "trial_config",
                    "plan_phases",
                    "base_plan",
                    "base_plan_id",
                    "external_plan_id",
                    "currency",
                    "invoicing_currency",
                    "net_terms",
                    "default_invoice_memo",
                    "prices",
                    "metadata"
                ],
                "title": "Plan",
                "description": "The [Plan](../guides/core-concepts.mdx#plan-and-price) resource represents a plan that can be subscribed to by a\ncustomer. Plans define the billing behavior of the subscription. You can see more about how to configure prices\nin the [Price resource](/reference/price)."
            },
            "PlanMinified": {
                "properties": {
                    "id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id",
                        "example": "m2t5akQeh2obwxeU"
                    },
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id",
                        "description": "An optional user-defined ID for this plan resource, used throughout the system as an alias for this Plan. Use this field to identify a plan by an existing identifier in your system.",
                        "example": "m2t5akQeh2obwxeU"
                    },
                    "name": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name",
                        "example": "Example plan"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "external_plan_id",
                    "name"
                ],
                "title": "PlanMinified"
            },
            "PlanPhase": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "duration": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Duration",
                        "description": "How many terms of length `duration_unit` this phase is active for. If null, this phase is evergreen and active indefinitely"
                    },
                    "duration_unit": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "daily",
                                    "monthly",
                                    "quarterly",
                                    "annual"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Duration Unit"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "order": {
                        "type": "integer",
                        "title": "Order",
                        "description": "Determines the ordering of the phase in a plan's lifecycle. 1 = first phase."
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "description",
                    "duration",
                    "duration_unit",
                    "name",
                    "order",
                    "minimum",
                    "maximum",
                    "maximum_amount",
                    "minimum_amount",
                    "discount"
                ],
                "title": "PlanPhase"
            },
            "Plans": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Plan"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Plans"
            },
            "Price": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/UnitPrice"
                    },
                    {
                        "$ref": "#/components/schemas/PackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/MatrixPrice"
                    },
                    {
                        "$ref": "#/components/schemas/TieredPrice"
                    },
                    {
                        "$ref": "#/components/schemas/TieredBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/BpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/BulkBpsPrice"
                    },
                    {
                        "$ref": "#/components/schemas/BulkPrice"
                    },
                    {
                        "$ref": "#/components/schemas/TestRatingFunctionPrice"
                    },
                    {
                        "$ref": "#/components/schemas/FivetranExamplePrice"
                    },
                    {
                        "$ref": "#/components/schemas/ThresholdTotalAmountPrice"
                    },
                    {
                        "$ref": "#/components/schemas/TieredPackagePrice"
                    },
                    {
                        "$ref": "#/components/schemas/TieredWithMinimumPrice"
                    },
                    {
                        "$ref": "#/components/schemas/PackageWithAllocationPrice"
                    }
                ],
                "title": "Price",
                "description": "The Price resource represents a price that can be billed on a subscription, resulting in a charge on an invoice in\nthe form of an invoice line item. Prices take a quantity and determine an amount to bill.\n\nOrb supports a few different pricing models out of the box. Each of these models is serialized differently in a\ngiven Price object. The model_type field determines the key for the configuration object that is present.\n\n## Unit pricing\nWith unit pricing, each unit costs a fixed amount.\n```json\n{\n    ...\n    \"model_type\": \"unit\",\n    \"unit_config\": {\n        \"unit_amount\": \"0.50\"\n    }\n    ...\n}\n```\n\n## Tiered pricing\nIn tiered pricing, the cost of a given unit depends on the tier range that it falls into, where each tier range is\ndefined by an upper and lower bound. For example, the first ten units may cost $0.50 each and all units thereafter\nmay cost $0.10 each.\n```json\n{\n    ...\n    \"model_type\": \"tiered\",\n    \"tiered_config\": {\n        \"tiers\": [\n            {\n                \"first_unit\": 1,\n                \"last_unit\": 10,\n                \"unit_amount\": \"0.50\"\n            },\n            {\n                \"first_unit\": 11,\n                \"last_unit\": null,\n                \"unit_amount\": \"0.10\"\n            }\n        ]\n    }\n    ...\n```\n\n## Bulk pricing\nBulk pricing applies when the number of units determine the cost of all units. For example, if you've bought less\nthan 10 units, they may each be $0.50 for a total of $5.00. Once you've bought more than 10 units, all units may\nnow be priced at $0.40 (i.e. 101 units total would be $40.40).\n```json\n{\n    ...\n    \"model_type\": \"bulk\",\n    \"bulk_config\": {\n        \"tiers\": [\n            {\n                \"maximum_units\": 10,\n                \"unit_amount\": \"0.50\"\n            },\n            {\n                \"maximum_units\": 1000,\n                \"unit_amount\": \"0.40\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Package pricing\nPackage pricing defines the size or granularity of a unit for billing purposes. For example, if the package size is\nset to 5, then 4 units will be billed as 5 and 6 units will be billed at 10.\n```json\n{\n    ...\n    \"model_type\": \"package\",\n    \"package_config\": {\n        \"package_amount\": \"0.80\",\n        \"package_size\": 10\n    }\n    ...\n}\n```\n\n## BPS pricing\nBPS pricing specifies a per-event (e.g. per-payment) rate in one hundredth of a percent (the number of basis points\nto charge), as well as a cap per event to assess. For example, this would allow you to assess a fee of 0.25% on\nevery payment you process, with a maximum charge of $25 per payment.\n```json\n{\n    ...\n    \"model_type\": \"bps\",\n    \"bps_config\": {\n       \"bps\": 125,\n       \"per_unit_maximum\": \"11.00\"\n    }\n    ...\n }\n```\n\n## Bulk BPS pricing\nBulk BPS pricing specifies BPS parameters in a tiered manner, dependent on the total quantity across all events.\nSimilar to bulk pricing, the BPS parameters of a given event depends on the tier range that the billing period\nfalls into. Each tier range is defined by an upper bound. For example, after $1.5M of payment volume is reached,\neach individual payment may have a lower cap or a smaller take-rate.\n```json\n    ...\n    \"model_type\": \"bulk_bps\",\n    \"bulk_bps_config\": {\n        \"tiers\": [\n           {\n                \"maximum_amount\": \"1000000.00\",\n                \"bps\": 125,\n                \"per_unit_maximum\": \"19.00\"\n           },\n          {\n                \"maximum_amount\": null,\n                \"bps\": 115,\n                \"per_unit_maximum\": \"4.00\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Tiered BPS pricing\nTiered BPS pricing specifies BPS parameters in a graduated manner, where an event's applicable parameter is a\nfunction of its marginal addition to the period total. Similar to tiered pricing, the BPS parameters of a given\nevent depends on the tier range that it falls into, where each tier range is defined by an upper and lower bound.\nFor example, the first few payments may have a 0.8 BPS take-rate and all payments after a specific volume may\nincur a take-rate of 0.5 BPS each.\n```json\n    ...\n    \"model_type\": \"tiered_bps\",\n    \"tiered_bps_config\": {\n        \"tiers\": [\n           {\n                \"minimum_amount\": \"0\",\n                \"maximum_amount\": \"1000000.00\",\n                \"bps\": 125,\n                \"per_unit_maximum\": \"19.00\"\n           },\n          {\n                \"minimum_amount\": \"1000000.00\",\n                \"maximum_amount\": null,\n                \"bps\": 115,\n                \"per_unit_maximum\": \"4.00\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Matrix pricing\nMatrix pricing defines a set of unit prices in a one or two-dimensional matrix. `dimensions` defines the two event\nproperty values evaluated in this pricing model. In a one-dimensional matrix, the second value is `null`. Every\nconfiguration has a list of `matrix_values` which give the unit prices for specified property values. In a\none-dimensional matrix, the matrix values will have `dimension_values` where the second value of the pair is null.\nIf an event does not match any of the dimension values in the matrix, it will resort to the `default_unit_amount`.\n```json\n{\n    \"model_type\": \"matrix\"\n    \"matrix_config\": {\n        \"default_unit_amount\": \"3.00\",\n        \"dimensions\": [\n            \"cluster_name\",\n            \"region\"\n        ],\n        \"matrix_values\": [\n            {\n                \"dimension_values\": [\n                    \"alpha\",\n                    \"west\"\n                ],\n                \"unit_amount\": \"2.00\"\n            },\n            ...\n        ]\n    }\n}\n```\n\n### Fixed fees\nFixed fees are prices that are applied independent of usage quantities, and follow unit pricing. They also have an\nadditional parameter `fixed_price_quantity`. If the Price represents a fixed cost, this represents the quantity of\nunits applied.\n```json\n{\n    ...\n    \"id\": \"price_id\",\n    \"model_type\": \"unit\",\n    \"unit_config\": {\n       \"unit_amount\": \"2.00\"\n    },\n    \"fixed_price_quantity\": 3.0\n    ...\n}\n```",
                "discriminator": {
                    "propertyName": "model_type",
                    "mapping": {
                        "bps": "#/components/schemas/BpsPrice",
                        "bulk": "#/components/schemas/BulkPrice",
                        "bulk_bps": "#/components/schemas/BulkBpsPrice",
                        "fivetran_example": "#/components/schemas/FivetranExamplePrice",
                        "matrix": "#/components/schemas/MatrixPrice",
                        "package": "#/components/schemas/PackagePrice",
                        "package_with_allocation": "#/components/schemas/PackageWithAllocationPrice",
                        "test_rating_function": "#/components/schemas/TestRatingFunctionPrice",
                        "threshold_total_amount": "#/components/schemas/ThresholdTotalAmountPrice",
                        "tiered": "#/components/schemas/TieredPrice",
                        "tiered_bps": "#/components/schemas/TieredBpsPrice",
                        "tiered_package": "#/components/schemas/TieredPackagePrice",
                        "tiered_with_minimum": "#/components/schemas/TieredWithMinimumPrice",
                        "unit": "#/components/schemas/UnitPrice"
                    }
                }
            },
            "PriceGroup": {
                "properties": {
                    "grouping_key": {
                        "type": "string",
                        "title": "Grouping Key",
                        "description": "Grouping key to break down a single price's costs"
                    },
                    "grouping_value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grouping Value"
                    },
                    "secondary_grouping_key": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Secondary Grouping Key",
                        "description": "If the price is a matrix price, this is the second dimension key"
                    },
                    "secondary_grouping_value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Secondary Grouping Value"
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "Total costs for this group for the timeframe. Note that this does not account for any minimums or discounts."
                    }
                },
                "type": "object",
                "required": [
                    "grouping_key",
                    "grouping_value",
                    "secondary_grouping_key",
                    "secondary_grouping_value",
                    "total"
                ],
                "title": "PriceGroup"
            },
            "PriceInterval": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the price interval. This is the date that Orb starts billing for this price."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the price interval. This is the date that Orb stops billing for this price."
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "billing_cycle_day": {
                        "type": "integer",
                        "title": "Billing Cycle Day",
                        "description": "The day of the month that Orb bills for this price"
                    },
                    "fixed_fee_quantity_transitions": {
                        "oneOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/FixedFeeQuantityTransition"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Fee Quantity Transitions",
                        "description": "The fixed fee quantity transitions for this price interval. This is only relevant for fixed fees."
                    },
                    "current_billing_period_start_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Current Billing Period Start Date",
                        "description": "The start date of the current billing period. This is an inclusive timestamp; the instant returned is exactly the beginning of the billing period. Set to null if this price interval is not currently active."
                    },
                    "current_billing_period_end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Current Billing Period End Date",
                        "description": "The end of the current billing period. This is an exclusive timestamp, such that the instant returned is exactly the end of the billing period. Set to null if this price interval is not currently active."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "start_date",
                    "end_date",
                    "price",
                    "billing_cycle_day",
                    "fixed_fee_quantity_transitions",
                    "current_billing_period_start_date",
                    "current_billing_period_end_date"
                ],
                "title": "PriceInterval",
                "description": "The Price Interval resource represents a period of time for which a price will bill on a subscription. A\nsubscription\u2019s price intervals define its billing behavior."
            },
            "PriceIntervalFixedFeeQuantityTransitionParams": {
                "properties": {
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity",
                        "description": "The quantity of the fixed fee quantity transition.",
                        "example": 5
                    },
                    "effective_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Effective Date",
                        "description": "The date that the fixed fee quantity transition should take effect.",
                        "example": "2023-05-01"
                    }
                },
                "type": "object",
                "required": [
                    "quantity",
                    "effective_date"
                ],
                "title": "PriceIntervalFixedFeeQuantityTransitionParams"
            },
            "Prices": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Price"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Prices"
            },
            "Product": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "type": "object",
                "required": [
                    "created_at",
                    "id",
                    "name"
                ],
                "title": "Product"
            },
            "ReportingConfiguration": {
                "properties": {
                    "exempt": {
                        "type": "boolean",
                        "title": "Exempt"
                    }
                },
                "type": "object",
                "required": [
                    "exempt"
                ],
                "title": "ReportingConfiguration"
            },
            "RequestTooLargeError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#413-request-too-large"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            413
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "RequestTooLargeError"
            },
            "RequestValidationError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#400-request-validation-errors"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            400
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    },
                    "validation_errors": {
                        "items": {},
                        "type": "array",
                        "title": "Validation Errors"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status",
                    "validation_errors"
                ],
                "title": "RequestValidationError"
            },
            "ResourceNotFoundError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#404-resource-not-found"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            404
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status",
                    "title"
                ],
                "title": "ResourceNotFoundError"
            },
            "ResourceTooLargeError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#413-resource-too-large"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            413
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "ResourceTooLargeError"
            },
            "ServerError": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#500-internal-server-error"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "ServerError"
            },
            "SubLineItemGrouping": {
                "properties": {
                    "key": {
                        "type": "string",
                        "title": "Key",
                        "example": "region"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Value",
                        "description": "No value indicates the default group",
                        "example": "west"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "value"
                ],
                "title": "SubLineItemGrouping"
            },
            "SubLineItemMatrixConfig": {
                "properties": {
                    "dimension_values": {
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Dimension Values",
                        "description": "The ordered dimension values for this line item."
                    }
                },
                "type": "object",
                "required": [
                    "dimension_values"
                ],
                "title": "SubLineItemMatrixConfig"
            },
            "Subscription": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The date Orb starts billing for this subscription."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The date Orb stops billing for this subscription."
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "current_billing_period_start_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Current Billing Period Start Date",
                        "description": "The start date of the current billing period. This is an inclusive timestamp; the instant returned is exactly the beginning of the billing period. Set to null if the subscription is not currently active."
                    },
                    "current_billing_period_end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Current Billing Period End Date",
                        "description": "The end of the current billing period. This is an exclusive timestamp, such that the instant returned is not part of the billing period. Set to null for subscriptions that are not currently active."
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "ended",
                            "upcoming"
                        ],
                        "title": "Status"
                    },
                    "trial_info": {
                        "$ref": "#/components/schemas/SubscriptionTrialInfo"
                    },
                    "active_plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Active Plan Phase Order",
                        "description": "The current plan phase that is active, only if the subscription's plan has phases."
                    },
                    "fixed_fee_quantity_schedule": {
                        "items": {
                            "$ref": "#/components/schemas/FixedFeeQuantityScheduleEntry"
                        },
                        "type": "array",
                        "title": "Fixed Fee Quantity Schedule"
                    },
                    "default_invoice_memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Default Invoice Memo",
                        "description": "Determines the default memo on this subscriptions' invoices. Note that if this is not provided, it is determined by the plan configuration."
                    },
                    "auto_collection": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Auto Collection",
                        "description": "Determines whether issued invoices for this subscription will automatically be charged with the saved payment method on the due date. This property defaults to the plan's behavior."
                    },
                    "net_terms": {
                        "type": "integer",
                        "title": "Net Terms",
                        "description": "Determines the difference between the invoice issue date for subscription invoices as the date that they are due. A value of `0` here represents that the invoice is due on issue, whereas a value of `30` represents that the customer has a month to pay the invoice."
                    },
                    "redeemed_coupon": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CouponRedemption"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_cycle_day": {
                        "type": "integer",
                        "maximum": 31.0,
                        "minimum": 1.0,
                        "title": "Billing Cycle Day",
                        "description": "The day of the month on which the billing cycle is anchored. If the maximum number of days in a month is greater than this value, the last day of the month is the billing cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the 30th."
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "User specified key-value pairs. If no metadata was specified at subscription creation time, this defaults to an empty dictionary."
                    },
                    "invoicing_threshold": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoicing Threshold"
                    },
                    "price_intervals": {
                        "items": {
                            "$ref": "#/components/schemas/PriceInterval"
                        },
                        "type": "array",
                        "title": "Price Intervals",
                        "description": "The price intervals for this subscription."
                    },
                    "discount_intervals": {
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/AmountDiscountInterval"
                                },
                                {
                                    "$ref": "#/components/schemas/PercentageDiscountInterval"
                                },
                                {
                                    "$ref": "#/components/schemas/UsageDiscountInterval"
                                }
                            ],
                            "discriminator": {
                                "propertyName": "discount_type",
                                "mapping": {
                                    "amount": "#/components/schemas/AmountDiscountInterval",
                                    "percentage": "#/components/schemas/PercentageDiscountInterval",
                                    "usage": "#/components/schemas/UsageDiscountInterval"
                                }
                            }
                        },
                        "type": "array",
                        "title": "Discount Intervals",
                        "description": "The discount intervals for this subscription."
                    },
                    "minimum_intervals": {
                        "items": {
                            "$ref": "#/components/schemas/MinimumInterval"
                        },
                        "type": "array",
                        "title": "Minimum Intervals",
                        "description": "The minimum intervals for this subscription."
                    },
                    "maximum_intervals": {
                        "items": {
                            "$ref": "#/components/schemas/MaximumInterval"
                        },
                        "type": "array",
                        "title": "Maximum Intervals",
                        "description": "The maximum intervals for this subscription."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "customer",
                    "plan",
                    "start_date",
                    "end_date",
                    "created_at",
                    "current_billing_period_start_date",
                    "current_billing_period_end_date",
                    "status",
                    "trial_info",
                    "active_plan_phase_order",
                    "fixed_fee_quantity_schedule",
                    "default_invoice_memo",
                    "auto_collection",
                    "net_terms",
                    "redeemed_coupon",
                    "billing_cycle_day",
                    "metadata",
                    "invoicing_threshold",
                    "price_intervals",
                    "discount_intervals",
                    "minimum_intervals",
                    "maximum_intervals"
                ],
                "title": "Subscription",
                "description": "A [subscription](../guides/core-concepts.mdx#subscription) represents the purchase of a plan by a customer.\n\nBy default, subscriptions begin on the day that they're created and renew automatically for each billing cycle at\nthe cadence that's configured in the plan definition.\n\nSubscriptions also default to **beginning of month alignment**, which means the first invoice issued for the\nsubscription will have pro-rated charges between the `start_date` and the first of the following month. Subsequent\nbilling periods will always start and end on a month boundary (e.g. subsequent month starts for monthly billing).\n\nDepending on the plan configuration, any _flat_ recurring fees will be billed either at the beginning (in-advance)\nor end (in-arrears) of each billing cycle. Plans default to **in-advance billing**. Usage-based fees are billed in\narrears as usage is accumulated. In the normal course of events, you can expect an invoice to contain usage-based\ncharges for the previous period, and a recurring fee for the following period."
            },
            "SubscriptionCosts": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/AggregatedCost"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "SubscriptionCosts"
            },
            "SubscriptionMinified": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "example": "VDGsT23osdLb84KD"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "SubscriptionMinified"
            },
            "SubscriptionPlanChange": {
                "properties": {
                    "plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Id",
                        "description": "The plan that the given subscription should be switched to. Note that either this property or `external_plan_id` must be specified.",
                        "example": "ZMwNQefe7J3ecf7W"
                    },
                    "external_plan_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Plan Id",
                        "description": "The external_plan_id of the plan that the given subscription should be switched to. Note that either this property or `plan_id` must be specified.",
                        "example": "ZMwNQefe7J3ecf7W"
                    },
                    "price_overrides": {
                        "oneOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/OverrideUnitPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverridePackagePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideMatrixPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBulkBpsPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideBulkPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTestRatingFunctionPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideFivetranExamplePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideThresholdTotalAmountPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredPackagePrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverrideTieredWithMinimumPrice"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OverridePackageWithAllocationPrice"
                                        }
                                    ],
                                    "discriminator": {
                                        "propertyName": "model_type",
                                        "mapping": {
                                            "bps": "#/components/schemas/OverrideBpsPrice",
                                            "bulk": "#/components/schemas/OverrideBulkPrice",
                                            "bulk_bps": "#/components/schemas/OverrideBulkBpsPrice",
                                            "fivetran_example": "#/components/schemas/OverrideFivetranExamplePrice",
                                            "matrix": "#/components/schemas/OverrideMatrixPrice",
                                            "package": "#/components/schemas/OverridePackagePrice",
                                            "package_with_allocation": "#/components/schemas/OverridePackageWithAllocationPrice",
                                            "test_rating_function": "#/components/schemas/OverrideTestRatingFunctionPrice",
                                            "threshold_total_amount": "#/components/schemas/OverrideThresholdTotalAmountPrice",
                                            "tiered": "#/components/schemas/OverrideTieredPrice",
                                            "tiered_bps": "#/components/schemas/OverrideTieredBpsPrice",
                                            "tiered_package": "#/components/schemas/OverrideTieredPackagePrice",
                                            "tiered_with_minimum": "#/components/schemas/OverrideTieredWithMinimumPrice",
                                            "unit": "#/components/schemas/OverrideUnitPrice"
                                        }
                                    }
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price Overrides",
                        "description": "Optionally provide a list of overrides for prices on the plan"
                    },
                    "per_credit_overage_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Per Credit Overage Amount"
                    },
                    "credits_overage_rate": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Credits Overage Rate"
                    },
                    "change_option": {
                        "$ref": "#/components/schemas/ChangeOption"
                    },
                    "change_date": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Change Date",
                        "description": "The date that the plan change should take effect. This parameter can only be passed if the `change_option` is `requested_date`.",
                        "example": "2017-07-21T17:32:28Z"
                    },
                    "align_billing_with_plan_change_date": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Align Billing With Plan Change Date",
                        "description": "[DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned with the plan change\u2019s effective date."
                    },
                    "billing_cycle_alignment": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillingCycleAlignment"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Reset billing periods to be aligned with the plan change\u2019s effective date or start of the month. Defaults to `unchanged` which keeps subscription's existing billing cycle alignment.",
                        "default": "unchanged"
                    },
                    "coupon_redemption_code": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Coupon Redemption Code",
                        "description": "Redemption code to be used for this subscription. If the coupon cannot be found by its redemption code, or cannot be redeemed, an error response will be returned and the plan change will not be scheduled."
                    },
                    "invoicing_threshold": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoicing Threshold",
                        "description": "When this subscription's accrued usage reaches this threshold, an invoice will be issued for the subscription. If not specified, invoices will only be issued at the end of the billing period.",
                        "example": "10.00"
                    },
                    "initial_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Initial Phase Order",
                        "description": "The phase of the plan to start with",
                        "example": 2
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "change_option"
                ],
                "title": "SubscriptionPlanChange"
            },
            "SubscriptionScheduleItem": {
                "properties": {
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date"
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/PlanMinified"
                    }
                },
                "type": "object",
                "required": [
                    "start_date",
                    "end_date",
                    "plan"
                ],
                "title": "SubscriptionScheduleItem"
            },
            "SubscriptionScheduleItems": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/SubscriptionScheduleItem"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "SubscriptionScheduleItems"
            },
            "SubscriptionTrialInfo": {
                "properties": {
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    }
                },
                "type": "object",
                "required": [
                    "end_date"
                ],
                "title": "SubscriptionTrialInfo"
            },
            "SubscriptionUsage": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/UngroupedSubscriptionUsage"
                    },
                    {
                        "$ref": "#/components/schemas/GroupedSubscriptionUsage"
                    }
                ],
                "title": "SubscriptionUsage"
            },
            "Subscriptions": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Subscription"
                        },
                        "type": "array",
                        "title": "Data"
                    },
                    "pagination_metadata": {
                        "$ref": "#/components/schemas/PaginationMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "pagination_metadata"
                ],
                "title": "Subscriptions"
            },
            "TaxAmount": {
                "properties": {
                    "tax_rate_description": {
                        "type": "string",
                        "title": "Tax Rate Description",
                        "description": "The human-readable description of the applied tax rate."
                    },
                    "tax_rate_percentage": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tax Rate Percentage",
                        "description": "The tax rate percentage, out of 100."
                    },
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The amount of additional tax incurred by this tax rate."
                    }
                },
                "type": "object",
                "required": [
                    "tax_rate_description",
                    "tax_rate_percentage",
                    "amount"
                ],
                "title": "TaxAmount"
            },
            "TestRatingFunctionPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "test_rating_function"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "test_rating_function_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "test_rating_function_config"
                ],
                "title": "TestRatingFunctionPrice"
            },
            "ThresholdTotalAmountPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "threshold_total_amount"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "threshold_total_amount_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "threshold_total_amount_config"
                ],
                "title": "ThresholdTotalAmountPrice"
            },
            "Tier": {
                "properties": {
                    "first_unit": {
                        "type": "number",
                        "title": "First Unit",
                        "description": "Inclusive tier starting value"
                    },
                    "last_unit": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Unit",
                        "description": "Exclusive tier ending value. If null, this is treated as the last tier"
                    },
                    "unit_amount": {
                        "type": "string",
                        "title": "Unit Amount",
                        "description": "Amount per unit"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "first_unit",
                    "unit_amount"
                ],
                "title": "Tier"
            },
            "TierConfig": {
                "properties": {
                    "first_unit": {
                        "type": "number",
                        "title": "First Unit",
                        "example": 1
                    },
                    "last_unit": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Unit",
                        "example": 1000
                    },
                    "unit_amount": {
                        "type": "string",
                        "title": "Unit Amount",
                        "example": "3.00"
                    }
                },
                "type": "object",
                "required": [
                    "first_unit",
                    "last_unit",
                    "unit_amount"
                ],
                "title": "TierConfig"
            },
            "TierSubLineItem": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "title": "Amount",
                        "description": "The total amount for this sub line item.",
                        "example": "9.00"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "example": "Tier One"
                    },
                    "quantity": {
                        "type": "number",
                        "title": "Quantity",
                        "example": 5
                    },
                    "grouping": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SubLineItemGrouping"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "tier"
                        ],
                        "title": "Type"
                    },
                    "tier_config": {
                        "$ref": "#/components/schemas/TierConfig"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "name",
                    "quantity",
                    "grouping",
                    "type",
                    "tier_config"
                ],
                "title": "TierSubLineItem"
            },
            "TieredBpsConfig": {
                "properties": {
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/BpsTier"
                        },
                        "type": "array",
                        "title": "Tiers",
                        "description": "Tiers for a Graduated BPS pricing model, where usage is bucketed into specified tiers"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "tiers"
                ],
                "title": "TieredBpsConfig"
            },
            "TieredBpsPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_bps"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "tiered_bps_config": {
                        "$ref": "#/components/schemas/TieredBpsConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "tiered_bps_config"
                ],
                "title": "TieredBpsPrice"
            },
            "TieredConfig": {
                "properties": {
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/Tier"
                        },
                        "type": "array",
                        "title": "Tiers",
                        "description": "Tiers for rating based on total usage quantities into the specified tier"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "tiers"
                ],
                "title": "TieredConfig"
            },
            "TieredPackagePrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_package"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "tiered_package_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "tiered_package_config"
                ],
                "title": "TieredPackagePrice"
            },
            "TieredPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "tiered_config": {
                        "$ref": "#/components/schemas/TieredConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "tiered_config"
                ],
                "title": "TieredPrice"
            },
            "TieredWithMinimumPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "tiered_with_minimum"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "tiered_with_minimum_config": {
                        "$ref": "#/components/schemas/CustomRatingFunctionConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "tiered_with_minimum_config"
                ],
                "title": "TieredWithMinimumPrice"
            },
            "TooManyRequests": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#429-too-many-requests"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            429
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "TooManyRequests"
            },
            "TrialConfig": {
                "properties": {
                    "trial_period": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Trial Period"
                    },
                    "trial_period_unit": {
                        "type": "string",
                        "enum": [
                            "days"
                        ],
                        "title": "Trial Period Unit"
                    }
                },
                "type": "object",
                "required": [
                    "trial_period",
                    "trial_period_unit"
                ],
                "title": "TrialConfig"
            },
            "TrialDiscount": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "trial"
                        ],
                        "title": "Discount Type"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this discount applies to. For plan/plan phase discounts, this can be a subset of prices.",
                        "example": [
                            "h74gfhdjvn7ujokd",
                            "7hfgtgjnbvc3ujkl"
                        ]
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "trial_amount_discount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Trial Amount Discount",
                        "description": "Only available if discount_type is `trial`"
                    },
                    "trial_percentage_discount": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Trial Percentage Discount",
                        "description": "Only available if discount_type is `trial`"
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "applies_to_price_ids"
                ],
                "title": "TrialDiscount"
            },
            "TriggerSubscriptionPhaseParams": {
                "properties": {
                    "effective_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Effective Date",
                        "description": "The date on which the phase change should take effect. If not provided, defaults to today in the customer's timezone."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "TriggerSubscriptionPhaseParams"
            },
            "URLNotFound": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "https://docs.withorb.com/reference/error-responses#404-url-not-found"
                        ],
                        "title": "Type"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            404
                        ],
                        "title": "Status"
                    },
                    "detail": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Detail"
                    },
                    "title": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title"
                    },
                    "headers": {
                        "oneOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Headers"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "status"
                ],
                "title": "URLNotFound"
            },
            "UngroupedSubscriptionUsage": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/UngroupedSubscriptionUsageRecord"
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "UngroupedSubscriptionUsage"
            },
            "UngroupedSubscriptionUsageRecord": {
                "properties": {
                    "usage": {
                        "items": {
                            "$ref": "#/components/schemas/Usage"
                        },
                        "type": "array",
                        "title": "Usage"
                    },
                    "billable_metric": {
                        "$ref": "#/components/schemas/BillableMetricSimple"
                    },
                    "view_mode": {
                        "type": "string",
                        "enum": [
                            "periodic",
                            "cumulative"
                        ],
                        "title": "View Mode"
                    }
                },
                "type": "object",
                "required": [
                    "usage",
                    "billable_metric",
                    "view_mode"
                ],
                "title": "UngroupedSubscriptionUsageRecord"
            },
            "UnitConfig": {
                "properties": {
                    "unit_amount": {
                        "type": "string",
                        "title": "Unit Amount",
                        "description": "Rate per unit of usage"
                    },
                    "scaling_factor": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scaling Factor",
                        "description": "Multiplier to scale rated quantity by"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "unit_amount"
                ],
                "title": "UnitConfig"
            },
            "UnitPrice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "external_price_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Price Id"
                    },
                    "price_type": {
                        "type": "string",
                        "enum": [
                            "usage_price",
                            "fixed_price"
                        ],
                        "title": "Price Type"
                    },
                    "model_type": {
                        "type": "string",
                        "enum": [
                            "unit"
                        ],
                        "title": "Model Type"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "cadence": {
                        "type": "string",
                        "enum": [
                            "one_time",
                            "monthly",
                            "quarterly",
                            "annual"
                        ],
                        "title": "Cadence"
                    },
                    "billable_metric": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BillableMetricTiny"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "fixed_price_quantity": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fixed Price Quantity"
                    },
                    "plan_phase_order": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Plan Phase Order"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency"
                    },
                    "item": {
                        "$ref": "#/components/schemas/ItemSlim"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "unit_config": {
                        "$ref": "#/components/schemas/UnitConfig"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "external_price_id",
                    "price_type",
                    "model_type",
                    "created_at",
                    "cadence",
                    "billable_metric",
                    "fixed_price_quantity",
                    "plan_phase_order",
                    "currency",
                    "item",
                    "unit_config"
                ],
                "title": "UnitPrice"
            },
            "UnscheduleFixedFeeQuantityChangeParams": {
                "properties": {
                    "price_id": {
                        "type": "string",
                        "title": "Price Id",
                        "description": "Price for which the updates should be cleared. Must be a fixed fee."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "price_id"
                ],
                "title": "UnscheduleFixedFeeQuantityChangeParams"
            },
            "UpcomingInvoice": {
                "properties": {
                    "amount_due": {
                        "type": "string",
                        "title": "Amount Due",
                        "description": "This is the final amount required to be charged to the customer and reflects the application of the customer balance to the `total` of the invoice.",
                        "example": "8.00"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At",
                        "description": "The creation time of the resource in Orb.",
                        "example": "2022-05-01T07:01:31+00:00"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "An ISO 4217 currency string or `credits`",
                        "example": "USD"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "discount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Discount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "discounts": {
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        },
                        "type": "array",
                        "title": "Discounts"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Due Date",
                        "description": "When the invoice payment is due.",
                        "example": "2022-05-30T07:00:00+00:00"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "invoice_pdf": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Invoice Pdf",
                        "description": "The link to download the PDF representation of the `Invoice`.",
                        "example": "https://assets.withorb.com/invoice/rUHdhmg45vY45DX/qEAeuYePaphGMdFb"
                    },
                    "invoice_number": {
                        "type": "string",
                        "title": "Invoice Number",
                        "description": "Automatically generated invoice number to help track and reconcile invoices. Invoice numbers have a prefix such as `RFOBWG`. These can be sequential per account or customer.",
                        "example": "JYEFHK-00001"
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Minimum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minimum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Minimum Amount"
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Maximum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "maximum_amount": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Maximum Amount"
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineItem"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "The breakdown of prices in this invoice."
                    },
                    "subscription": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SubscriptionMinified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "subtotal": {
                        "type": "string",
                        "title": "Subtotal",
                        "description": "The total before any discounts and minimums are applied.",
                        "example": "8.00"
                    },
                    "total": {
                        "type": "string",
                        "title": "Total",
                        "description": "The total after any minimums and discounts have been applied.",
                        "example": "8.00"
                    },
                    "customer_balance_transactions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomerBalanceTransaction"
                        },
                        "type": "array",
                        "title": "Customer Balance Transactions"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "issued",
                            "paid",
                            "synced",
                            "void",
                            "draft"
                        ],
                        "title": "Status"
                    },
                    "shipping_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "billing_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "hosted_invoice_url": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Hosted Invoice Url",
                        "description": "A URL for the invoice portal."
                    },
                    "will_auto_issue": {
                        "type": "boolean",
                        "title": "Will Auto Issue",
                        "description": "This is true if the invoice will be automatically issued in the future, and false otherwise."
                    },
                    "eligible_to_issue_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Eligible To Issue At",
                        "description": "If the invoice has a status of `draft`, this will be the time that the invoice will be eligible to be issued, otherwise it will be `null`. If `auto-issue` is true, the invoice will automatically begin issuing at this time."
                    },
                    "customer_tax_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CustomerTaxId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "voided_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Voided At",
                        "description": "If the invoice has a status of `void`, this gives a timestamp when the invoice was voided."
                    },
                    "paid_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Paid At",
                        "description": "If the invoice has a status of `paid`, this gives a timestamp when the invoice was paid."
                    },
                    "issued_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Issued At",
                        "description": "If the invoice has been issued, this will be the time it transitioned to `issued` (even if it is now in a different state.)"
                    },
                    "scheduled_issue_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scheduled Issue At",
                        "description": "If the invoice is in draft, this timestamp will reflect when the invoice is scheduled to be issued."
                    },
                    "auto_collection": {
                        "$ref": "#/components/schemas/AutoCollection"
                    },
                    "memo": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memo",
                        "description": "Free-form text which is available on the invoice PDF and the Orb invoice portal."
                    },
                    "issue_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Issue Failed At",
                        "description": "If the invoice failed to issue, this will be the last time it failed to issue (even if it is now in a different state.)"
                    },
                    "sync_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sync Failed At",
                        "description": "If the invoice failed to sync, this will be the last time an external invoicing provider sync was attempted. This field will always be `null` for invoices using Orb Invoicing."
                    },
                    "payment_failed_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Failed At",
                        "description": "If payment was attempted on this invoice but failed, this will be the time of the most recent attempt."
                    },
                    "payment_started_at": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Payment Started At",
                        "description": "If payment was attempted on this invoice, this will be the start time of the most recent attempt. This field is especially useful for delayed-notification payment mechanisms (like bank transfers), where payment can take 3 days or more."
                    },
                    "credit_notes": {
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteSummary"
                        },
                        "type": "array",
                        "title": "Credit Notes",
                        "description": "A list of credit notes associated with the invoice"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata"
                    },
                    "target_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Target Date",
                        "description": "The scheduled date of the invoice",
                        "example": "2022-05-01T07:00:00+00:00"
                    }
                },
                "type": "object",
                "required": [
                    "amount_due",
                    "created_at",
                    "currency",
                    "customer",
                    "discount",
                    "discounts",
                    "due_date",
                    "id",
                    "invoice_pdf",
                    "invoice_number",
                    "minimum",
                    "minimum_amount",
                    "maximum",
                    "maximum_amount",
                    "line_items",
                    "subscription",
                    "subtotal",
                    "total",
                    "customer_balance_transactions",
                    "status",
                    "shipping_address",
                    "billing_address",
                    "hosted_invoice_url",
                    "will_auto_issue",
                    "eligible_to_issue_at",
                    "customer_tax_id",
                    "voided_at",
                    "paid_at",
                    "issued_at",
                    "scheduled_issue_at",
                    "auto_collection",
                    "memo",
                    "issue_failed_at",
                    "sync_failed_at",
                    "payment_failed_at",
                    "payment_started_at",
                    "credit_notes",
                    "metadata",
                    "target_date"
                ],
                "title": "UpcomingInvoice"
            },
            "UpdateEvent": {
                "properties": {
                    "customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Customer Id",
                        "description": "The Orb Customer identifier"
                    },
                    "external_customer_id": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "External Customer Id",
                        "description": "An alias for the Orb customer, whose mapping is specified when creating the customer"
                    },
                    "event_name": {
                        "type": "string",
                        "title": "Event Name",
                        "description": "A name to meaningfully identify the action or event type."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period.",
                        "example": "2020-12-09T16:09:53Z"
                    },
                    "properties": {
                        "type": "object",
                        "title": "Properties",
                        "description": "A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "event_name",
                    "timestamp",
                    "properties"
                ],
                "title": "UpdateEvent"
            },
            "Usage": {
                "properties": {
                    "quantity": {
                        "type": "number",
                        "title": "Quantity"
                    },
                    "timeframe_start": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe Start"
                    },
                    "timeframe_end": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timeframe End"
                    }
                },
                "type": "object",
                "required": [
                    "quantity",
                    "timeframe_start",
                    "timeframe_end"
                ],
                "title": "Usage"
            },
            "UsageDiscount": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "usage"
                        ],
                        "title": "Discount Type"
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "List of price_ids that this discount applies to. For plan/plan phase discounts, this can be a subset of prices.",
                        "example": [
                            "h74gfhdjvn7ujokd",
                            "7hfgtgjnbvc3ujkl"
                        ]
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Reason"
                    },
                    "usage_discount": {
                        "type": "number",
                        "title": "Usage Discount",
                        "description": "Only available if discount_type is `usage`. Number of usage units that this discount is for"
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "applies_to_price_ids",
                    "usage_discount"
                ],
                "title": "UsageDiscount"
            },
            "UsageDiscountCreationParams": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "usage"
                        ],
                        "title": "Discount Type"
                    },
                    "usage_discount": {
                        "type": "number",
                        "minimum": 0.0,
                        "title": "Usage Discount",
                        "description": "Only available if discount_type is `usage`. Number of usage units that this discount is for.",
                        "example": 2
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "usage_discount"
                ],
                "title": "UsageDiscountCreationParams"
            },
            "UsageDiscountInterval": {
                "properties": {
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "usage"
                        ],
                        "title": "Discount Type"
                    },
                    "usage_discount": {
                        "type": "number",
                        "title": "Usage Discount",
                        "description": "Only available if discount_type is `usage`. Number of usage units that this discount is for"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Start Date",
                        "description": "The start date of the discount interval."
                    },
                    "end_date": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date",
                        "description": "The end date of the discount interval."
                    },
                    "applies_to_price_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Ids",
                        "description": "The price ids that this discount interval applies to."
                    },
                    "applies_to_price_interval_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Applies To Price Interval Ids",
                        "description": "The price interval ids that this discount interval applies to."
                    }
                },
                "type": "object",
                "required": [
                    "discount_type",
                    "usage_discount",
                    "start_date",
                    "end_date",
                    "applies_to_price_ids",
                    "applies_to_price_interval_ids"
                ],
                "title": "UsageDiscountInterval"
            },
            "ValidationError": {
                "properties": {
                    "idempotency_key": {
                        "type": "string",
                        "title": "Idempotency Key",
                        "description": "The passed idempotency_key corresponding to the validation_errors"
                    },
                    "validation_errors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Validation Errors",
                        "description": "An array of strings corresponding to validation failures for this idempotency_key."
                    }
                },
                "type": "object",
                "required": [
                    "idempotency_key",
                    "validation_errors"
                ],
                "title": "ValidationError"
            },
            "VoidInitiatedLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "void_initiated"
                        ],
                        "title": "Entry Type"
                    },
                    "new_block_expiry_date": {
                        "type": "string",
                        "format": "date-time",
                        "title": "New Block Expiry Date"
                    },
                    "void_reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Void Reason"
                    },
                    "void_amount": {
                        "type": "number",
                        "title": "Void Amount"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type",
                    "new_block_expiry_date",
                    "void_reason",
                    "void_amount"
                ],
                "title": "VoidInitiatedLedgerEntry"
            },
            "VoidLedgerEntry": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "ledger_sequence_number": {
                        "type": "integer",
                        "title": "Ledger Sequence Number"
                    },
                    "entry_status": {
                        "type": "string",
                        "enum": [
                            "committed",
                            "pending"
                        ],
                        "title": "Entry Status"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerMinified"
                    },
                    "starting_balance": {
                        "type": "number",
                        "title": "Starting Balance"
                    },
                    "ending_balance": {
                        "type": "number",
                        "title": "Ending Balance"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "description": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Metadata"
                    },
                    "credit_block": {
                        "$ref": "#/components/schemas/AffectedBlock"
                    },
                    "entry_type": {
                        "type": "string",
                        "enum": [
                            "void"
                        ],
                        "title": "Entry Type"
                    },
                    "void_reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Void Reason"
                    },
                    "void_amount": {
                        "type": "number",
                        "title": "Void Amount"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ledger_sequence_number",
                    "entry_status",
                    "customer",
                    "starting_balance",
                    "ending_balance",
                    "amount",
                    "created_at",
                    "description",
                    "metadata",
                    "credit_block",
                    "entry_type",
                    "void_reason",
                    "void_amount"
                ],
                "title": "VoidLedgerEntry"
            }
        },
        "securitySchemes": {
            "APIKeyAuth": {
                "type": "http",
                "description": "API Keys can be issued in the Orb's web application. Orb recommends that separate API keys be created for each service that you'd like to attribute actions to separately (e.g. a key for ingesting events, and a key for manipulating customer balances automatically). This also allows you to rotate keys and revoke access more flexibly.",
                "scheme": "bearer"
            }
        }
    },
    "security": [
        {
            "APIKeyAuth": []
        }
    ],
    "tags": [
        {
            "name": "Availability"
        },
        {
            "name": "Coupon",
            "description": "A coupon represents a reusable discount configuration, and have an attached redemption code that can be issued to\nyour end users. Coupons are most often used in self-serve signup or upgrade flows in your checkout experience or\nbilling portal.\n\nTo redeem a coupon, pass the `redemption_code` property in the [create subscription](create-subscription.api.mdx)\nor [schedule plan change](schedule-plan-change.api.mdx) request."
        },
        {
            "name": "Credit",
            "description": "The [Credit Ledger Entry resource](/guides/product-catalog/prepurchase) models prepaid credits within Orb."
        },
        {
            "name": "Credit note",
            "description": "The [Credit Note](/guides/invoicing/credit-notes) resource represents a credit that has been applied to a\nparticular invoice."
        },
        {
            "name": "Customer",
            "description": "A customer is a buyer of your products, and the other party to the billing relationship.\n\nIn Orb, customers are assigned system generated identifiers automatically, but it's often desirable to have these\nmatch existing identifiers in your system. To avoid having to denormalize Orb ID information, you can pass in an\n`external_customer_id` with your own identifier. See\n[Customer ID Aliases](../guides/events-and-metrics/customer-aliases) for further information about how these\naliases work in Orb.\n\nIn addition to having an identifier in your system, a customer may exist in a payment provider solution like\nStripe. Use the `payment_provider_id` and the `payment_provider` enum field to express this mapping.\n\nA customer also has a timezone (from the standard [IANA timezone database](https://www.iana.org/time-zones)), which\ndefaults to your account's timezone. See [Timezone localization](../guides/product-catalog/timezones.md) for\ninformation on what this timezone parameter influences within Orb."
        },
        {
            "name": "Event",
            "description": "The [Event](../guides/core-concepts.mdx#event) resource represents a usage event that has been created for a\ncustomer. Events are the core of Orb's usage-based billing model, and are used to calculate the usage charges for\na given billing period."
        },
        {
            "name": "Invoice",
            "description": "An [`Invoice`](../guides/concepts#invoice) is a fundamental billing entity, representing the request for payment for\na single subscription. This includes a set of line items, which correspond to prices in the subscription's plan and\ncan represent fixed recurring fees or usage-based fees. They are generated at the end of a billing period, or as\nthe result of an action, such as a cancellation."
        },
        {
            "name": "Item",
            "description": "The Item resource represents a sellable product or good. Items are associated with all line items, billable metrics,\nand prices and are used for defining external sync behavior for invoices and tax calculation purposes."
        },
        {
            "name": "Metric",
            "description": "The Metric resource represents a calculation of a quantity based on events.\nMetrics are defined by the query that transforms raw usage events into meaningful values for your customers."
        },
        {
            "name": "Plan",
            "description": "The [Plan](../guides/core-concepts.mdx#plan-and-price) resource represents a plan that can be subscribed to by a\ncustomer. Plans define the billing behavior of the subscription. You can see more about how to configure prices\nin the [Price resource](/reference/price)."
        },
        {
            "name": "Price",
            "description": "The Price resource represents a price that can be billed on a subscription, resulting in a charge on an invoice in\nthe form of an invoice line item. Prices take a quantity and determine an amount to bill.\n\nOrb supports a few different pricing models out of the box. Each of these models is serialized differently in a\ngiven Price object. The model_type field determines the key for the configuration object that is present.\n\n## Unit pricing\nWith unit pricing, each unit costs a fixed amount.\n```json\n{\n    ...\n    \"model_type\": \"unit\",\n    \"unit_config\": {\n        \"unit_amount\": \"0.50\"\n    }\n    ...\n}\n```\n\n## Tiered pricing\nIn tiered pricing, the cost of a given unit depends on the tier range that it falls into, where each tier range is\ndefined by an upper and lower bound. For example, the first ten units may cost $0.50 each and all units thereafter\nmay cost $0.10 each.\n```json\n{\n    ...\n    \"model_type\": \"tiered\",\n    \"tiered_config\": {\n        \"tiers\": [\n            {\n                \"first_unit\": 1,\n                \"last_unit\": 10,\n                \"unit_amount\": \"0.50\"\n            },\n            {\n                \"first_unit\": 11,\n                \"last_unit\": null,\n                \"unit_amount\": \"0.10\"\n            }\n        ]\n    }\n    ...\n```\n\n## Bulk pricing\nBulk pricing applies when the number of units determine the cost of all units. For example, if you've bought less\nthan 10 units, they may each be $0.50 for a total of $5.00. Once you've bought more than 10 units, all units may\nnow be priced at $0.40 (i.e. 101 units total would be $40.40).\n```json\n{\n    ...\n    \"model_type\": \"bulk\",\n    \"bulk_config\": {\n        \"tiers\": [\n            {\n                \"maximum_units\": 10,\n                \"unit_amount\": \"0.50\"\n            },\n            {\n                \"maximum_units\": 1000,\n                \"unit_amount\": \"0.40\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Package pricing\nPackage pricing defines the size or granularity of a unit for billing purposes. For example, if the package size is\nset to 5, then 4 units will be billed as 5 and 6 units will be billed at 10.\n```json\n{\n    ...\n    \"model_type\": \"package\",\n    \"package_config\": {\n        \"package_amount\": \"0.80\",\n        \"package_size\": 10\n    }\n    ...\n}\n```\n\n## BPS pricing\nBPS pricing specifies a per-event (e.g. per-payment) rate in one hundredth of a percent (the number of basis points\nto charge), as well as a cap per event to assess. For example, this would allow you to assess a fee of 0.25% on\nevery payment you process, with a maximum charge of $25 per payment.\n```json\n{\n    ...\n    \"model_type\": \"bps\",\n    \"bps_config\": {\n       \"bps\": 125,\n       \"per_unit_maximum\": \"11.00\"\n    }\n    ...\n }\n```\n\n## Bulk BPS pricing\nBulk BPS pricing specifies BPS parameters in a tiered manner, dependent on the total quantity across all events.\nSimilar to bulk pricing, the BPS parameters of a given event depends on the tier range that the billing period\nfalls into. Each tier range is defined by an upper bound. For example, after $1.5M of payment volume is reached,\neach individual payment may have a lower cap or a smaller take-rate.\n```json\n    ...\n    \"model_type\": \"bulk_bps\",\n    \"bulk_bps_config\": {\n        \"tiers\": [\n           {\n                \"maximum_amount\": \"1000000.00\",\n                \"bps\": 125,\n                \"per_unit_maximum\": \"19.00\"\n           },\n          {\n                \"maximum_amount\": null,\n                \"bps\": 115,\n                \"per_unit_maximum\": \"4.00\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Tiered BPS pricing\nTiered BPS pricing specifies BPS parameters in a graduated manner, where an event's applicable parameter is a\nfunction of its marginal addition to the period total. Similar to tiered pricing, the BPS parameters of a given\nevent depends on the tier range that it falls into, where each tier range is defined by an upper and lower bound.\nFor example, the first few payments may have a 0.8 BPS take-rate and all payments after a specific volume may\nincur a take-rate of 0.5 BPS each.\n```json\n    ...\n    \"model_type\": \"tiered_bps\",\n    \"tiered_bps_config\": {\n        \"tiers\": [\n           {\n                \"minimum_amount\": \"0\",\n                \"maximum_amount\": \"1000000.00\",\n                \"bps\": 125,\n                \"per_unit_maximum\": \"19.00\"\n           },\n          {\n                \"minimum_amount\": \"1000000.00\",\n                \"maximum_amount\": null,\n                \"bps\": 115,\n                \"per_unit_maximum\": \"4.00\"\n            }\n        ]\n    }\n    ...\n}\n```\n\n## Matrix pricing\nMatrix pricing defines a set of unit prices in a one or two-dimensional matrix. `dimensions` defines the two event\nproperty values evaluated in this pricing model. In a one-dimensional matrix, the second value is `null`. Every\nconfiguration has a list of `matrix_values` which give the unit prices for specified property values. In a\none-dimensional matrix, the matrix values will have `dimension_values` where the second value of the pair is null.\nIf an event does not match any of the dimension values in the matrix, it will resort to the `default_unit_amount`.\n```json\n{\n    \"model_type\": \"matrix\"\n    \"matrix_config\": {\n        \"default_unit_amount\": \"3.00\",\n        \"dimensions\": [\n            \"cluster_name\",\n            \"region\"\n        ],\n        \"matrix_values\": [\n            {\n                \"dimension_values\": [\n                    \"alpha\",\n                    \"west\"\n                ],\n                \"unit_amount\": \"2.00\"\n            },\n            ...\n        ]\n    }\n}\n```\n\n### Fixed fees\nFixed fees are prices that are applied independent of usage quantities, and follow unit pricing. They also have an\nadditional parameter `fixed_price_quantity`. If the Price represents a fixed cost, this represents the quantity of\nunits applied.\n```json\n{\n    ...\n    \"id\": \"price_id\",\n    \"model_type\": \"unit\",\n    \"unit_config\": {\n       \"unit_amount\": \"2.00\"\n    },\n    \"fixed_price_quantity\": 3.0\n    ...\n}\n```"
        },
        {
            "name": "Price interval",
            "description": "The Price Interval resource represents a period of time for which a price will bill on a subscription. A\nsubscription\u2019s price intervals define its billing behavior."
        },
        {
            "name": "Subscription",
            "description": "A [subscription](../guides/core-concepts.mdx#subscription) represents the purchase of a plan by a customer.\n\nBy default, subscriptions begin on the day that they're created and renew automatically for each billing cycle at\nthe cadence that's configured in the plan definition.\n\nSubscriptions also default to **beginning of month alignment**, which means the first invoice issued for the\nsubscription will have pro-rated charges between the `start_date` and the first of the following month. Subsequent\nbilling periods will always start and end on a month boundary (e.g. subsequent month starts for monthly billing).\n\nDepending on the plan configuration, any _flat_ recurring fees will be billed either at the beginning (in-advance)\nor end (in-arrears) of each billing cycle. Plans default to **in-advance billing**. Usage-based fees are billed in\narrears as usage is accumulated. In the normal course of events, you can expect an invoice to contain usage-based\ncharges for the previous period, and a recurring fee for the following period."
        }
    ],
    "x-speakeasy-name-override": [
        {
            "operationId": "^get.*",
            "methodNameOverride": "fetch"
        },
        {
            "operationId": "^fetch.*",
            "methodNameOverride": "fetch"
        },
        {
            "operationId": "^amend.*",
            "methodNameOverride": "amend"
        },
        {
            "operationId": "^create.*",
            "methodNameOverride": "create"
        },
        {
            "operationId": "^delete.*",
            "methodNameOverride": "delete"
        },
        {
            "operationId": "^archive.*",
            "methodNameOverride": "archive"
        },
        {
            "operationId": "^list.*",
            "methodNameOverride": "list"
        },
        {
            "operationId": "^search.*",
            "methodNameOverride": "search"
        },
        {
            "operationId": "^cancel.*",
            "methodNameOverride": "cancel"
        }
    ]
}